package Codigo;

import java_cup.runtime.Symbol;
import Codigo.archivo_ingresado;
import Codigo.semantico.analisis;
import Codigo.semantico.literal;

parser code
{:
    protected analisis analis_semantico =  new analisis();
    protected Symbol s;
    
    public void syntax_error(Symbol s){
        archivo_ingresado.reportarError("recuperable" ,s.left+1,s.right+1,s.value);
        /*this.s = s;*/
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         archivo_ingresado.reportarError("no recuperable" ,s.left+1,s.right+1,s.value);
    }
    
    public void semantic_error(int left, int right, String mensaje){
        archivo_ingresado.reportarError_Semantico("recuperable",left+1,right+1,mensaje);
    }   

    public Symbol getS(){
        return this.s;
}
:};




terminal Delimitador,
        Llave_a,
        Llave_c,
        Asignacion, 
        Main,
        Return,
        Input,
        Simbolo_input,
        Print,
        Null,
        Corchete_a,
        Corchete_c,
        Parentesis_a,
        Parentesis_c,
        Coma,
        True,
        False,
        If,
        Else,
        Do,
        While,
        For,
        Switch,
        Case,
        Break,
        Default,
        Sig_pregunta,
        Dos_puntos,
        Suma,
        Resta,
        Division,
        Multiplicacion,
        Potencia,
        Modulo,
        Unario_positivo,
        Unario_negatico,
        Menor,
        Mayor,
        Igual,
        Diferente,
        Menor_igual,
        Mayor_igual,
        Conjuncion,
        Disyuncion,
        Negacion,
        T_int,
        T_float,
        T_bool,
        T_char,
        T_string,
        T_void,
        String_to_int,
        Identificador,
        String,
        Character,
        Int,
        Float,
        Error;
        /*Comentario,*/
        /**/


non terminal INICIO,
    TIPOS_ARITMETICOS,
    TIPOS_RELACIONALES,
    TIPO_ARREGLO,
    TIPOS_LOGICOS,
    TIPOS_VARIABLES,
    LITERAL_NUMERICO,
    LITERAL_CADENA,
    LITERAL_BOOLEANO, 
    LITERAL_FUNID,
    POSICION_ARREGLO,

    EXP_ARITMETICA_UNA,
    PARAM_EXP_ARITMETICA,
    EXP_ARITMETICA_BIN,
    PARAM_EXP_RELACIONAL,
    EXP_RELACIONAL,
    EXP_LOGICA_UNA,
    EXP_LOGICA,
    SENTENCIA,
    CONDICION,
    BLOQUE,
    BLOQUE_ANIDADO,
    IF_ELSE,
    WHILE,
    DO_WHILE,
    FOR,
    STATEMENT1,
    SWITCH,
    PARAM_SWITCH,
    CASE_SWITCH,
    TIPOS_RETORNO_FUNCION,
    TIPOS_PARAM_FUNCION_AUX,
    TIPOS_PARAMETRO_FUNCION,
    DEC_FUNCION,
    RETORNOS_FUNCION,
    PARAMETROS_FUNCION_AUX,
    PARAMETROS_FUNCION,
    FUNCION,
    LEER,
    ESCRIBIR,
    PARAM_OPERADOR_TERNARIO,
    OPERADOR_TERNARIO,
    DEC_VARIABLE,
    PARAMETROS_ARREGLO_AUX,
    PARAMETROS_ARREGLO,
    ASIG_VARIABLE,   
    CAST_STRING_INT,
    /*COMENTARIO,*/

    /*procedimeintos*/
    CALL_PROC_ID_FUNC,
    CALL_PROC_BLOQUE,
    CALL_PROC_BLOQUE_CIERRE,

    CALL_PROC_IF,
    CALL_PROC_IF_CIERRE,
    CALL_PROC_ELSE,
    CALL_PROC_ELSE_CIERRE,
    CALL_PROC_WHILE,
    CALL_PROC_WHILE_CIERRE,
    CALL_PROC_DOWHILE,
    CALL_PROC_DOWHILE_CIERRE,
    CALL_PROC_FOR,
    CALL_PROC_FOR_CIERRE,

    CALL_PROC_MAIN;
   

/* Precedencia */
precedence left FUNCION,CALL_PROC_IF;


start with INICIO;

CALL_PROC_MAIN::=
    Main: id_func {:
                    RESULT = id_func;
                    boolean flag= parser.analis_semantico.dec_func(id_func); 
                    if(!flag){
                        String mensaje = "La variable '" + id_func + "' ya est√° definida";
                        parser.semantic_error(id_funcleft,id_funcright, mensaje);
                        parser.analis_semantico.set_id_current_block("null");
                    }else{
                        parser.analis_semantico.set_id_current_block(id_func.toString());
                    }
                    :};


INICIO ::= 
    T_int CALL_PROC_MAIN Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c {: parser.analis_semantico.dec_main(); :}
    |DEC_FUNCION INICIO; 


TIPOS_ARITMETICOS ::= 
     Suma : tipo  {:RESULT = tipo; :} 
    |Resta: tipo  {:RESULT = tipo; :} 
    |Division: tipo  {:RESULT = tipo; :} 
    |Multiplicacion: tipo  {:RESULT = tipo; :}  
    |Potencia: tipo  {:RESULT = tipo; :}  
    |Modulo: tipo  {:RESULT = tipo; :}  ; 


TIPOS_RELACIONALES ::=
     Menor: tipo  {:RESULT = tipo; :}  
    |Mayor: tipo  {:RESULT = tipo; :}  
    |Igual: tipo  {:RESULT = tipo; :}  
    |Diferente: tipo  {:RESULT = tipo; :} 
    |Menor_igual: tipo  {:RESULT = tipo; :}  
    |Mayor_igual: tipo  {:RESULT = tipo; :}  ;

TIPOS_LOGICOS ::=
     Conjuncion: tipo  {:RESULT = tipo; :}  
    |Disyuncion: tipo  {:RESULT = tipo; :} ; 

TIPOS_VARIABLES ::=
     T_int: tipo  {:RESULT = tipo; :} 
    |T_float: tipo  {:RESULT = tipo; :}
    |T_bool: tipo  {:RESULT = tipo; :} 
    |T_char: tipo  {:RESULT = tipo; :} 
    |T_string: tipo  {:RESULT = tipo; :} ; 


/*Literales*/

LITERAL_NUMERICO ::= 
     Int : lit  {:  
                    literal litObject =  new literal();
                    litObject.setTipo("int");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                :} 
    |Float: lit  {: 
                    literal litObject =  new literal();
                    litObject.setTipo("float");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                :}

    |TIPO_ARREGLO: literal  {:RESULT = literal; :};


LITERAL_CADENA ::= 
     String: lit  {:
                    literal litObject =  new literal();
                    litObject.setTipo("string");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                    :}
    |Character: lit  {:
                    literal litObject =  new literal();
                    litObject.setTipo("char");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    :} ;

LITERAL_BOOLEANO ::= 
     True: lit  {:
                    literal litObject =  new literal();
                    litObject.setTipo("bool");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    :}
    |False: lit  {:
                    literal litObject =  new literal();
                    litObject.setTipo("bool");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    :};


LITERAL_FUNID ::= 
    Identificador: lit  {:
                    literal litObject =  new literal();
                    litObject.setTipo(parser.analis_semantico.get_tipo_var(lit.toString())); //obtener tipo a traves de una funcion 
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    if(litObject.getTipo()!="null"){
                        if(parser.analis_semantico.var_inicializada(lit.toString()).equals("false")){
                            String mensaje = "El identificador '" + lit.toString() + "' no se ha inicializado";
                            parser.semantic_error(litleft,litright, mensaje);
                        }
                    }
                    RESULT = litObject;  
                     :} 
    |FUNCION: lit  {:
                    literal litObject =  new literal();
                    litObject.setTipo(parser.analis_semantico.get_tipo_func(lit.toString())); //obtener tipo a traves de una funcion 
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = lit;:};

TIPO_ARREGLO::=
    Identificador:id_arreglo Corchete_a LITERAL_NUMERICO:num Corchete_c {: 
                                                                        String res= parser.analis_semantico.get_tipo_var(id_arreglo.toString());
                                                                        literal litObject2 =  new literal();
                                                                        litObject2.setTipo("null");
                                                                        if(res!="null"){
                                                                            if(res=="array"){
                                                                                literal litObject1=(literal)num;
                                                                                litObject2.setTipo("int"); 
                                                                                litObject2.setResultado(id_arreglo+ "["+litObject1.getTextual()+"]");
                                                                                litObject2.setTextual(id_arreglo+ "["+litObject1.getTextual()+"]");
                                                                               
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + id_arreglo + "' no es un array";
                                                                                parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                            }

                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_arreglo + "' no se ha declarado";
                                                                            parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                        }
                                                                         RESULT = litObject2;

                                                                        
                                                                        :}
    |Identificador:id_arreglo Corchete_a LITERAL_FUNID:id Corchete_c {:
                                                                        String res= parser.analis_semantico.get_tipo_var(id_arreglo.toString());
                                                                        literal litObject2 =  new literal();
                                                                        litObject2.setTipo("null");
                                                                        if(res!="null"){
                                                                            if(res=="array"){
                                                                                literal litObject3=(literal)id;
                                                                                if(litObject3.getTipo().equals("int")){

                                                                                    literal litObject4 =  new literal();
                                                                                    litObject4.setTipo("int"); //obtener tipo a traves de una funcion 
                                                                                    litObject4.setResultado(id_arreglo+ "["+litObject4.getTextual()+"]");
                                                                                    litObject4.setTextual(id_arreglo+ "["+litObject4.getTextual()+"]");
                                                                                

                                                                                }
                                                                                else{
                                                                                    String mensaje = "Imposible convertir expl√≠citamente a int'" + litObject3.getTextual()+"'" ;
                                                                                    parser.semantic_error(idleft,idright, mensaje);
                                                                                }
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + id_arreglo + "' no es un array";
                                                                                parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                            }

                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_arreglo + "' no se ha declarado";
                                                                            parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                        }
                                                                        RESULT = litObject2;
:};

/*Declaracion de variables */
PARAM_OPERADOR_TERNARIO ::=
    LITERAL_NUMERICO:lit  {:RESULT = lit; :} 
    |LITERAL_CADENA:lit  {:RESULT = lit; :}
    |EXP_ARITMETICA_UNA:lit  {:RESULT = lit; :} 
    |EXP_ARITMETICA_BIN:lit  {:
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                :}
    |EXP_LOGICA_UNA:lit  {: RESULT = lit; 
                            :}
    |EXP_LOGICA:lit  {:
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado(lit.toString());
                        litObject.setTextual(lit.toString());
                        RESULT = litObject; 
                        :}; 



OPERADOR_TERNARIO ::=
    Corchete_a Parentesis_a EXP_LOGICA_UNA:exp Parentesis_c Sig_pregunta PARAM_OPERADOR_TERNARIO:param1 Dos_puntos PARAM_OPERADOR_TERNARIO:param2 Corchete_c {: 
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                literal objectexp=(literal)exp;
                                                                                                literal litObject =  new literal();
                                                                                                litObject.setTipo("null");
                                                                                                litObject.setResultado("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                litObject.setTextual("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                        if(objectexp.getTipo().equals("bool")){
                                                                                                            if(objectparam1.getTipo().equals(objectparam2.getTipo())){
                                                                                                                    litObject.setTipo(objectparam1.getTipo());
                                                                                                                    
                                                                                                            }
                                                                                                            else{
                                                                                                                String mensaje = "Los tipos de retorno del 'IF ternario' no coinciden";
                                                                                                                parser.semantic_error(param1left,param1right, mensaje);
                                                                                                            } 
                                                                                                        }else{
                                                                                                            String mensaje = "El identificador '" + objectexp.getTextual() + "' no permite esta operaci√≥n";
                                                                                                            parser.semantic_error(expleft,expright, mensaje); 
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(expleft,expright, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = litObject;     
                                                                                                :} 

   |Corchete_a Parentesis_a EXP_LOGICA:exp Parentesis_c Sig_pregunta PARAM_OPERADOR_TERNARIO:param1 Dos_puntos PARAM_OPERADOR_TERNARIO:param2 Corchete_c {:
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                literal litObject =  new literal();
                                                                                                litObject.setTipo("null");
                                                                                                litObject.setResultado("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                litObject.setTextual("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                        if(objectparam1.getTipo().equals(objectparam2.getTipo())){
                                                                                                                litObject.setTipo(objectparam1.getTipo());    
                                                                                                        }
                                                                                                        else{
                                                                                                            String mensaje = "Los tipos de retorno del 'IF ternario' no coinciden";
                                                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = litObject;     
                                                                                                :}; 

DEC_VARIABLE ::=
     TIPOS_VARIABLES:tipo_var Identificador:id_var {: 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(!flag){
                                                        parser.analis_semantico.setVar_Aux(id_var.toString(),tipo_var.toString());
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                    }
                                                    :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion LITERAL_NUMERICO:lit {:
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        literal litObject=(literal)lit;
                                                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }   
                                                                                    :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion LITERAL_CADENA:lit {: 
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    literal litObject=(literal)lit;
                                                                                    if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                        parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                    }
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                } 
                                                                                 :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion EXP_ARITMETICA_UNA:exp_una {:
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(exp_una!=null){
                                                                                            literal litObject=(literal)exp_una;
                                                                                            if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);    
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }
                                                                                        :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion EXP_ARITMETICA_BIN{:
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(tipo_var.toString().equals("int") || tipo_var.toString().equals("int")){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }else{
                                                                                            String mensaje = "Imposible convertir expl√≠citamente a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }
                                                                                    :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion EXP_LOGICA_UNA:exp {: 
                                                                        boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                        if(!flag){
                                                                            literal objectlit1=(literal)exp;
                                                                            String tipo= objectlit1.getTipo();
                                                                            if(tipo_var.toString().equals(tipo) ){
                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                            }
                                                                            else{
                                                                                String mensaje = "Imposible convertir expl√≠citamente de '" + tipo + "' a '"+tipo_var.toString()+"'";
                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                            }
                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                        }
                                                                                    :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion EXP_LOGICA:exp {:
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    if(tipo_var.toString().equals("bool")){
                                                                                        parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "Imposible convertir expl√≠citamente a '"+tipo_var.toString()+"'";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                } 
                                                                                :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion OPERADOR_TERNARIO:exp  {: 
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        literal objectlit1=(literal)exp;
                                                                                        String tipo= objectlit1.getTipo();
                                                                                        if(!tipo.equals("null")){
                                                                                            if(tipo_var.toString().equals(tipo)){
                                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                            }else{
                                                                                                String mensaje = "Imposible convertir expl√≠citamente de '" + tipo + "' a '"+tipo_var.toString()+"'";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }

                                                                                        :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Asignacion CAST_STRING_INT {: 
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    if(tipo_var.toString().equals("int")){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "Imposible convertir expl√≠citamente a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                }   
                                                                                 :}
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Corchete_a Corchete_c {: 
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
                                                                                                 :} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Corchete_a Corchete_c Asignacion Null {:
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }:} 
    |TIPOS_VARIABLES:tipo_var Identificador:id_var Corchete_a Corchete_c Asignacion Llave_a PARAMETROS_ARREGLO Llave_c {: 
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("array")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }:}  ;



/*Declaraciones necesarias para el arreglo*/
POSICION_ARREGLO ::=
    Int:lit {:      
                literal litObject =  new literal();
                litObject.setTipo("int");
                litObject.setResultado(lit);
                litObject.setTextual(lit.toString());
                RESULT = litObject; 
                :}
    |TIPO_ARREGLO:lit {:RESULT=lit;:}
    |LITERAL_FUNID :lit {:
                            literal objectparam1=(literal)lit;
                            if(!objectparam1.getTipo().equals("null")){
                                if(objectparam1.getTipo().equals("int")){

                                }else{
                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                    parser.semantic_error(litleft,litright, mensaje);
                                }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT=objectparam1;
                            :}
    |EXP_ARITMETICA_BIN:lit {:
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                :};


PARAMETROS_ARREGLO_AUX ::=
    Int:lit {:
            literal litObject =  new literal();
            litObject.setTipo("int");
            litObject.setResultado(lit);
            litObject.setTextual(lit.toString());
            RESULT = litObject; 
                :}
    |LITERAL_FUNID:lit {:
                            literal objectparam1=(literal)lit;
                            if(!objectparam1.getTipo().equals("null")){
                                if(objectparam1.getTipo().equals("int")){

                                }else{
                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                    parser.semantic_error(litleft,litright, mensaje);
                                }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT=objectparam1;
                            :} 
    |EXP_ARITMETICA_BIN:lit {:
                            literal litObject =  new literal();
                            litObject.setTipo("int");
                            litObject.setResultado(lit.toString());
                            litObject.setTextual(lit.toString());
                            RESULT = litObject; 
                               :} ;

PARAMETROS_ARREGLO::=
    PARAMETROS_ARREGLO_AUX:param1{:  
                            literal objectparam1=(literal)param1;
                            if(!objectparam1.getTipo().equals("null")){
                                    if(!objectparam1.getTipo().equals("int") ){
                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                        parser.semantic_error(param1left,param1right, mensaje); 
                                    }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(param1left,param1right, mensaje);
                            }
                            RESULT = objectparam1.getTextual(); 
                            :}
    | PARAMETROS_ARREGLO_AUX:param1 Coma PARAMETROS_ARREGLO:param2 {:
                                        literal objectparam1=(literal)param1;
                                        if(!objectparam1.getTipo().equals("null")){
                                                if(!objectparam1.getTipo().equals("int") ){
                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                    parser.semantic_error(param1left,param1right, mensaje); 
                                                }
                                        }else{
                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                            parser.semantic_error(param1left,param1right, mensaje);
                                        }
                                        RESULT = objectparam1.getTextual() + ","+ param2.toString(); 

                                                                        :};


/*Aignaciones de variables*/

ASIG_VARIABLE ::= 

     Identificador:id_var Asignacion Null{: 
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    if(flag){
                                        parser.analis_semantico.init_var(id_var.toString());
                                    }else{
                                        String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                    }:} 
    |Identificador:id_var Asignacion LITERAL_NUMERICO:lit {: 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(flag){
                                                        String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                        literal litObject=(literal)lit;
                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                            parser.analis_semantico.init_var(id_var.toString());
                                                        }
                                                        else{
                                                            String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                        }
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                    :} 
    |Identificador:id_var Asignacion LITERAL_CADENA:lit {: 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(flag){
                                                        String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                        literal litObject=(literal)lit;
                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                            parser.analis_semantico.init_var(id_var.toString());
                                                        }
                                                        else{
                                                            String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                        }
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                    :} 

    |Identificador:id_var  Asignacion EXP_ARITMETICA_UNA:lit {:
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }

                                                            :}
    |Identificador:id_var Asignacion EXP_ARITMETICA_BIN:lit {:
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }

                                                            :}

    |Identificador:id_var Asignacion EXP_LOGICA_UNA:lit {:
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }:}
    |Identificador:id_var Asignacion EXP_LOGICA:lit {: 
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                               String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }
                                                            :}

    |Identificador:id_var Asignacion OPERADOR_TERNARIO:lit {:
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir expl√≠citamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }
                                                                :}
    |Identificador:id_var Asignacion CAST_STRING_INT {:
                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                if(flag){
                                                    String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                    if(tipo_var.toString().equals("int")){
                                                        parser.analis_semantico.init_var(id_var.toString());
                                                    }
                                                    else{
                                                        String mensaje = "Imposible convertir expl√≠citamente de '" + tipo_var.toString() + "' a 'int'";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                }else{
                                                    String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                }
                                                :}

    |Identificador:id_var Corchete_a POSICION_ARREGLO Corchete_c Asignacion POSICION_ARREGLO {:
                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                if(flag){
                                                                    String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                    if(tipo_var.toString().equals("array")){
                                                                        parser.analis_semantico.init_var(id_var.toString());
                                                                    }
                                                                    else{
                                                                        String mensaje = "El identificador '" + id_var + "' no es un array";
                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                    }
                                                                }else{
                                                                    String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }                                       :};


/*Casteo de string a int*/
CAST_STRING_INT::= 
      String_to_int Parentesis_a LITERAL_CADENA Parentesis_c 
    | String_to_int Parentesis_a LITERAL_FUNID:lit Parentesis_c {:
                                                                     literal objectparam1=(literal)lit;
                                                                     if(!objectparam1.getTipo().equals("null")){
                                                                        if(objectparam1.getTipo().equals("string") || objectparam1.getTipo().equals("char")){

                                                                        }else{
                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                            parser.semantic_error(litleft,litright, mensaje); 
                                                                        }
                                                                     }else{
                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                        parser.semantic_error(litleft,litright, mensaje);
                                                                     }
                                                                        :};


/*Expresiones artimeticas*/
EXP_ARITMETICA_UNA ::=
    Unario_positivo Identificador:id_var {:
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    literal litObject =  new literal();
                                    RESULT=null;
                                    if(flag){
                                        String res= parser.analis_semantico.get_tipo_var(id_var.toString());
                                        if(res.equals("int") || res.equals("float")){
                                            if(parser.analis_semantico.var_inicializada(id_var.toString()).equals("true")){
                                                litObject.setTipo(res); //obtener tipo a traves de una funcion 
                                                litObject.setResultado("++"+id_var.toString());
                                                litObject.setTextual("++"+id_var.toString());
                                                RESULT = litObject;  
                                            }else{
                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha inicializado";
                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                            }
                                            
                                        }
                                        else{
                                            String mensaje = "El identificador '" + id_var + "' no permite esta operaci√≥n";
                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                        }
                                        
                                    }else{
                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                    }


                                    :}  
    | Unario_negatico Identificador:id_var {:
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    literal litObject =  new literal();
                                    RESULT=null;
                                    if(flag){
                                        String res= parser.analis_semantico.get_tipo_var(id_var.toString());
                                        if(res.equals("int") || res.equals("float")){
                                             if(parser.analis_semantico.var_inicializada(id_var.toString()).equals("true")){
                                                litObject.setTipo(res); //obtener tipo a traves de una funcion 
                                                litObject.setResultado("--"+id_var.toString());
                                                litObject.setTextual("--"+id_var.toString());
                                                RESULT = litObject;
                                             }
                                             else{
                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha inicializado";
                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                             }
                                              
                                        }
                                        else{
                                            String mensaje = "El identificador '" + id_var + "' no permite esta operaci√≥n";
                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                        }
                                        
                                    }else{
                                        String mensaje = "El identificador '" + id_var + "' ya est√° definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                    }
                                    :} ;
    

PARAM_EXP_ARITMETICA ::= 
    LITERAL_NUMERICO:lit  {:RESULT = lit; :}
    | LITERAL_FUNID: lit  {:RESULT = lit; :} 
    | EXP_ARITMETICA_UNA:lit  {:RESULT = lit; :};


EXP_ARITMETICA_BIN::=

     PARAM_EXP_ARITMETICA:param1 TIPOS_ARITMETICOS:tipo_arit PARAM_EXP_ARITMETICA:param2 {:
                                                                                literal objectparam1=(literal)param1;
                                                                                literal objectparam2=(literal)param2;
                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                        if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                            if(objectparam2.getTipo().equals("int") || objectparam2.getTipo().equals("float")){
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operaci√≥n";
                                                                                                 parser.semantic_error(param1left,param1right, mensaje); 
                                                                                            }
                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                }
                                                                                RESULT = param1.toString() + tipo_arit.toString() + param2.toString();
                                                                                :}
    |PARAM_EXP_ARITMETICA:param1 TIPOS_ARITMETICOS:tipo_arit EXP_ARITMETICA_BIN:param2 {: 
                                                                                        literal objectparam1=(literal)param1;
                                                                                        if(!objectparam1.getTipo().equals("null")){
                                                                                            if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                                            }
                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                                        }
                                                                                        RESULT = param1.toString() + tipo_arit.toString() + param2.toString();
                                                                                        :} 
    |Parentesis_a EXP_ARITMETICA_BIN:exp Parentesis_c {: RESULT = "(" + exp.toString() + ")"; :}
    |Parentesis_a EXP_ARITMETICA_BIN:exp Parentesis_c TIPOS_ARITMETICOS:tipo_arit PARAM_EXP_ARITMETICA:param2 {: RESULT = "(" + exp.toString() + ")" + tipo_arit.toString() + param2.toString() ; :}
    |Parentesis_a EXP_ARITMETICA_BIN:exp Parentesis_c TIPOS_ARITMETICOS:tipo_arit EXP_ARITMETICA_BIN:param2   {: RESULT = "(" + exp.toString() + ")" + tipo_arit.toString() + param2.toString() ; :};

/*Expresiones realcionales*/

PARAM_EXP_RELACIONAL ::=
     LITERAL_NUMERICO:lit  {:RESULT = lit; :}
    |LITERAL_FUNID: lit  {:RESULT = lit; :} 
    |EXP_ARITMETICA_UNA:lit  {:RESULT = lit; :} 
    |EXP_ARITMETICA_BIN:lit  {:
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                :};

EXP_RELACIONAL ::=
     PARAM_EXP_RELACIONAL:param1 TIPOS_RELACIONALES:tipo_rel PARAM_EXP_RELACIONAL:param2   {:
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                         if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                                            if(objectparam2.getTipo().equals("int") || objectparam2.getTipo().equals("float")){

                                                                                                            }else{
                                                                                                                String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operaci√≥n";
                                                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                                                            }
                                                                                                        }else{
                                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                                                            parser.semantic_error(param1left,param1right, mensaje); 
                                                                                                        }
                                                                                                    }else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = param1.toString() + tipo_rel.toString() + param2.toString();
                                                                                                :} 
    |PARAM_EXP_RELACIONAL:param1 TIPOS_RELACIONALES:tipo_rel EXP_RELACIONAL:param2 {:
                                                                                    literal objectparam1=(literal)param1;
                                                                                    if(!objectparam1.getTipo().equals("null")){
                                                                                        if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                        parser.semantic_error(param1left,param1right, mensaje);
                                                                                    }
                                                                                    RESULT = param1.toString() + tipo_rel.toString() + param2.toString();
                                                                                    :} 
    |Parentesis_a EXP_RELACIONAL:exp Parentesis_c {: RESULT = "(" + exp.toString() + ")"; :}
    |Parentesis_a EXP_RELACIONAL:exp Parentesis_c  TIPOS_RELACIONALES:tipo_rel  PARAM_EXP_RELACIONAL: param2  {: RESULT = "(" + exp.toString() + ")" + tipo_rel.toString() + param2.toString() ; :}
    |Parentesis_a EXP_RELACIONAL:exp Parentesis_c  TIPOS_RELACIONALES:tipo_rel  EXP_RELACIONAL: param2 {: RESULT = "(" + exp.toString() + ")" + tipo_rel.toString() + param2.toString() ; :};


/*Expresiones logicas*/

EXP_LOGICA_UNA ::=
    LITERAL_FUNID: lit  {:
                            literal objectlit1=(literal)lit;
                            String tipo= objectlit1.getTipo();
                            if(tipo.equals("null")){
                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT = objectlit1;
                         :}
    |Negacion:lit_neg LITERAL_FUNID: lit {:
                                            literal objectlit1=(literal)lit;
                                            String tipo= objectlit1.getTipo();
                                            if(!tipo.equals("null")){
                                                if(tipo.equals("bool")){
                                                    String temp= objectlit1.getTextual();
                                                    objectlit1.setTextual("!"+ temp);

                                                }else{
                                                    String mensaje = "El identificador '" + objectlit1.getTextual() + "' no permite la operacion '!'";
                                                    parser.semantic_error(lit_negleft,lit_negright, mensaje);
                                                }
                                            }else{
                                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                                parser.semantic_error(litleft,litright, mensaje);
                                            }
                                            RESULT = objectlit1;
                                            :} 
    |LITERAL_BOOLEANO:lit  {:RESULT = lit; :}
    |Negacion:lit_neg LITERAL_BOOLEANO:lit{:
                                            literal objectlit1=(literal)lit;
                                            String tipo= objectlit1.getTipo();
                                            if(!tipo.equals("null")){
                                                if(tipo.equals("bool")){
                                                    String temp= objectlit1.getTextual();
                                                    objectlit1.setTextual("!"+ temp);

                                                }else{
                                                    String mensaje = "'" + objectlit1.getTextual() + "' no permite la operacion '!'";
                                                    parser.semantic_error(lit_negleft,lit_negright, mensaje);
                                                }
                                            }
                                            else{
                                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                                parser.semantic_error(litleft,litright, mensaje);
                                            }
                                            RESULT = objectlit1;
                                            :} 
    |EXP_RELACIONAL:exp {:
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado(exp.toString());
                        litObject.setTextual(exp.toString());
                        RESULT = litObject; 
                        :}
    |Negacion EXP_RELACIONAL:exp{:
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado("!" +exp.toString());
                        litObject.setTextual("!" +exp.toString());
                        RESULT = litObject; 
                        :};
    

EXP_LOGICA ::=
    EXP_LOGICA_UNA:param1 TIPOS_LOGICOS:tipo_logico EXP_LOGICA_UNA:param2  {:
                                                                            literal objectparam1=(literal)param1;
                                                                            literal objectparam2=(literal)param2;
                                                                            if(!objectparam1.getTipo().equals("null")){
                                                                                if(!objectparam2.getTipo().equals("null")){
                                                                                     if(objectparam1.getTipo().equals("bool")){
                                                                                        if(objectparam2.getTipo().equals("bool")){

                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operaci√≥n";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                                        parser.semantic_error(param1left,param1right, mensaje); 
                                                                                    }
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                    parser.semantic_error(param2left,param2right, mensaje);
                                                                                }
                                                                            }else{
                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                parser.semantic_error(param1left,param1right, mensaje);
                                                                            }
                                                                            RESULT = param1.toString() + tipo_logico.toString() + param2.toString();
                                                                            :} 
    |EXP_LOGICA_UNA:param1 TIPOS_LOGICOS:tipo_logico EXP_LOGICA:param2 {: 
                                                                        literal objectparam1=(literal)param1;
                                                                        if(!objectparam1.getTipo().equals("null")){
                                                                            if(objectparam1.getTipo().equals("bool") ){
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                            }
                                                                        }else{
                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                        }
                                                                        RESULT = param1.toString() + tipo_logico.toString() + param2.toString();
                                                                        :} 
    |Parentesis_a EXP_LOGICA:exp Parentesis_c {: RESULT = "(" + exp.toString() + ")"; :}
    |Parentesis_a EXP_LOGICA:exp Parentesis_c TIPOS_LOGICOS:tipo_logico EXP_LOGICA_UNA:param2 {: RESULT = "(" + exp.toString() + ")" + tipo_logico.toString() + param2.toString() ; :}
    |Parentesis_a EXP_LOGICA:exp Parentesis_c TIPOS_LOGICOS:tipo_logico EXP_LOGICA:param2 {: RESULT = "(" + exp.toString() + ")" + tipo_logico.toString() + param2.toString() ; :};
   

/*Sentencia*/

SENTENCIA ::=
    DEC_VARIABLE Delimitador 
    |ASIG_VARIABLE Delimitador 
    |IF_ELSE 
    |WHILE
    |FOR 
    |DO_WHILE 
    |SWITCH 
    |FUNCION Delimitador
    |LEER Delimitador
    |ESCRIBIR Delimitador
    |error Delimitador 
    |error Llave_c; 


BLOQUE_ANIDADO::=
    SENTENCIA 
    |SENTENCIA BLOQUE_ANIDADO;

CALL_PROC_BLOQUE::=
    Llave_a {:
                parser.analis_semantico.new_block("block");
            :}
;

CALL_PROC_BLOQUE_CIERRE::=
    Llave_c {:
                parser.analis_semantico.backBlock();
            :}
;

BLOQUE ::= 
     SENTENCIA 
    |SENTENCIA BLOQUE 
    |CALL_PROC_BLOQUE BLOQUE_ANIDADO CALL_PROC_BLOQUE_CIERRE 
    |CALL_PROC_BLOQUE BLOQUE_ANIDADO CALL_PROC_BLOQUE_CIERRE BLOQUE 
    |RETORNOS_FUNCION ;



/*Estructuras de control */
CONDICION ::= 
    EXP_LOGICA|
    EXP_LOGICA_UNA:exp {:
                            literal objectparam1=(literal)exp;
                            if(!objectparam1.getTipo().equals("null")){
                                    if(!objectparam1.getTipo().equals("bool") ){
                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operaci√≥n";
                                        parser.semantic_error(expleft,expright, mensaje); 
                                    }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(expleft,expright, mensaje);
                            }
                            RESULT = objectparam1.getTextual();
                        :};

CALL_PROC_IF ::=
    Llave_a {:
                parser.analis_semantico.new_block("if");
            :};

CALL_PROC_IF_CIERRE::=
    Llave_c {:
                parser.analis_semantico.backBlock();
            :};

CALL_PROC_ELSE ::=
    Llave_a {:
                parser.analis_semantico.new_block("else");
            :};

CALL_PROC_ELSE_CIERRE::=
    Llave_c {:
                parser.analis_semantico.backBlock();
            :};


IF_ELSE::=
    If Parentesis_a CONDICION Parentesis_c CALL_PROC_IF BLOQUE CALL_PROC_IF_CIERRE | 
    If Parentesis_a CONDICION Parentesis_c CALL_PROC_IF BLOQUE CALL_PROC_IF_CIERRE Else CALL_PROC_ELSE BLOQUE CALL_PROC_ELSE_CIERRE;


CALL_PROC_WHILE ::=
    Llave_a {:
                parser.analis_semantico.new_block("while");
            :};

CALL_PROC_WHILE_CIERRE::=
    Llave_c {:
                parser.analis_semantico.backBlock();
            :};

WHILE::=
    While Parentesis_a CONDICION Parentesis_c CALL_PROC_WHILE BLOQUE CALL_PROC_WHILE_CIERRE;



CALL_PROC_DOWHILE ::=
    Llave_a {:
                parser.analis_semantico.new_block("doWhile");
            :};

CALL_PROC_DOWHILE_CIERRE::=
    Parentesis_c {:
                parser.analis_semantico.backBlock();
            :};
    

DO_WHILE ::=
    Do CALL_PROC_DOWHILE BLOQUE Llave_c While Parentesis_a CONDICION CALL_PROC_DOWHILE_CIERRE;



STATEMENT1 ::= 
    DEC_VARIABLE
    |ASIG_VARIABLE;

CALL_PROC_FOR ::=
    Llave_a {:
                parser.analis_semantico.new_block("for");
            :};

CALL_PROC_FOR_CIERRE::=
    Llave_c {:
                parser.analis_semantico.backBlock();
            :};


FOR::=
    For Parentesis_a STATEMENT1 Delimitador CONDICION Delimitador ASIG_VARIABLE Parentesis_c CALL_PROC_FOR BLOQUE CALL_PROC_FOR_CIERRE ;

PARAM_SWITCH::=
    Int |
    Float |
    String |
    Character | 
    Identificador |
    FUNCION |
    TIPO_ARREGLO;

CASE_SWITCH::=
    Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador |
    Case PARAM_SWITCH Dos_puntos Break Delimitador |
    Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador CASE_SWITCH |
    Case PARAM_SWITCH Dos_puntos  Break Delimitador CASE_SWITCH |
    Default Dos_puntos Break Delimitador|
    Default Dos_puntos BLOQUE Break Delimitador|
    Default Dos_puntos BLOQUE Break Delimitador CASE_SWITCH |
    Default Dos_puntos  Break Delimitador CASE_SWITCH   ;

SWITCH::=
    Switch Parentesis_a PARAM_SWITCH Parentesis_c Llave_a CASE_SWITCH Llave_c;



/*Agregar For y If UNARIO*/



/*Fucniones*/
TIPOS_RETORNO_FUNCION ::= 
    T_void:tipo  {:RESULT = tipo; :}  
    | TIPOS_VARIABLES: tipo  {:RESULT = tipo; :};
    

TIPOS_PARAM_FUNCION_AUX::=
    TIPOS_VARIABLES:tipo Identificador:id {:RESULT = tipo + " "+id; :} ;


TIPOS_PARAMETRO_FUNCION::=
    TIPOS_PARAM_FUNCION_AUX : param {: RESULT = param; :}
    | TIPOS_PARAM_FUNCION_AUX:param1 Coma TIPOS_PARAMETRO_FUNCION: param2 {: RESULT = param1+","+param2+ ""; :};



RETORNOS_FUNCION::=
    Return LITERAL_CADENA Delimitador |
    Return LITERAL_NUMERICO Delimitador  |
    Return Null Delimitador |
    Return EXP_ARITMETICA_BIN Delimitador |
    Return EXP_ARITMETICA_UNA Delimitador |
    Return EXP_LOGICA Delimitador |
    Return EXP_LOGICA_UNA Delimitador ;


CALL_PROC_ID_FUNC::=
    Identificador: id_func {:
                            RESULT = id_func;
                            boolean flag= parser.analis_semantico.dec_func(id_func); 
                            if(!flag){
                                String mensaje = "El identificador '" + id_func + "' ya est√° definido";
                                parser.semantic_error(id_funcleft,id_funcright, mensaje);
                                parser.analis_semantico.set_id_current_block("null");
                            }else{
                                parser.analis_semantico.set_id_current_block(id_func.toString());
                            }
                            :};


DEC_FUNCION ::=
    TIPOS_RETORNO_FUNCION:tipo_func CALL_PROC_ID_FUNC:id_func  Parentesis_a  Parentesis_c Llave_a BLOQUE Llave_c {:
                                                                                                                //setea el string del tipo a la funcion
                                                                                                                parser.analis_semantico.dec_func_aux(id_func,tipo_func); 
                                                                                                                
                                                                                                                :}


    |TIPOS_RETORNO_FUNCION:tipo_func CALL_PROC_ID_FUNC:id_func Parentesis_a TIPOS_PARAMETRO_FUNCION:parametros Parentesis_c Llave_a BLOQUE Llave_c {:
                                                                                                                //setea el string del tipo a la funcion
                                                                                                                parser.analis_semantico.dec_func_aux(id_func,tipo_func);
                                                                                                                //validar parametros
                                                                                                                String flag= parser.analis_semantico.dec_func_param(id_func,parametros); 
                                                                                                                if(!flag.equals("")){
                                                                                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                                                                                }  
                                                                                                                :}
    |error Parentesis_c 
    |error Llave_c ;


PARAMETROS_FUNCION_AUX::=
     LITERAL_NUMERICO: tipo  {:RESULT = tipo; :}
    |LITERAL_CADENA : tipo  {:RESULT = tipo; :}
    |Null: tipo  {:RESULT = tipo; :}
    |EXP_ARITMETICA_BIN : tipo  {:RESULT = tipo; :}
    |EXP_ARITMETICA_UNA: tipo  {:RESULT = tipo; :}
    |EXP_LOGICA: tipo  {:RESULT = tipo; :}
    |EXP_LOGICA_UNA: tipo  {:RESULT = tipo; :}; 

    
PARAMETROS_FUNCION ::=
     PARAMETROS_FUNCION_AUX:param {: RESULT = param; :} 
    |PARAMETROS_FUNCION_AUX:param1 Coma PARAMETROS_FUNCION:param2 {: RESULT = param1+","+param2+ ""; :};


FUNCION ::=
    Identificador:id_func Parentesis_a  Parentesis_c  {:
                                                
                                                String flag= parser.analis_semantico.func_call(id_func); 
                                                if(!flag.equals("")){
                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                }
                                                String res= id_func + "()";
                                                literal litObject =  new literal();
                                                litObject.setTipo(parser.analis_semantico.get_tipo_func(id_func.toString()));
                                                litObject.setResultado(res);
                                                litObject.setTextual(res);
                                                RESULT = litObject; 

                                                        :} 

    |Identificador:id_func Parentesis_a PARAMETROS_FUNCION:param_func Parentesis_c {:
                                                
                                                String flag= parser.analis_semantico.func_call_params(id_func,param_func);
                                                if(!flag.equals("")){
                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                }
                                                String res= id_func + "("+param_func.toString()+")";
                                                literal litObject =  new literal();
                                                litObject.setTipo(parser.analis_semantico.get_tipo_func(id_func.toString()));
                                                litObject.setResultado(res);
                                                litObject.setTextual(res);
                                                RESULT = litObject;  
                                                                                        :};

/*Funcioens del sistema*/

LEER::=
    Input Simbolo_input Identificador:id_var {:
                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                if(flag){
                                                    String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                    if(tipo_var.toString().equals("string")){
                                                        parser.analis_semantico.init_var(id_var.toString());
                                                    }
                                                    else{
                                                        String mensaje = "Imposible convertir expl√≠citamente de '" + "string" + "' a '"+tipo_var.toString()+"'";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                }else{
                                                    String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                }
                                                :};

ESCRIBIR::=
     Print Parentesis_a LITERAL_CADENA  Parentesis_c 
    |Print Parentesis_a LITERAL_NUMERICO Parentesis_c
    |Print Parentesis_a Null  Parentesis_c
    |Print Parentesis_a EXP_ARITMETICA_BIN Parentesis_c     
    |Print Parentesis_a EXP_LOGICA Parentesis_c 
    |Print Parentesis_a EXP_LOGICA_UNA Parentesis_c 
    |Print Parentesis_a EXP_ARITMETICA_UNA Parentesis_c ;
    

