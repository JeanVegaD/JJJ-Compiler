
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 06 20:47:26 CST 2020
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 06 20:47:26 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\002\011\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\042\004\000\002" +
    "\042\006\000\002\042\006\000\002\042\006\000\002\042" +
    "\006\000\002\042\006\000\002\042\006\000\002\042\006" +
    "\000\002\042\006\000\002\042\006\000\002\042\007\000" +
    "\002\042\011\000\002\042\013\000\002\043\003\000\002" +
    "\043\003\000\002\044\003\000\002\044\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\010\000\002" +
    "\045\010\000\002\045\010\000\002\045\010\000\002\047" +
    "\006\000\002\047\006\000\002\047\006\000\002\011\004" +
    "\000\002\011\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\007\000\002\013\007\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\007\000\002\015\007\000\002\016\003\000\002\016" +
    "\004\000\002\016\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\004\000\002\016\003\000\002\016\004\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\007\000\002\017\007\000\002\020\003\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\003" +
    "\000\002\020\003\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\020\004\000\002" +
    "\021\003\000\002\022\003\000\002\022\004\000\002\022" +
    "\003\000\002\023\011\000\002\023\015\000\002\024\011" +
    "\000\002\025\012\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\007\000\002\030\010\000\002\030" +
    "\007\000\002\030\010\000\002\026\011\000\002\031\003" +
    "\000\002\031\003\000\002\032\004\000\002\032\006\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\033\011" +
    "\000\002\033\012\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\005\000\002\037\005" +
    "\000\002\037\006\000\002\040\005\000\002\041\006\000" +
    "\002\041\006\000\002\041\006\000\002\041\006\000\002" +
    "\041\006\000\002\041\006\000\002\041\006\000\002\041" +
    "\006\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\016\057\012\060\006\061\015\062\014\063" +
    "\005\064\004\001\002\000\004\066\uff87\001\002\000\004" +
    "\066\uffea\001\002\000\004\066\uffed\001\002\000\016\057" +
    "\012\060\006\061\015\062\014\063\005\064\004\001\002" +
    "\000\004\066\u0113\001\002\000\004\002\u0112\001\002\000" +
    "\006\010\016\066\uffee\001\002\000\004\066\uff86\001\002" +
    "\000\004\066\uffeb\001\002\000\004\066\uffec\001\002\000" +
    "\004\020\017\001\002\000\004\021\020\001\002\000\004" +
    "\005\021\001\002\000\040\011\042\012\043\014\034\025" +
    "\040\027\046\030\052\031\044\057\022\060\006\061\015" +
    "\062\014\063\005\065\023\066\032\071\024\001\002\000" +
    "\004\066\uffee\001\002\000\004\020\u010b\001\002\000\044" +
    "\006\uff62\011\uff62\012\uff62\014\uff62\025\uff62\027\uff62\030" +
    "\uff62\031\uff62\033\uff62\057\uff62\060\uff62\061\uff62\062\uff62" +
    "\063\uff62\065\uff62\066\uff62\071\uff62\001\002\000\044\006" +
    "\uffa0\011\uffa0\012\uffa0\014\uffa0\025\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\033\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\065\uffa0\066\uffa0\071\uffa0\001\002\000\004\004\u010a" +
    "\001\002\000\044\006\uff99\011\042\012\043\014\034\025" +
    "\040\027\046\030\052\031\044\033\uff99\057\022\060\006" +
    "\061\015\062\014\063\005\065\023\066\032\071\024\001" +
    "\002\000\004\004\u0108\001\002\000\044\006\uff9e\011\uff9e" +
    "\012\uff9e\014\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\033" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\065\uff9e" +
    "\066\uff9e\071\uff9e\001\002\000\010\007\367\016\366\020" +
    "\123\001\002\000\004\006\365\001\002\000\004\020\344" +
    "\001\002\000\044\006\uffa1\011\uffa1\012\uffa1\014\uffa1\025" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\065\uffa1\066\uffa1\071\uffa1\001" +
    "\002\000\004\066\314\001\002\000\004\004\313\001\002" +
    "\000\004\020\301\001\002\000\004\004\300\001\002\000" +
    "\032\015\265\020\056\023\062\024\066\044\055\045\074" +
    "\056\071\066\064\067\266\070\256\072\263\073\260\001" +
    "\002\000\004\013\254\001\002\000\004\020\225\001\002" +
    "\000\004\004\224\001\002\000\004\005\215\001\002\000" +
    "\006\006\uff97\033\uff97\001\002\000\004\004\214\001\002" +
    "\000\044\006\uffa5\011\uffa5\012\uffa5\014\uffa5\025\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\033\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\065\uffa5\066\uffa5\071\uffa5\001\002\000" +
    "\004\020\054\001\002\000\044\006\uff9d\011\uff9d\012\uff9d" +
    "\014\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d" +
    "\071\uff9d\001\002\000\024\020\056\023\062\024\066\044" +
    "\055\045\074\056\071\066\064\072\065\073\060\001\002" +
    "\000\004\066\213\001\002\000\024\020\056\023\062\024" +
    "\066\044\055\045\074\056\071\066\064\072\065\073\060" +
    "\001\002\000\004\021\uff9a\001\002\000\044\004\uffba\021" +
    "\uffba\022\uffba\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\001\002\000\044\004\uffb9\021\uffb9" +
    "\022\uffb9\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\001\002\000\014\004\ufff0\021\ufff0\022" +
    "\ufff0\054\ufff0\055\ufff0\001\002\000\006\054\146\055\147" +
    "\001\002\000\046\004\uffb2\020\123\021\uffb2\022\uffb2\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffb2\055" +
    "\uffb2\001\002\000\044\004\uffbb\021\uffbb\022\uffbb\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\014\004\uffef\021\uffef\022\uffef\054\uffef\055" +
    "\uffef\001\002\000\014\004\uffac\021\uffac\022\uffac\054\uffac" +
    "\055\uffac\001\002\000\016\046\171\047\172\050\177\051" +
    "\176\052\173\053\174\001\002\000\022\020\161\023\062" +
    "\024\066\044\055\045\074\066\162\072\065\073\060\001" +
    "\002\000\014\004\uffae\021\uffae\022\uffae\054\uffae\055\uffae" +
    "\001\002\000\004\066\141\001\002\000\004\066\157\001" +
    "\002\000\016\036\110\037\107\040\105\041\112\042\111" +
    "\043\106\001\002\000\004\021\100\001\002\000\030\004" +
    "\uffb0\021\uffb0\022\uffb0\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\054\uffb0\055\uffb0\001\002\000\004\005" +
    "\101\001\002\000\040\011\042\012\043\014\034\025\040" +
    "\027\046\030\052\031\044\057\022\060\006\061\015\062" +
    "\014\063\005\065\023\066\032\071\024\001\002\000\004" +
    "\006\103\001\002\000\044\006\uff94\011\uff94\012\uff94\014" +
    "\uff94\025\uff94\027\uff94\030\uff94\031\uff94\033\uff94\057\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\065\uff94\066\uff94\071" +
    "\uff94\001\002\000\016\020\115\044\055\045\074\066\120" +
    "\072\116\073\114\001\002\000\016\020\ufffc\044\ufffc\045" +
    "\ufffc\066\ufffc\072\ufffc\073\ufffc\001\002\000\016\020\ufff9" +
    "\044\ufff9\045\ufff9\066\ufff9\072\ufff9\073\ufff9\001\002\000" +
    "\016\020\ufffd\044\ufffd\045\ufffd\066\ufffd\072\ufffd\073\ufffd" +
    "\001\002\000\016\020\ufffe\044\ufffe\045\ufffe\066\ufffe\072" +
    "\ufffe\073\ufffe\001\002\000\016\020\ufffa\044\ufffa\045\ufffa" +
    "\066\ufffa\072\ufffa\073\ufffa\001\002\000\016\020\ufffb\044" +
    "\ufffb\045\ufffb\066\ufffb\072\ufffb\073\ufffb\001\002\000\014" +
    "\004\uffc0\017\uffc0\021\uffc0\022\uffc0\066\uffc0\001\002\000" +
    "\030\004\uffc4\017\uffc4\021\uffc4\022\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\066\uffc4\001\002\000" +
    "\016\020\115\044\055\045\074\066\120\072\116\073\114" +
    "\001\002\000\030\004\uffc5\017\uffc5\021\uffc5\022\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\066\uffc5" +
    "\001\002\000\030\004\uffc1\017\uffc1\021\uffc1\022\uffc1\036" +
    "\110\037\107\040\105\041\112\042\111\043\106\066\uffc1" +
    "\001\002\000\032\004\uffc6\017\uffc6\020\123\021\uffc6\022" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\066\uffc6\001\002\000\030\004\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\066\uffc2\001\002\000\030\004\uffc3\017\uffc3\021\uffc3\022" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\066\uffc3\001\002\000\034\015\136\020\056\021\124\023" +
    "\062\024\066\044\055\045\074\056\071\066\064\067\137" +
    "\070\125\072\132\073\127\001\002\000\112\004\uff6d\006" +
    "\uff6d\011\uff6d\012\uff6d\014\uff6d\017\uff6d\021\uff6d\022\uff6d" +
    "\025\uff6d\027\uff6d\030\uff6d\031\uff6d\033\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\065\uff6d" +
    "\066\uff6d\071\uff6d\001\002\000\006\021\uff77\022\uff77\001" +
    "\002\000\006\021\uff71\022\uff71\001\002\000\036\021\uff75" +
    "\022\uff75\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\001\002\000\036\021\uff72\022\uff72\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\001\002\000\012\021\uff70\022" +
    "\uff70\054\146\055\147\001\002\000\036\021\uff76\022\uff76" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002" +
    "\000\006\021\uff6f\022\143\001\002\000\004\021\142\001" +
    "\002\000\010\021\uff73\022\uff73\066\141\001\002\000\006" +
    "\021\uff74\022\uff74\001\002\000\006\021\uff78\022\uff78\001" +
    "\002\000\030\004\uffb8\021\uffb8\022\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001" +
    "\002\000\004\020\123\001\002\000\112\004\uff6c\006\uff6c" +
    "\011\uff6c\012\uff6c\014\uff6c\017\uff6c\021\uff6c\022\uff6c\025" +
    "\uff6c\027\uff6c\030\uff6c\031\uff6c\033\uff6c\035\uff6c\036\uff6c" +
    "\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\065\uff6c\066" +
    "\uff6c\071\uff6c\001\002\000\032\015\136\020\056\023\062" +
    "\024\066\044\055\045\074\056\071\066\064\067\137\070" +
    "\125\072\132\073\127\001\002\000\004\021\uff6e\001\002" +
    "\000\024\020\056\023\062\024\066\044\055\045\074\056" +
    "\071\066\064\072\065\073\060\001\002\000\024\020\ufff2" +
    "\023\ufff2\024\ufff2\044\ufff2\045\ufff2\056\ufff2\066\ufff2\072" +
    "\ufff2\073\ufff2\001\002\000\024\020\ufff1\023\ufff1\024\ufff1" +
    "\044\ufff1\045\ufff1\056\ufff1\066\ufff1\072\ufff1\073\ufff1\001" +
    "\002\000\010\004\uffa9\021\uffa9\022\uffa9\001\002\000\014" +
    "\004\uffaa\021\uffaa\022\uffaa\054\146\055\147\001\002\000" +
    "\004\021\153\001\002\000\030\004\uffbf\017\uffbf\021\uffbf" +
    "\022\uffbf\036\110\037\107\040\105\041\112\042\111\043" +
    "\106\066\uffbf\001\002\000\016\020\115\044\055\045\074" +
    "\066\120\072\116\073\114\001\002\000\014\004\uffbd\017" +
    "\uffbd\021\uffbd\022\uffbd\066\uffbd\001\002\000\030\004\uffbe" +
    "\017\uffbe\021\uffbe\022\uffbe\036\110\037\107\040\105\041" +
    "\112\042\111\043\106\066\uffbe\001\002\000\050\004\uffc7" +
    "\017\uffc7\021\uffc7\022\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\066\uffc7\001\002\000" +
    "\014\004\uffab\021\uffab\022\uffab\054\uffab\055\uffab\001\002" +
    "\000\016\020\161\044\055\045\074\066\167\072\065\073" +
    "\060\001\002\000\046\004\uffb1\020\123\021\uffb1\022\uffb1" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffb1" +
    "\055\uffb1\001\002\000\030\004\uffaf\021\uffaf\022\uffaf\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\054\uffaf" +
    "\055\uffaf\001\002\000\014\004\uffad\021\uffad\022\uffad\054" +
    "\uffad\055\uffad\001\002\000\006\021\153\066\141\001\002" +
    "\000\004\021\170\001\002\000\046\004\uffbc\020\123\021" +
    "\uffbc\022\uffbc\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\001\002\000\030\004\uffb5\021\uffb5" +
    "\022\uffb5\046\171\047\172\050\177\051\176\052\173\053" +
    "\174\054\uffb5\055\uffb5\001\002\000\016\020\ufff8\044\ufff8" +
    "\045\ufff8\066\ufff8\072\ufff8\073\ufff8\001\002\000\016\020" +
    "\ufff7\044\ufff7\045\ufff7\066\ufff7\072\ufff7\073\ufff7\001\002" +
    "\000\016\020\ufff4\044\ufff4\045\ufff4\066\ufff4\072\ufff4\073" +
    "\ufff4\001\002\000\016\020\ufff3\044\ufff3\045\ufff3\066\ufff3" +
    "\072\ufff3\073\ufff3\001\002\000\016\020\161\044\055\045" +
    "\074\066\167\072\065\073\060\001\002\000\016\020\ufff5" +
    "\044\ufff5\045\ufff5\066\ufff5\072\ufff5\073\ufff5\001\002\000" +
    "\016\020\ufff6\044\ufff6\045\ufff6\066\ufff6\072\ufff6\073\ufff6" +
    "\001\002\000\014\004\uffb3\021\uffb3\022\uffb3\054\uffb3\055" +
    "\uffb3\001\002\000\030\004\uffb4\021\uffb4\022\uffb4\046\171" +
    "\047\172\050\177\051\176\052\173\053\174\054\uffb4\055" +
    "\uffb4\001\002\000\016\020\161\044\055\045\074\066\167" +
    "\072\065\073\060\001\002\000\014\004\uffb6\021\uffb6\022" +
    "\uffb6\054\uffb6\055\uffb6\001\002\000\030\004\uffb7\021\uffb7" +
    "\022\uffb7\046\171\047\172\050\177\051\176\052\173\053" +
    "\174\054\uffb7\055\uffb7\001\002\000\004\021\207\001\002" +
    "\000\010\021\170\054\uffac\055\uffac\001\002\000\014\004" +
    "\uffa8\021\uffa8\022\uffa8\054\146\055\147\001\002\000\024" +
    "\020\056\023\062\024\066\044\055\045\074\056\071\066" +
    "\064\072\065\073\060\001\002\000\010\004\uffa6\021\uffa6" +
    "\022\uffa6\001\002\000\014\004\uffa7\021\uffa7\022\uffa7\054" +
    "\146\055\147\001\002\000\050\004\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\066\uffc8\001\002\000\044\006\uffa4\011" +
    "\uffa4\012\uffa4\014\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\033\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\065" +
    "\uffa4\066\uffa4\071\uffa4\001\002\000\040\011\042\012\043" +
    "\014\034\025\040\027\046\030\052\031\044\057\022\060" +
    "\006\061\015\062\014\063\005\065\023\066\032\071\024" +
    "\001\002\000\004\006\217\001\002\000\004\030\220\001" +
    "\002\000\004\020\221\001\002\000\024\020\056\023\062" +
    "\024\066\044\055\045\074\056\071\066\064\072\065\073" +
    "\060\001\002\000\004\021\223\001\002\000\004\004\uff93" +
    "\001\002\000\044\006\uffa2\011\uffa2\012\uffa2\014\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\065\uffa2\066\uffa2\071\uffa2\001" +
    "\002\000\014\066\233\067\226\070\232\072\234\073\230" +
    "\001\002\000\006\021\uff90\035\uff90\001\002\000\006\021" +
    "\uff8d\035\uff8d\001\002\000\006\021\uff91\035\uff91\001\002" +
    "\000\004\021\235\001\002\000\006\021\uff8f\035\uff8f\001" +
    "\002\000\010\020\123\021\uff8e\035\uff8e\001\002\000\006" +
    "\021\uff92\035\uff92\001\002\000\004\005\236\001\002\000" +
    "\004\032\240\001\002\000\004\006\253\001\002\000\016" +
    "\034\241\066\233\067\226\070\232\072\234\073\230\001" +
    "\002\000\004\035\247\001\002\000\004\035\243\001\002" +
    "\000\040\011\042\012\043\014\034\025\040\027\046\030" +
    "\052\031\044\057\022\060\006\061\015\062\014\063\005" +
    "\065\023\066\032\071\024\001\002\000\004\033\245\001" +
    "\002\000\006\006\uff8c\032\240\001\002\000\004\006\uff8b" +
    "\001\002\000\040\011\042\012\043\014\034\025\040\027" +
    "\046\030\052\031\044\057\022\060\006\061\015\062\014" +
    "\063\005\065\023\066\032\071\024\001\002\000\004\033" +
    "\251\001\002\000\006\006\uff8a\032\240\001\002\000\004" +
    "\006\uff89\001\002\000\044\006\uff88\011\uff88\012\uff88\014" +
    "\uff88\025\uff88\027\uff88\030\uff88\031\uff88\033\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\065\uff88\066\uff88\071" +
    "\uff88\001\002\000\004\066\255\001\002\000\004\004\uff6b" +
    "\001\002\000\004\004\277\001\002\000\004\004\276\001" +
    "\002\000\034\004\275\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\001\002\000\034\004\274\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000\010\004\273" +
    "\054\146\055\147\001\002\000\034\004\272\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000\006\004" +
    "\271\066\141\001\002\000\004\004\270\001\002\000\004" +
    "\004\267\001\002\000\006\006\uff83\033\uff83\001\002\000" +
    "\006\006\uff7f\033\uff7f\001\002\000\006\006\uff7e\033\uff7e" +
    "\001\002\000\006\006\uff81\033\uff81\001\002\000\006\006" +
    "\uff7b\033\uff7b\001\002\000\006\006\uff7d\033\uff7d\001\002" +
    "\000\006\006\uff80\033\uff80\001\002\000\006\006\uff7c\033" +
    "\uff7c\001\002\000\006\006\uff82\033\uff82\001\002\000\044" +
    "\006\uff9b\011\uff9b\012\uff9b\014\uff9b\025\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\033\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\065\uff9b\066\uff9b\071\uff9b\001\002\000\024\020" +
    "\056\023\062\024\066\044\055\045\074\056\071\066\064" +
    "\072\065\073\060\001\002\000\004\021\303\001\002\000" +
    "\004\005\304\001\002\000\040\011\042\012\043\014\034" +
    "\025\040\027\046\030\052\031\044\057\022\060\006\061" +
    "\015\062\014\063\005\065\023\066\032\071\024\001\002" +
    "\000\004\006\306\001\002\000\046\006\uff96\011\uff96\012" +
    "\uff96\014\uff96\025\uff96\026\307\027\uff96\030\uff96\031\uff96" +
    "\033\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\065" +
    "\uff96\066\uff96\071\uff96\001\002\000\004\005\310\001\002" +
    "\000\040\011\042\012\043\014\034\025\040\027\046\030" +
    "\052\031\044\057\022\060\006\061\015\062\014\063\005" +
    "\065\023\066\032\071\024\001\002\000\004\006\312\001" +
    "\002\000\044\006\uff95\011\uff95\012\uff95\014\uff95\025\uff95" +
    "\027\uff95\030\uff95\031\uff95\033\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\065\uff95\066\uff95\071\uff95\001\002" +
    "\000\044\006\uff9f\011\uff9f\012\uff9f\014\uff9f\025\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\033\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\065\uff9f\066\uff9f\071\uff9f\001\002\000" +
    "\010\004\uffe9\007\316\016\315\001\002\000\004\072\330" +
    "\001\002\000\032\015\326\020\056\023\062\024\066\044" +
    "\055\045\074\056\071\066\064\067\327\070\317\072\324" +
    "\073\321\001\002\000\004\004\uffe7\001\002\000\004\004" +
    "\uffe0\001\002\000\034\004\uffe5\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\001\002\000\034\004\uffe2\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000\010" +
    "\004\uffe1\054\146\055\147\001\002\000\034\004\uffe6\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000" +
    "\006\004\uffe3\066\141\001\002\000\004\004\uffe4\001\002" +
    "\000\004\004\uffe8\001\002\000\004\017\331\001\002\000" +
    "\006\004\uffdf\007\332\001\002\000\006\015\334\016\333" +
    "\001\002\000\016\020\115\044\055\045\074\066\120\072" +
    "\337\073\114\001\002\000\004\004\uffde\001\002\000\006" +
    "\017\uffdb\022\uffdb\001\002\000\004\017\343\001\002\000" +
    "\022\017\uffdc\022\uffdc\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\001\002\000\006\017\uffda\022\341\001" +
    "\002\000\016\020\115\044\055\045\074\066\120\072\337" +
    "\073\114\001\002\000\004\017\uffd9\001\002\000\004\004" +
    "\uffdd\001\002\000\032\015\353\020\056\023\062\024\066" +
    "\044\055\045\074\056\071\066\064\067\354\070\345\072" +
    "\351\073\347\001\002\000\004\021\364\001\002\000\004" +
    "\021\363\001\002\000\034\021\362\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\001\002\000\034\021\361\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000" +
    "\034\021\360\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\001\002\000\006\021\357\066\141\001\002\000\004" +
    "\021\356\001\002\000\004\021\355\001\002\000\004\004" +
    "\uff6a\001\002\000\004\004\uff66\001\002\000\004\004\uff65" +
    "\001\002\000\004\004\uff68\001\002\000\004\004\uff63\001" +
    "\002\000\004\004\uff67\001\002\000\004\004\uff64\001\002" +
    "\000\004\004\uff69\001\002\000\004\002\000\001\002\000" +
    "\004\072\u0101\001\002\000\032\015\377\020\056\023\062" +
    "\024\066\044\055\045\074\056\071\066\064\067\u0100\070" +
    "\370\072\375\073\372\001\002\000\004\004\uffd7\001\002" +
    "\000\004\004\uffd0\001\002\000\034\004\uffd5\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\001\002\000\034\004" +
    "\uffd2\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\010\004\uffd1\054\146\055\147\001\002\000\034" +
    "\004\uffd6\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\001\002\000\006\004\uffd3\066\141\001\002\000\004\004" +
    "\uffd4\001\002\000\004\004\uffd8\001\002\000\004\017\u0102" +
    "\001\002\000\004\007\u0103\001\002\000\016\020\115\044" +
    "\055\045\074\066\120\072\u0105\073\114\001\002\000\004" +
    "\004\uffcd\001\002\000\020\004\uffcf\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002\000\020\004\uffce" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\001" +
    "\002\000\020\004\uffcc\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\001\002\000\044\006\uffa3\011\uffa3\012" +
    "\uffa3\014\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\065\uffa3\066" +
    "\uffa3\071\uffa3\001\002\000\006\006\uff98\033\uff98\001\002" +
    "\000\044\006\uff9c\011\uff9c\012\uff9c\014\uff9c\025\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\033\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\065\uff9c\066\uff9c\071\uff9c\001\002\000" +
    "\006\066\u010e\067\u010c\001\002\000\004\021\u0111\001\002" +
    "\000\004\021\u0110\001\002\000\006\020\123\021\u010f\001" +
    "\002\000\004\004\uffc9\001\002\000\004\004\uffca\001\002" +
    "\000\004\004\uffcb\001\002\000\004\002\001\001\002\000" +
    "\004\020\u0114\001\002\000\016\021\u0117\057\022\060\006" +
    "\061\015\062\014\063\005\001\002\000\004\021\u011e\001" +
    "\002\000\004\066\u011b\001\002\000\004\005\u0118\001\002" +
    "\000\040\011\042\012\043\014\034\025\040\027\046\030" +
    "\052\031\044\057\022\060\006\061\015\062\014\063\005" +
    "\065\023\066\032\071\024\001\002\000\004\006\u011a\001" +
    "\002\000\016\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a" +
    "\064\uff7a\001\002\000\006\021\uff85\022\u011c\001\002\000" +
    "\014\057\022\060\006\061\015\062\014\063\005\001\002" +
    "\000\004\021\uff84\001\002\000\004\005\u011f\001\002\000" +
    "\040\011\042\012\043\014\034\025\040\027\046\030\052" +
    "\031\044\057\022\060\006\061\015\062\014\063\005\065" +
    "\023\066\032\071\024\001\002\000\004\006\u0121\001\002" +
    "\000\016\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064" +
    "\uff79\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\012\002\010\007\012\031\007\033\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\u0121\007\012\031\007\033\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\035" +
    "\020\026\022\032\023\034\024\024\025\036\026\030\034" +
    "\046\037\052\040\025\041\040\042\047\045\027\046\050" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\007\035\020\026\022\u0108\023\034\024\024\025\036\026" +
    "\030\034\046\037\052\040\025\041\040\042\047\045\027" +
    "\046\050\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\071\011\260" +
    "\012\074\013\263\014\067\015\066\016\261\017\256\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\071\011\060\012\074\013\072\014\067\015" +
    "\066\016\062\017\056\021\075\037\076\001\001\000\002" +
    "\001\001\000\024\006\071\011\060\012\074\013\164\014" +
    "\067\015\205\016\062\017\204\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\201\001\001\000\020\006\163\011\060\012\074\013\072" +
    "\014\067\015\157\037\162\001\001\000\002\001\001\000" +
    "\004\037\137\001\001\000\002\001\001\000\004\003\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\035\020\026\022\101\023\034\024\024" +
    "\025\036\026\030\034\046\037\052\040\025\041\040\042" +
    "\047\045\027\046\050\047\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\121\012\116\013\112\037" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\121" +
    "\012\074\013\151\037\120\001\001\000\002\001\001\000" +
    "\004\003\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\071\011\127\012\074\013" +
    "\134\014\067\015\066\016\130\017\125\035\132\036\133" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\071\011\127\012\074\013\134" +
    "\014\067\015\066\016\130\017\125\035\132\036\143\037" +
    "\076\001\001\000\002\001\001\000\024\006\071\011\060" +
    "\012\074\013\072\014\067\015\066\016\150\017\147\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\144\001\001\000\002\001\001\000" +
    "\004\003\153\001\001\000\012\011\121\012\155\013\154" +
    "\037\120\001\001\000\002\001\001\000\004\003\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\060" +
    "\012\074\013\164\014\067\015\165\037\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\060\012" +
    "\074\013\072\014\200\015\177\037\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\201\001\001\000\016\011\060\012\074\013\072\014\203" +
    "\015\202\037\120\001\001\000\002\001\001\000\004\004" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\207\001\001\000\024\006\071\011\060\012\074\013" +
    "\072\014\067\015\066\016\211\017\210\037\076\001\001" +
    "\000\002\001\001\000\004\005\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\035\020\026\022\215" +
    "\023\034\024\024\025\036\026\030\034\046\037\052\040" +
    "\025\041\040\042\047\045\027\046\050\047\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\071\011\060\012\074\013\072\014\067\015\066" +
    "\016\062\017\056\021\221\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\230" +
    "\037\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\236\001\001\000\002\001\001\000\006\027\241\037\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\035\020\026\022\243\023\034\024\024\025\036\026\030" +
    "\034\046\037\052\040\025\041\040\042\047\045\027\046" +
    "\050\047\044\001\001\000\002\001\001\000\004\030\245" +
    "\001\001\000\002\001\001\000\040\007\035\020\026\022" +
    "\247\023\034\024\024\025\036\026\030\034\046\037\052" +
    "\040\025\041\040\042\047\045\027\046\050\047\044\001" +
    "\001\000\002\001\001\000\004\030\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\144\001\001\000\002\001" +
    "\001\000\004\037\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\071\011\060\012\074\013\072" +
    "\014\067\015\066\016\062\017\056\021\301\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\035" +
    "\020\026\022\304\023\034\024\024\025\036\026\030\034" +
    "\046\037\052\040\025\041\040\042\047\045\027\046\050" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\007\035\020\026\022\310\023\034" +
    "\024\024\025\036\026\030\034\046\037\052\040\025\041" +
    "\040\042\047\045\027\046\050\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\071\011\321\012\074" +
    "\013\324\014\067\015\066\016\322\017\317\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\144\001\001\000\002\001" +
    "\001\000\004\037\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\121\012\074\013\334\037\120\043\337" +
    "\044\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\121\012\074\013\334\037\120\043\337\044\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\071" +
    "\011\347\012\074\013\351\014\067\015\066\016\062\017" +
    "\345\037\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\071\011\372\012\074\013\375\014\067" +
    "\015\066\016\373\017\370\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\144\001\001\000\002\001\001\000\004\037" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\u0106\012\074\013" +
    "\u0103\037\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\u0115\032\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\035\020\026\022\u0118\023\034\024\024\025" +
    "\036\026\030\034\046\037\052\040\025\041\040\042\047" +
    "\045\027\046\050\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u0115\032\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\035\020\026\022\u011f\023\034\024\024\025\036\026\030" +
    "\034\046\037\052\040\025\041\040\042\047\045\027\046" +
    "\050\047\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + (s.right+1)
        + " column " + (s.left+1));
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // COMENTARIO ::= Comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ESCRIBIR ::= Print Parentesis_a Null Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ESCRIBIR ::= Print Parentesis_a Float Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ESCRIBIR ::= Print Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ESCRIBIR ::= Print Parentesis_a Character Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ESCRIBIR ::= Print Parentesis_a String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LEER ::= Input Simbolo_input Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FUNCION ::= Identificador Parentesis_a PARAMETROS_FUNCION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX Coma PARAMETROS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMETROS_FUNCION_AUX ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETROS_FUNCION_AUX ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMETROS_FUNCION_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMETROS_FUNCION_AUX ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMETROS_FUNCION_AUX ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION Identificador Parentesis_a TIPOS_PARAMETRO_FUNCION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION Identificador Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RETORNOS_FUNCION ::= Return EXP_LOGICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // RETORNOS_FUNCION ::= Return EXP_LOGICA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_BIN Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // RETORNOS_FUNCION ::= Return Null Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // RETORNOS_FUNCION ::= Return Float Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // RETORNOS_FUNCION ::= Return Int Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // RETORNOS_FUNCION ::= Return Character Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RETORNOS_FUNCION ::= Return String Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_VARIABLES Identificador Coma TIPOS_PARAMETRO_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIPOS_RETORNO_FUNCION ::= TIPOS_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPOS_RETORNO_FUNCION ::= T_void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SWITCH ::= Switch Parentesis_a PARAM_SWITCH Parentesis_c Llave_a CASE_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE_SWITCH ::= Case Default Dos_puntos BLOQUE Break CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE_SWITCH ::= Case Default Dos_puntos BLOQUE Break 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAM_SWITCH ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAM_SWITCH ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAM_SWITCH ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAM_SWITCH ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAM_SWITCH ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAM_SWITCH ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DO_WHILE ::= Do Llave_a BLOQUE Llave_c While Parentesis_a CONDICION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // WHILE ::= While Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c Else Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BLOQUE ::= RETORNOS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BLOQUE ::= SENTENCIA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA ::= ESCRIBIR Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= LEER Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= DO_WHILE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA ::= CAST_STRING_INT Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA ::= ASIG_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA ::= DEC_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_LOGICA_UNA ::= Negacion EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP_LOGICA_UNA ::= EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP_LOGICA_UNA ::= Negacion VARIABLES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP_LOGICA_UNA ::= VARIABLES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP_LOGICA_UNA ::= Negacion FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP_LOGICA_UNA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_LOGICA_UNA ::= Negacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP_LOGICA_UNA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_BIN FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAM_EXP_RELACIONAL ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAM_EXP_RELACIONAL ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAM_EXP_RELACIONAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAM_EXP_ARITMETICA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAM_EXP_ARITMETICA ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAM_EXP_ARITMETICA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAM_EXP_ARITMETICA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAM_EXP_ARITMETICA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP_ARITMETICA_UNA ::= Unario_negatico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP_ARITMETICA_UNA ::= Unario_positivo Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CAST_STRING_INT ::= String_to_int Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CAST_STRING_INT ::= String_to_int Parentesis_a FUNCION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CAST_STRING_INT ::= String_to_int Parentesis_a String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIG_VARIABLE ::= Identificador Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIG_VARIABLE ::= Identificador Asignacion Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIG_VARIABLE ::= Identificador Asignacion Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIG_VARIABLE ::= Identificador Asignacion Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIG_VARIABLE ::= Identificador Asignacion String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX Coma PARAMETROS_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS_ARREGLO_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS_ARREGLO_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Int Corchete_c Asignacion Corchete_a PARAMETROS_ARREGLO Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Int Corchete_c Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Int Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOS_VARIABLES ::= T_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_VARIABLES ::= T_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_VARIABLES ::= T_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_VARIABLES ::= T_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= T_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLES_LOGICAS ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_LOGICAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES_LOGICAS ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_LOGICAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_LOGICOS ::= Disyuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_LOGICOS ::= Conjuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_RELACIONALES ::= Mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_RELACIONALES ::= Menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_RELACIONALES ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS_RELACIONALES ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS_RELACIONALES ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS_ARITMETICOS ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPOS_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPOS_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPOS_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPOS_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DEC_FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_int Main Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

