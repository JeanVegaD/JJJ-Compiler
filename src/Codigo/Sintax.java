
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 06 22:55:58 CST 2020
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 06 22:55:58 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\011\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\044" +
    "\004\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\006\000" +
    "\002\044\006\000\002\044\006\000\002\044\006\000\002" +
    "\044\007\000\002\044\011\000\002\044\013\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\046\003" +
    "\000\002\046\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\010\000\002\047\010\000\002\047\010" +
    "\000\002\047\010\000\002\051\006\000\002\051\006\000" +
    "\002\051\006\000\002\012\004\000\002\012\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\007\000" +
    "\002\014\007\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\007\000\002\016\007\000\002\017\003\000" +
    "\002\017\004\000\002\017\003\000\002\017\004\000\002" +
    "\017\003\000\002\017\004\000\002\017\003\000\002\017" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\007\000\002\020\007\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\004\000\002\021\004\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\004\000" +
    "\002\023\003\000\002\024\011\000\002\024\015\000\002" +
    "\025\011\000\002\026\012\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\010\000" +
    "\002\031\007\000\002\031\011\000\002\031\010\000\002" +
    "\031\006\000\002\031\007\000\002\031\010\000\002\031" +
    "\007\000\002\027\011\000\002\032\003\000\002\032\003" +
    "\000\002\033\004\000\002\033\006\000\002\034\003\000" +
    "\002\034\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\035\011\000\002\035\012\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\005\000\002\041\005\000\002\041\006\000" +
    "\002\042\005\000\002\043\006\000\002\043\006\000\002" +
    "\043\006\000\002\043\006\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\006" +
    "\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\016\057\012\060\006\061\015\062\014\063" +
    "\005\064\004\001\002\000\004\066\uff7b\001\002\000\004" +
    "\066\uffea\001\002\000\004\066\uffed\001\002\000\016\057" +
    "\012\060\006\061\015\062\014\063\005\064\004\001\002" +
    "\000\004\066\u0128\001\002\000\004\002\u0127\001\002\000" +
    "\006\010\016\066\uffee\001\002\000\004\066\uff7a\001\002" +
    "\000\004\066\uffeb\001\002\000\004\066\uffec\001\002\000" +
    "\004\020\017\001\002\000\004\021\020\001\002\000\004" +
    "\005\021\001\002\000\036\011\041\012\042\014\034\025" +
    "\037\027\045\030\050\031\043\057\022\060\006\061\015" +
    "\062\014\063\005\065\023\066\031\001\002\000\004\066" +
    "\uffee\001\002\000\004\020\u0120\001\002\000\042\006\uff9a" +
    "\011\uff9a\012\uff9a\014\uff9a\025\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\033\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\065\uff9a\066\uff9a\001\002\000\004\004\u011f\001\002\000" +
    "\042\006\uff92\011\041\012\042\014\034\025\037\027\045" +
    "\030\050\031\043\033\uff92\057\022\060\006\061\015\062" +
    "\014\063\005\065\023\066\031\001\002\000\004\004\u011d" +
    "\001\002\000\042\006\uff98\011\uff98\012\uff98\014\uff98\025" +
    "\uff98\027\uff98\030\uff98\031\uff98\033\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\065\uff98\066\uff98\001\002\000" +
    "\010\007\u010c\016\u010b\020\123\001\002\000\004\006\u010a" +
    "\001\002\000\042\006\uff9b\011\uff9b\012\uff9b\014\uff9b\025" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\065\uff9b\066\uff9b\001\002\000" +
    "\004\020\365\001\002\000\004\066\337\001\002\000\042" +
    "\006\uff99\011\uff99\012\uff99\014\uff99\025\uff99\027\uff99\030" +
    "\uff99\031\uff99\033\uff99\057\uff99\060\uff99\061\uff99\062\uff99" +
    "\063\uff99\065\uff99\066\uff99\001\002\000\004\020\325\001" +
    "\002\000\004\004\324\001\002\000\032\015\311\020\054" +
    "\023\061\024\065\044\053\045\073\056\070\066\063\067" +
    "\312\070\302\072\307\073\304\001\002\000\004\013\300" +
    "\001\002\000\004\020\240\001\002\000\004\004\237\001" +
    "\002\000\004\005\230\001\002\000\006\006\uff90\033\uff90" +
    "\001\002\000\004\004\227\001\002\000\004\020\052\001" +
    "\002\000\042\006\uff97\011\uff97\012\uff97\014\uff97\025\uff97" +
    "\027\uff97\030\uff97\031\uff97\033\uff97\057\uff97\060\uff97\061" +
    "\uff97\062\uff97\063\uff97\065\uff97\066\uff97\001\002\000\024" +
    "\020\054\023\061\024\065\044\053\045\073\056\070\066" +
    "\063\072\064\073\057\001\002\000\004\066\226\001\002" +
    "\000\024\020\054\023\061\024\065\044\053\045\073\056" +
    "\070\066\063\072\064\073\057\001\002\000\044\004\uffb1" +
    "\021\uffb1\022\uffb1\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\001\002\000\004\021\uff94\001" +
    "\002\000\044\004\uffb4\021\uffb4\022\uffb4\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\001\002" +
    "\000\044\004\uffb3\021\uffb3\022\uffb3\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\001\002\000" +
    "\014\004\ufff0\021\ufff0\022\ufff0\054\ufff0\055\ufff0\001\002" +
    "\000\010\021\uff93\054\160\055\161\001\002\000\050\004" +
    "\uffab\016\124\020\123\021\uffab\022\uffab\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffab\055\uffab\001\002" +
    "\000\044\004\uffb5\021\uffb5\022\uffb5\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002\000" +
    "\014\004\uffef\021\uffef\022\uffef\054\uffef\055\uffef\001\002" +
    "\000\014\004\uffa5\021\uffa5\022\uffa5\054\uffa5\055\uffa5\001" +
    "\002\000\016\046\203\047\204\050\211\051\210\052\205" +
    "\053\207\001\002\000\022\020\173\023\061\024\065\044" +
    "\053\045\073\066\174\072\064\073\057\001\002\000\014" +
    "\004\uffa7\021\uffa7\022\uffa7\054\uffa7\055\uffa7\001\002\000" +
    "\004\066\153\001\002\000\004\066\171\001\002\000\016" +
    "\036\107\037\106\040\103\041\111\042\110\043\105\001" +
    "\002\000\004\021\077\001\002\000\030\004\uffa9\021\uffa9" +
    "\022\uffa9\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\054\uffa9\055\uffa9\001\002\000\004\005\100\001\002" +
    "\000\036\011\041\012\042\014\034\025\037\027\045\030" +
    "\050\031\043\057\022\060\006\061\015\062\014\063\005" +
    "\065\023\066\031\001\002\000\004\006\102\001\002\000" +
    "\042\006\uff8d\011\uff8d\012\uff8d\014\uff8d\025\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\033\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\065\uff8d\066\uff8d\001\002\000\016\020\ufffc" +
    "\044\ufffc\045\ufffc\066\ufffc\072\ufffc\073\ufffc\001\002\000" +
    "\016\020\115\044\053\045\073\066\120\072\116\073\113" +
    "\001\002\000\016\020\ufff9\044\ufff9\045\ufff9\066\ufff9\072" +
    "\ufff9\073\ufff9\001\002\000\016\020\ufffd\044\ufffd\045\ufffd" +
    "\066\ufffd\072\ufffd\073\ufffd\001\002\000\016\020\ufffe\044" +
    "\ufffe\045\ufffe\066\ufffe\072\ufffe\073\ufffe\001\002\000\016" +
    "\020\ufffa\044\ufffa\045\ufffa\066\ufffa\072\ufffa\073\ufffa\001" +
    "\002\000\016\020\ufffb\044\ufffb\045\ufffb\066\ufffb\072\ufffb" +
    "\073\ufffb\001\002\000\014\004\uffba\017\uffba\021\uffba\022" +
    "\uffba\066\uffba\001\002\000\030\004\uffbf\017\uffbf\021\uffbf" +
    "\022\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\066\uffbf\001\002\000\030\004\uffbc\017\uffbc\021\uffbc" +
    "\022\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\066\uffbc\001\002\000\016\020\115\044\053\045\073" +
    "\066\120\072\116\073\113\001\002\000\030\004\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\066\uffc0\001\002\000\030\004\uffbb\017" +
    "\uffbb\021\uffbb\022\uffbb\036\107\037\106\040\103\041\111" +
    "\042\110\043\105\066\uffbb\001\002\000\034\004\uffc1\016" +
    "\124\017\uffc1\020\123\021\uffc1\022\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\066\uffc1\001\002\000" +
    "\030\004\uffbd\017\uffbd\021\uffbd\022\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\066\uffbd\001\002\000" +
    "\030\004\uffbe\017\uffbe\021\uffbe\022\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\066\uffbe\001\002\000" +
    "\034\015\150\020\054\021\135\023\061\024\065\044\053" +
    "\045\073\056\070\066\063\067\151\070\137\072\144\073" +
    "\141\001\002\000\006\066\127\072\130\001\002\000\004" +
    "\017\134\001\002\000\004\017\133\001\002\000\010\016" +
    "\124\017\132\020\123\001\002\000\004\017\131\001\002" +
    "\000\052\004\uffe9\017\uffe9\021\uffe9\022\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\066\uffe9\001\002\000\052\004\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\066\uffe7\001\002\000\052\004" +
    "\uffe8\017\uffe8\021\uffe8\022\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\066\uffe8" +
    "\001\002\000\052\004\uffe6\017\uffe6\021\uffe6\022\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\066\uffe6\001\002\000\110\004\uff5e\006\uff5e" +
    "\011\uff5e\012\uff5e\014\uff5e\017\uff5e\021\uff5e\022\uff5e\025" +
    "\uff5e\027\uff5e\030\uff5e\031\uff5e\033\uff5e\035\uff5e\036\uff5e" +
    "\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e" +
    "\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\065\uff5e\066" +
    "\uff5e\001\002\000\036\021\uff66\022\uff66\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\006\021\uff69" +
    "\022\uff69\001\002\000\006\021\uff62\022\uff62\001\002\000" +
    "\036\021\uff67\022\uff67\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\001\002\000\036\021\uff63\022\uff63\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\012" +
    "\021\uff61\022\uff61\054\160\055\161\001\002\000\036\021" +
    "\uff68\022\uff68\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\001\002\000\006\021\uff60\022\155\001\002\000\004" +
    "\021\154\001\002\000\010\021\uff64\022\uff64\066\153\001" +
    "\002\000\006\021\uff65\022\uff65\001\002\000\006\021\uff6a" +
    "\022\uff6a\001\002\000\030\004\uffb2\021\uffb2\022\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\001\002\000\004\020\123\001\002\000\110\004" +
    "\uff5d\006\uff5d\011\uff5d\012\uff5d\014\uff5d\017\uff5d\021\uff5d" +
    "\022\uff5d\025\uff5d\027\uff5d\030\uff5d\031\uff5d\033\uff5d\035" +
    "\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054" +
    "\uff5d\055\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d" +
    "\065\uff5d\066\uff5d\001\002\000\032\015\150\020\054\023" +
    "\061\024\065\044\053\045\073\056\070\066\063\067\151" +
    "\070\137\072\144\073\141\001\002\000\004\021\uff5f\001" +
    "\002\000\024\020\054\023\061\024\065\044\053\045\073" +
    "\056\070\066\063\072\064\073\057\001\002\000\024\020" +
    "\ufff2\023\ufff2\024\ufff2\044\ufff2\045\ufff2\056\ufff2\066\ufff2" +
    "\072\ufff2\073\ufff2\001\002\000\024\020\ufff1\023\ufff1\024" +
    "\ufff1\044\ufff1\045\ufff1\056\ufff1\066\ufff1\072\ufff1\073\ufff1" +
    "\001\002\000\010\004\uffa2\021\uffa2\022\uffa2\001\002\000" +
    "\014\004\uffa3\021\uffa3\022\uffa3\054\160\055\161\001\002" +
    "\000\004\021\165\001\002\000\030\004\uffb9\017\uffb9\021" +
    "\uffb9\022\uffb9\036\107\037\106\040\103\041\111\042\110" +
    "\043\105\066\uffb9\001\002\000\016\020\115\044\053\045" +
    "\073\066\120\072\116\073\113\001\002\000\014\004\uffb7" +
    "\017\uffb7\021\uffb7\022\uffb7\066\uffb7\001\002\000\030\004" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\036\107\037\106\040\103" +
    "\041\111\042\110\043\105\066\uffb8\001\002\000\050\004" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\066\uffc2\001\002" +
    "\000\014\004\uffa4\021\uffa4\022\uffa4\054\uffa4\055\uffa4\001" +
    "\002\000\016\020\173\044\053\045\073\066\201\072\064" +
    "\073\057\001\002\000\050\004\uffaa\016\124\020\123\021" +
    "\uffaa\022\uffaa\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffaa\055\uffaa\001\002\000\030\004\uffa8\021\uffa8" +
    "\022\uffa8\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\054\uffa8\055\uffa8\001\002\000\014\004\uffa6\021\uffa6" +
    "\022\uffa6\054\uffa6\055\uffa6\001\002\000\006\021\165\066" +
    "\153\001\002\000\004\021\202\001\002\000\050\004\uffb6" +
    "\016\124\020\123\021\uffb6\022\uffb6\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000" +
    "\030\004\uffae\021\uffae\022\uffae\046\203\047\204\050\211" +
    "\051\210\052\205\053\207\054\uffae\055\uffae\001\002\000" +
    "\016\020\ufff8\044\ufff8\045\ufff8\066\ufff8\072\ufff8\073\ufff8" +
    "\001\002\000\016\020\ufff7\044\ufff7\045\ufff7\066\ufff7\072" +
    "\ufff7\073\ufff7\001\002\000\016\020\ufff4\044\ufff4\045\ufff4" +
    "\066\ufff4\072\ufff4\073\ufff4\001\002\000\016\020\173\044" +
    "\053\045\073\066\201\072\064\073\057\001\002\000\016" +
    "\020\ufff3\044\ufff3\045\ufff3\066\ufff3\072\ufff3\073\ufff3\001" +
    "\002\000\016\020\ufff5\044\ufff5\045\ufff5\066\ufff5\072\ufff5" +
    "\073\ufff5\001\002\000\016\020\ufff6\044\ufff6\045\ufff6\066" +
    "\ufff6\072\ufff6\073\ufff6\001\002\000\014\004\uffac\021\uffac" +
    "\022\uffac\054\uffac\055\uffac\001\002\000\030\004\uffad\021" +
    "\uffad\022\uffad\046\203\047\204\050\211\051\210\052\205" +
    "\053\207\054\uffad\055\uffad\001\002\000\016\020\173\044" +
    "\053\045\073\066\201\072\064\073\057\001\002\000\014" +
    "\004\uffaf\021\uffaf\022\uffaf\054\uffaf\055\uffaf\001\002\000" +
    "\030\004\uffb0\021\uffb0\022\uffb0\046\203\047\204\050\211" +
    "\051\210\052\205\053\207\054\uffb0\055\uffb0\001\002\000" +
    "\004\021\222\001\002\000\006\054\160\055\161\001\002" +
    "\000\010\021\202\054\uffa5\055\uffa5\001\002\000\014\004" +
    "\uffa1\021\uffa1\022\uffa1\054\160\055\161\001\002\000\024" +
    "\020\054\023\061\024\065\044\053\045\073\056\070\066" +
    "\063\072\064\073\057\001\002\000\010\004\uff9f\021\uff9f" +
    "\022\uff9f\001\002\000\014\004\uffa0\021\uffa0\022\uffa0\054" +
    "\160\055\161\001\002\000\050\004\uffc3\017\uffc3\021\uffc3" +
    "\022\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\066\uffc3\001\002\000\042\006\uff9e\011" +
    "\uff9e\012\uff9e\014\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\033\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\065" +
    "\uff9e\066\uff9e\001\002\000\036\011\041\012\042\014\034" +
    "\025\037\027\045\030\050\031\043\057\022\060\006\061" +
    "\015\062\014\063\005\065\023\066\031\001\002\000\004" +
    "\006\232\001\002\000\004\030\233\001\002\000\004\020" +
    "\234\001\002\000\024\020\054\023\061\024\065\044\053" +
    "\045\073\056\070\066\063\072\064\073\057\001\002\000" +
    "\004\021\236\001\002\000\042\006\uff8c\011\uff8c\012\uff8c" +
    "\014\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\065\uff8c\066\uff8c" +
    "\001\002\000\042\006\uff9c\011\uff9c\012\uff9c\014\uff9c\025" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\065\uff9c\066\uff9c\001\002\000" +
    "\014\066\247\067\241\070\245\072\250\073\243\001\002" +
    "\000\006\021\uff89\035\uff89\001\002\000\006\021\uff85\035" +
    "\uff85\001\002\000\006\021\uff8a\035\uff8a\001\002\000\006" +
    "\021\uff86\035\uff86\001\002\000\006\021\uff88\035\uff88\001" +
    "\002\000\004\021\251\001\002\000\012\016\124\020\123" +
    "\021\uff87\035\uff87\001\002\000\006\021\uff8b\035\uff8b\001" +
    "\002\000\004\005\252\001\002\000\006\032\254\034\255" +
    "\001\002\000\004\006\277\001\002\000\014\066\247\067" +
    "\241\070\245\072\250\073\243\001\002\000\004\035\256" +
    "\001\002\000\040\011\041\012\042\014\034\025\037\027" +
    "\045\030\050\031\043\033\257\057\022\060\006\061\015" +
    "\062\014\063\005\065\023\066\031\001\002\000\004\004" +
    "\264\001\002\000\004\033\261\001\002\000\004\004\262" +
    "\001\002\000\010\006\uff7f\032\254\034\255\001\002\000" +
    "\004\006\uff7e\001\002\000\010\006\uff80\032\254\034\255" +
    "\001\002\000\004\006\uff7d\001\002\000\004\035\267\001" +
    "\002\000\040\011\041\012\042\014\034\025\037\027\045" +
    "\030\050\031\043\033\270\057\022\060\006\061\015\062" +
    "\014\063\005\065\023\066\031\001\002\000\004\004\275" +
    "\001\002\000\004\033\272\001\002\000\004\004\273\001" +
    "\002\000\010\006\uff84\032\254\034\255\001\002\000\004" +
    "\006\uff82\001\002\000\010\006\uff83\032\254\034\255\001" +
    "\002\000\004\006\uff81\001\002\000\042\006\uff7c\011\uff7c" +
    "\012\uff7c\014\uff7c\025\uff7c\027\uff7c\030\uff7c\031\uff7c\033" +
    "\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\065\uff7c" +
    "\066\uff7c\001\002\000\004\066\301\001\002\000\004\004" +
    "\uff5c\001\002\000\004\004\323\001\002\000\004\004\322" +
    "\001\002\000\034\004\321\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\001\002\000\034\004\320\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\010\004" +
    "\317\054\160\055\161\001\002\000\034\004\316\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\006" +
    "\004\315\066\153\001\002\000\004\004\314\001\002\000" +
    "\004\004\313\001\002\000\006\006\uff75\033\uff75\001\002" +
    "\000\006\006\uff71\033\uff71\001\002\000\006\006\uff70\033" +
    "\uff70\001\002\000\006\006\uff73\033\uff73\001\002\000\006" +
    "\006\uff6d\033\uff6d\001\002\000\006\006\uff6f\033\uff6f\001" +
    "\002\000\006\006\uff72\033\uff72\001\002\000\006\006\uff6e" +
    "\033\uff6e\001\002\000\006\006\uff74\033\uff74\001\002\000" +
    "\042\006\uff95\011\uff95\012\uff95\014\uff95\025\uff95\027\uff95" +
    "\030\uff95\031\uff95\033\uff95\057\uff95\060\uff95\061\uff95\062" +
    "\uff95\063\uff95\065\uff95\066\uff95\001\002\000\024\020\054" +
    "\023\061\024\065\044\053\045\073\056\070\066\063\072" +
    "\064\073\057\001\002\000\004\021\327\001\002\000\004" +
    "\005\330\001\002\000\036\011\041\012\042\014\034\025" +
    "\037\027\045\030\050\031\043\057\022\060\006\061\015" +
    "\062\014\063\005\065\023\066\031\001\002\000\004\006" +
    "\332\001\002\000\044\006\uff8f\011\uff8f\012\uff8f\014\uff8f" +
    "\025\uff8f\026\333\027\uff8f\030\uff8f\031\uff8f\033\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\065\uff8f\066\uff8f" +
    "\001\002\000\004\005\334\001\002\000\036\011\041\012" +
    "\042\014\034\025\037\027\045\030\050\031\043\057\022" +
    "\060\006\061\015\062\014\063\005\065\023\066\031\001" +
    "\002\000\004\006\336\001\002\000\042\006\uff8e\011\uff8e" +
    "\012\uff8e\014\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e\033" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\065\uff8e" +
    "\066\uff8e\001\002\000\010\004\uffe5\007\341\016\340\001" +
    "\002\000\016\020\115\044\053\045\073\066\355\072\354" +
    "\073\113\001\002\000\032\015\351\020\054\023\061\024" +
    "\065\044\053\045\073\056\070\066\063\067\352\070\342" +
    "\072\347\073\344\001\002\000\004\004\uffe3\001\002\000" +
    "\004\004\uffdc\001\002\000\034\004\uffe1\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002\000\034\004\uffde" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002" +
    "\000\010\004\uffdd\054\160\055\161\001\002\000\034\004" +
    "\uffe2\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001" +
    "\002\000\006\004\uffdf\066\153\001\002\000\004\004\uffe0" +
    "\001\002\000\004\004\uffe4\001\002\000\004\017\uffd6\001" +
    "\002\000\020\017\uffd8\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\001\002\000\024\016\124\017\uffd7\020" +
    "\123\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\001\002\000\004\017\357\001\002\000\006\004\uffdb\007" +
    "\360\001\002\000\006\015\362\016\361\001\002\000\016" +
    "\020\115\044\053\045\073\066\355\072\354\073\113\001" +
    "\002\000\004\004\uffda\001\002\000\004\017\364\001\002" +
    "\000\004\004\uffd9\001\002\000\032\015\376\020\054\023" +
    "\061\024\065\044\053\045\073\056\070\066\063\067\377" +
    "\070\367\072\374\073\371\001\002\000\034\021\u0109\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000" +
    "\004\021\u0108\001\002\000\004\021\u0107\001\002\000\034" +
    "\021\u0106\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\001\002\000\034\021\u0105\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\010\021\u0104\054\160\055" +
    "\161\001\002\000\034\021\u0103\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\001\002\000\006\021\u0102\066\153" +
    "\001\002\000\004\021\u0101\001\002\000\004\021\u0100\001" +
    "\002\000\004\004\uff5b\001\002\000\004\004\uff57\001\002" +
    "\000\004\004\uff55\001\002\000\004\004\uff59\001\002\000" +
    "\004\004\uff53\001\002\000\004\004\uff52\001\002\000\004" +
    "\004\uff58\001\002\000\004\004\uff54\001\002\000\004\004" +
    "\uff5a\001\002\000\004\004\uff56\001\002\000\004\002\000" +
    "\001\002\000\004\072\u0116\001\002\000\032\015\u0114\020" +
    "\054\023\061\024\065\044\053\045\073\056\070\066\063" +
    "\067\u0115\070\u010d\072\u0112\073\u010f\001\002\000\004\004" +
    "\uffd2\001\002\000\004\004\uffcb\001\002\000\034\004\uffd0" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\034\004\uffcd\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\001\002\000\010\004\uffcc\054\160\055\161\001" +
    "\002\000\034\004\uffd1\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\001\002\000\006\004\uffce\066\153\001\002" +
    "\000\004\004\uffcf\001\002\000\004\004\uffd3\001\002\000" +
    "\004\017\u0117\001\002\000\004\007\u0118\001\002\000\016" +
    "\020\115\044\053\045\073\066\120\072\u011a\073\113\001" +
    "\002\000\004\004\uffc8\001\002\000\020\004\uffca\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002\000" +
    "\020\004\uffc9\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\001\002\000\020\004\uffc7\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000\042\006\uff9d" +
    "\011\uff9d\012\uff9d\014\uff9d\025\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\033\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\065\uff9d\066\uff9d\001\002\000\006\006\uff91\033\uff91\001" +
    "\002\000\042\006\uff96\011\uff96\012\uff96\014\uff96\025\uff96" +
    "\027\uff96\030\uff96\031\uff96\033\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\065\uff96\066\uff96\001\002\000\006" +
    "\066\u0123\067\u0121\001\002\000\004\021\u0126\001\002\000" +
    "\004\021\u0125\001\002\000\006\020\123\021\u0124\001\002" +
    "\000\004\004\uffc4\001\002\000\004\004\uffc5\001\002\000" +
    "\004\004\uffc6\001\002\000\004\002\001\001\002\000\004" +
    "\020\u0129\001\002\000\016\021\u012a\057\u012b\060\006\061" +
    "\015\062\014\063\005\001\002\000\004\005\u0139\001\002" +
    "\000\006\016\u0136\066\uffee\001\002\000\006\021\uff77\022" +
    "\u0134\001\002\000\004\066\u0133\001\002\000\004\021\u012f" +
    "\001\002\000\004\005\u0130\001\002\000\036\011\041\012" +
    "\042\014\034\025\037\027\045\030\050\031\043\057\022" +
    "\060\006\061\015\062\014\063\005\065\023\066\031\001" +
    "\002\000\004\006\u0132\001\002\000\016\057\uff6b\060\uff6b" +
    "\061\uff6b\062\uff6b\063\uff6b\064\uff6b\001\002\000\006\021" +
    "\uff79\022\uff79\001\002\000\014\057\u012b\060\006\061\015" +
    "\062\014\063\005\001\002\000\004\021\uff76\001\002\000" +
    "\004\017\u0137\001\002\000\004\066\u0138\001\002\000\006" +
    "\021\uff78\022\uff78\001\002\000\036\011\041\012\042\014" +
    "\034\025\037\027\045\030\050\031\043\057\022\060\006" +
    "\061\015\062\014\063\005\065\023\066\031\001\002\000" +
    "\004\006\u013b\001\002\000\016\057\uff6c\060\uff6c\061\uff6c" +
    "\062\uff6c\063\uff6c\064\uff6c\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\012\002\010\010\012\032\007\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\u013b\010\012\032\007\035\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\034" +
    "\021\025\023\031\024\032\025\023\026\035\027\027\036" +
    "\045\041\050\042\024\043\037\044\046\047\026\051\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\010\034\021\025\023\u011d" +
    "\024\032\025\023\026\035\027\027\036\045\041\050\042" +
    "\024\043\037\044\046\047\026\051\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\054\007\070\012\304\013\073\014\307\015\066" +
    "\016\065\017\305\020\302\041\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\054\007\070\012\057\013\073" +
    "\014\071\015\066\016\065\017\061\020\055\022\074\041" +
    "\075\001\001\000\002\001\001\000\026\005\054\007\070" +
    "\012\057\013\073\014\176\015\066\016\220\017\217\020" +
    "\216\041\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\213\001" +
    "\001\000\022\005\054\007\175\012\057\013\073\014\071" +
    "\015\066\016\171\041\174\001\001\000\002\001\001\000" +
    "\004\041\151\001\001\000\002\001\001\000\004\003\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\034\021\025\023\100\024\032\025\023" +
    "\026\035\027\027\036\045\041\050\042\024\043\037\044" +
    "\046\047\026\051\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\113\012\121\013" +
    "\116\014\111\041\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\113\012\121\013\073\014\163\041\120\001" +
    "\001\000\002\001\001\000\004\003\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\135\007\070\012\141\013\073\014\146\015\066\016\065" +
    "\017\142\020\137\037\144\040\145\041\075\001\001\000" +
    "\006\005\124\041\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\135\007\070\012\141\013\073" +
    "\014\146\015\066\016\065\017\142\020\137\037\144\040" +
    "\155\041\075\001\001\000\002\001\001\000\026\005\054" +
    "\007\070\012\057\013\073\014\071\015\066\016\065\017" +
    "\162\020\161\041\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\156\001\001\000" +
    "\002\001\001\000\004\003\165\001\001\000\014\005\113" +
    "\012\121\013\167\014\166\041\120\001\001\000\002\001" +
    "\001\000\004\003\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\054\012\057\013\073\014\176\015" +
    "\066\016\177\041\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\054\012\057\013\073\014\071\015\212\016\211" +
    "\041\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\213\001\001" +
    "\000\020\005\054\012\057\013\073\014\071\015\215\016" +
    "\214\041\120\001\001\000\002\001\001\000\004\004\213" +
    "\001\001\000\002\001\001\000\004\006\156\001\001\000" +
    "\002\001\001\000\004\006\222\001\001\000\026\005\054" +
    "\007\070\012\057\013\073\014\071\015\066\016\065\017" +
    "\224\020\223\041\075\001\001\000\002\001\001\000\004" +
    "\006\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\034\021\025\023\230\024\032\025\023\026\035" +
    "\027\027\036\045\041\050\042\024\043\037\044\046\047" +
    "\026\051\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\054\007\070\012\057\013" +
    "\073\014\071\015\066\016\065\017\061\020\055\022\234" +
    "\041\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\241\030\245\041\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\252\001\001\000\002\001\001\000\010\005\241\030\265" +
    "\041\243\001\001\000\002\001\001\000\036\010\034\021" +
    "\025\023\257\024\032\025\023\026\035\027\027\036\045" +
    "\041\050\042\024\043\037\044\046\047\026\051\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\262\001\001\000\002\001\001\000\004\031" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\034\021\025\023\270\024\032\025\023\026\035\027" +
    "\027\036\045\041\050\042\024\043\037\044\046\047\026" +
    "\051\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\273\001\001\000\002\001\001" +
    "\000\004\031\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\156\001\001\000\002\001\001\000\004\041\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\054\007\070\012\057\013\073\014\071\015\066\016" +
    "\065\017\061\020\055\022\325\041\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\010\034\021\025\023" +
    "\330\024\032\025\023\026\035\027\027\036\045\041\050" +
    "\042\024\043\037\044\046\047\026\051\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\034\021\025\023\334\024\032\025\023\026\035\027" +
    "\027\036\045\041\050\042\024\043\037\044\046\047\026" +
    "\051\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\113\012\121\013\073\014\352" +
    "\041\120\045\355\001\001\000\026\005\054\007\070\012" +
    "\344\013\073\014\347\015\066\016\065\017\345\020\342" +
    "\041\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\156\001\001" +
    "\000\002\001\001\000\004\041\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\113\012\121\013\073\014\352" +
    "\041\120\045\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\365\007\070\012\371" +
    "\013\073\014\374\015\066\016\065\017\372\020\367\041" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\156\001\001\000\002\001\001\000\004\041\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\054\007\070\012\u010f\013" +
    "\073\014\u0112\015\066\016\065\017\u0110\020\u010d\041\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\156\001\001\000\002" +
    "\001\001\000\004\041\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\113\012\u011b\013\073\014\u0118\041\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u012c\033\u012b\034\u012d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\034\021" +
    "\025\023\u0130\024\032\025\023\026\035\027\027\036\045" +
    "\041\050\042\024\043\037\044\046\047\026\051\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u012c\033\u012b\034\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\010\034\021\025\023\u0139\024\032\025\023\026" +
    "\035\027\027\036\045\041\050\042\024\043\037\044\046" +
    "\047\026\051\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ESCRIBIR ::= Print Parentesis_a TIPO_ARREGLO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ESCRIBIR ::= Print Parentesis_a Null Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ESCRIBIR ::= Print Parentesis_a Float Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ESCRIBIR ::= Print Parentesis_a Int Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ESCRIBIR ::= Print Parentesis_a Character Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ESCRIBIR ::= Print Parentesis_a String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LEER ::= Input Simbolo_input Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FUNCION ::= Identificador Parentesis_a PARAMETROS_FUNCION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX Coma PARAMETROS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PARAMETROS_FUNCION_AUX ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PARAMETROS_FUNCION_AUX ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PARAMETROS_FUNCION_AUX ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PARAMETROS_FUNCION_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PARAMETROS_FUNCION_AUX ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARAMETROS_FUNCION_AUX ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION Identificador Parentesis_a TIPOS_PARAMETRO_FUNCION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION Identificador Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RETORNOS_FUNCION ::= Return EXP_LOGICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RETORNOS_FUNCION ::= Return EXP_LOGICA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_BIN Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RETORNOS_FUNCION ::= Return Null Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // RETORNOS_FUNCION ::= Return Float Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // RETORNOS_FUNCION ::= Return Int Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RETORNOS_FUNCION ::= Return Character Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RETORNOS_FUNCION ::= Return String Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX Coma TIPOS_PARAMETRO_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPOS_PARAM_FUNCION_AUX ::= T_int Corchete_a Corchete_c Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAM_FUNCION_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPOS_PARAM_FUNCION_AUX ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAM_FUNCION_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPOS_RETORNO_FUNCION ::= TIPOS_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPOS_RETORNO_FUNCION ::= T_void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SWITCH ::= Switch Parentesis_a PARAM_SWITCH Parentesis_c Llave_a CASE_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE_SWITCH ::= Default Dos_puntos Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE_SWITCH ::= Default Dos_puntos BLOQUE Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASE_SWITCH ::= Default Dos_puntos BLOQUE Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASE_SWITCH ::= Default Dos_puntos Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAM_SWITCH ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAM_SWITCH ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAM_SWITCH ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAM_SWITCH ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAM_SWITCH ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAM_SWITCH ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAM_SWITCH ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DO_WHILE ::= Do Llave_a BLOQUE Llave_c While Parentesis_a CONDICION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // WHILE ::= While Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c Else Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BLOQUE ::= RETORNOS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUE ::= SENTENCIA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICION ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICION ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA ::= ESCRIBIR Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA ::= LEER Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= CAST_STRING_INT Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= ASIG_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= DEC_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_LOGICA_UNA ::= Negacion EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_LOGICA_UNA ::= EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_LOGICA_UNA ::= Negacion VARIABLES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_LOGICA_UNA ::= VARIABLES_LOGICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_LOGICA_UNA ::= Negacion FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_LOGICA_UNA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_LOGICA_UNA ::= Negacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_LOGICA_UNA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAM_EXP_RELACIONAL ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_BIN FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAM_EXP_RELACIONAL ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAM_EXP_RELACIONAL ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAM_EXP_RELACIONAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAM_EXP_ARITMETICA ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAM_EXP_ARITMETICA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAM_EXP_ARITMETICA ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAM_EXP_ARITMETICA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAM_EXP_ARITMETICA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAM_EXP_ARITMETICA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_ARITMETICA_UNA ::= Unario_negatico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP_ARITMETICA_UNA ::= Unario_positivo Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CAST_STRING_INT ::= String_to_int Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CAST_STRING_INT ::= String_to_int Parentesis_a FUNCION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CAST_STRING_INT ::= String_to_int Parentesis_a String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIG_VARIABLE ::= Identificador Corchete_a Int Corchete_c Asignacion Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIG_VARIABLE ::= Identificador Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIG_VARIABLE ::= Identificador Asignacion Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIG_VARIABLE ::= Identificador Asignacion Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG_VARIABLE ::= Identificador Asignacion Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIG_VARIABLE ::= Identificador Asignacion String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX Coma PARAMETROS_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROS_ARREGLO_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROS_ARREGLO_AUX ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROS_ARREGLO_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a PARAMETROS_ARREGLO_AUX Corchete_c Asignacion Corchete_a PARAMETROS_ARREGLO_AUX Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a PARAMETROS_ARREGLO_AUX Corchete_c Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a PARAMETROS_ARREGLO_AUX Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_ARREGLO ::= Identificador Corchete_a TIPO_ARREGLO Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_ARREGLO ::= Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_ARREGLO ::= Identificador Corchete_a FUNCION Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_ARREGLO ::= Identificador Corchete_a Int Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOS_VARIABLES ::= T_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_VARIABLES ::= T_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_VARIABLES ::= T_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_VARIABLES ::= T_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= T_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLES_LOGICAS ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_LOGICAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES_LOGICAS ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_LOGICAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_LOGICOS ::= Disyuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_LOGICOS ::= Conjuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_RELACIONALES ::= Mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_RELACIONALES ::= Menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_RELACIONALES ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS_RELACIONALES ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS_RELACIONALES ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS_ARITMETICOS ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPOS_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPOS_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPOS_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPOS_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DEC_FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_int Main Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

