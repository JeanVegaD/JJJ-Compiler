
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 13 19:13:42 CST 2020
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;
import Codigo.archivo_ingresado;
import Codigo.semantico.analisis;
import Codigo.semantico.literal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 13 19:13:42 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\306\000\002\002\004\000\002\104\003\000\002\002" +
    "\011\000\002\002\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\005\006\000\002\005\006\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\013\000\002\053" +
    "\013\000\002\054\004\000\002\054\006\000\002\054\006" +
    "\000\002\054\006\000\002\054\006\000\002\054\006\000" +
    "\002\054\006\000\002\054\006\000\002\054\006\000\002" +
    "\054\006\000\002\054\010\000\002\054\012\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003\000\002\056\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\010\000\002\060\006\000" +
    "\002\060\006\000\002\015\004\000\002\015\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\007" +
    "\000\002\017\007\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\007\000\002\021" +
    "\007\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\022\003\000\002\022\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\007\000\002\023\007\000\002\024\004\000\002\024" +
    "\004\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\027\003\000\002\027\004\000\002\063" +
    "\003\000\002\064\003\000\002\026\003\000\002\026\004" +
    "\000\002\026\005\000\002\026\006\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\065\003\000\002" +
    "\066\003\000\002\067\003\000\002\070\003\000\002\030" +
    "\011\000\002\030\015\000\002\071\003\000\002\072\003" +
    "\000\002\031\011\000\002\073\003\000\002\074\003\000" +
    "\002\032\012\000\002\034\003\000\002\034\003\000\002" +
    "\075\003\000\002\076\003\000\002\033\015\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\101\003" +
    "\000\002\102\003\000\002\103\003\000\002\037\010\000" +
    "\002\037\007\000\002\037\011\000\002\037\010\000\002" +
    "\037\006\000\002\037\007\000\002\037\010\000\002\037" +
    "\007\000\002\077\003\000\002\100\003\000\002\035\011" +
    "\000\002\040\003\000\002\040\003\000\002\041\004\000" +
    "\002\042\003\000\002\042\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\062\003\000\002\061\003" +
    "\000\002\043\011\000\002\043\012\000\002\043\004\000" +
    "\002\043\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\005" +
    "\000\002\047\005\000\002\047\006\000\002\050\005\000" +
    "\002\051\006\000\002\051\006\000\002\051\006\000\002" +
    "\051\006\000\002\051\006\000\002\051\006\000\002\051" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\020\003\016\061\012\062\006\063\017\064" +
    "\013\065\005\066\004\001\002\000\004\070\uff5f\001\002" +
    "\000\004\070\uffeb\001\002\000\004\070\uffee\001\002\000" +
    "\020\003\016\061\012\062\006\063\017\064\013\065\005" +
    "\066\004\001\002\000\004\070\uff53\001\002\000\004\002" +
    "\u0163\001\002\000\006\010\u015d\070\uffef\001\002\000\004" +
    "\070\uffec\001\002\000\004\070\uff5e\001\002\000\004\070" +
    "\023\001\002\000\006\006\020\021\021\001\002\000\004" +
    "\070\uffed\001\002\000\020\003\uff4f\061\uff4f\062\uff4f\063" +
    "\uff4f\064\uff4f\065\uff4f\066\uff4f\001\002\000\020\003\uff50" +
    "\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50\001" +
    "\002\000\004\020\024\001\002\000\004\020\uff54\001\002" +
    "\000\016\021\025\061\026\062\006\063\017\064\013\065" +
    "\005\001\002\000\004\005\u0159\001\002\000\004\070\uffef" +
    "\001\002\000\006\021\uff5c\022\u0157\001\002\000\004\070" +
    "\u0156\001\002\000\004\021\032\001\002\000\004\005\033" +
    "\001\002\000\042\003\055\005\046\011\054\012\056\014" +
    "\045\025\052\027\060\030\063\031\034\032\057\061\026" +
    "\062\006\063\017\064\013\065\005\070\042\001\002\000" +
    "\004\020\u0147\001\002\000\046\003\uff95\005\uff95\006\uff95" +
    "\011\uff95\012\uff95\014\uff95\025\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\034\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\070\uff95\001\002\000\004\004\u0146\001\002\000" +
    "\046\003\055\005\046\006\uff88\011\054\012\056\014\045" +
    "\025\052\027\060\030\063\031\034\032\057\034\uff88\061" +
    "\026\062\006\063\017\064\013\065\005\070\042\001\002" +
    "\000\004\004\u0144\001\002\000\046\003\uff92\005\uff92\006" +
    "\uff92\011\uff92\012\uff92\014\uff92\025\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\034\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\070\uff92\001\002\000\010\007\u0132\016\u0131" +
    "\020\173\001\002\000\004\006\u0130\001\002\000\046\003" +
    "\uff96\005\uff96\006\uff96\011\uff96\012\uff96\014\uff96\025\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\034\uff96\061\uff96\062" +
    "\uff96\063\uff96\064\uff96\065\uff96\070\uff96\001\002\000\004" +
    "\020\u0121\001\002\000\036\003\uff8a\012\uff8a\014\uff8a\025" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\070\uff8a\001\002\000\036\003" +
    "\055\012\056\014\045\025\052\027\060\030\063\031\034" +
    "\032\057\061\026\062\006\063\017\064\013\065\005\070" +
    "\042\001\002\000\004\070\347\001\002\000\046\003\uff93" +
    "\005\uff93\006\uff93\011\uff93\012\uff93\014\uff93\025\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\034\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\070\uff93\001\002\000\004\020" +
    "\331\001\002\000\004\004\330\001\002\000\030\020\072" +
    "\023\100\024\104\046\071\047\112\060\107\070\102\071" +
    "\213\072\202\073\103\074\076\001\002\000\006\004\313" +
    "\006\312\001\002\000\004\013\310\001\002\000\004\020" +
    "\247\001\002\000\004\005\237\001\002\000\006\006\uff84" +
    "\034\uff84\001\002\000\004\004\235\001\002\000\004\020" +
    "\067\001\002\000\046\003\uff94\005\uff94\006\uff94\011\uff94" +
    "\012\uff94\014\uff94\025\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\034\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94" +
    "\070\uff94\001\002\000\004\004\066\001\002\000\046\003" +
    "\uff91\005\uff91\006\uff91\011\uff91\012\uff91\014\uff91\025\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\034\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\070\uff91\001\002\000\024" +
    "\020\072\023\100\024\104\046\071\047\112\060\107\070" +
    "\102\073\103\074\076\001\002\000\020\004\uffa1\017\uffa1" +
    "\021\uffa1\022\uffa1\037\uffa1\056\uffa1\057\uffa1\001\002\000" +
    "\004\070\234\001\002\000\024\020\072\023\100\024\104" +
    "\046\071\047\112\060\107\070\102\073\103\074\076\001" +
    "\002\000\052\004\uffe8\006\uffe8\017\uffe8\021\uffe8\022\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\001\002\000\050\004\uffac\017\uffac\021" +
    "\uffac\022\uffac\037\uffac\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\001\002\000\006\004\uff83" +
    "\021\uff83\001\002\000\052\004\uffe9\006\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\001\002\000\050\004\uffaa" +
    "\017\uffaa\021\uffaa\022\uffaa\037\uffaa\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\001\002\000" +
    "\020\004\uffe5\017\uffe5\021\uffe5\022\uffe5\037\uffe5\056\uffe5" +
    "\057\uffe5\001\002\000\012\004\uff82\021\uff82\056\221\057" +
    "\222\001\002\000\056\004\uffe3\006\uffe3\016\174\017\uffe3" +
    "\020\173\021\uffe3\022\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000" +
    "\052\004\uffea\006\uffea\017\uffea\021\uffea\022\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\001\002\000\020\004\uffe4\017\uffe4\021\uffe4\022" +
    "\uffe4\037\uffe4\056\uffe4\057\uffe4\001\002\000\020\004\uff9f" +
    "\017\uff9f\021\uff9f\022\uff9f\037\uff9f\056\uff9f\057\uff9f\001" +
    "\002\000\016\050\157\051\160\052\165\053\164\054\163" +
    "\055\161\001\002\000\022\020\150\023\100\024\104\046" +
    "\071\047\112\070\102\073\103\074\076\001\002\000\050" +
    "\004\uffa3\017\uffa3\021\uffa3\022\uffa3\037\uffa3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffa3\057\uffa3\001" +
    "\002\000\034\004\uffa9\017\uffa9\021\uffa9\022\uffa9\037\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\001\002\000\004\070\146\001\002\000\016" +
    "\040\130\041\127\042\124\043\132\044\131\045\126\001" +
    "\002\000\004\021\116\001\002\000\052\004\uffe2\006\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002\000" +
    "\004\005\117\001\002\000\042\003\uff7b\005\uff7b\011\uff7b" +
    "\012\uff7b\014\uff7b\025\uff7b\027\uff7b\030\uff7b\031\uff7b\032" +
    "\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\070\uff7b" +
    "\001\002\000\042\003\055\005\046\011\054\012\056\014" +
    "\045\025\052\027\060\030\063\031\034\032\057\061\026" +
    "\062\006\063\017\064\013\065\005\070\042\001\002\000" +
    "\004\006\122\001\002\000\046\003\uff7a\005\uff7a\006\uff7a" +
    "\011\uff7a\012\uff7a\014\uff7a\025\uff7a\027\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\034\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a" +
    "\065\uff7a\070\uff7a\001\002\000\046\003\uff79\005\uff79\006" +
    "\uff79\011\uff79\012\uff79\014\uff79\025\uff79\027\uff79\030\uff79" +
    "\031\uff79\032\uff79\034\uff79\061\uff79\062\uff79\063\uff79\064" +
    "\uff79\065\uff79\070\uff79\001\002\000\016\020\ufffb\046\ufffb" +
    "\047\ufffb\070\ufffb\073\ufffb\074\ufffb\001\002\000\016\020" +
    "\135\046\071\047\112\070\102\073\103\074\076\001\002" +
    "\000\016\020\ufff8\046\ufff8\047\ufff8\070\ufff8\073\ufff8\074" +
    "\ufff8\001\002\000\016\020\ufffc\046\ufffc\047\ufffc\070\ufffc" +
    "\073\ufffc\074\ufffc\001\002\000\016\020\ufffd\046\ufffd\047" +
    "\ufffd\070\ufffd\073\ufffd\074\ufffd\001\002\000\016\020\ufff9" +
    "\046\ufff9\047\ufff9\070\ufff9\073\ufff9\074\ufff9\001\002\000" +
    "\016\020\ufffa\046\ufffa\047\ufffa\070\ufffa\073\ufffa\074\ufffa" +
    "\001\002\000\036\004\uffb0\006\uffb0\017\uffb0\021\uffb0\022" +
    "\uffb0\037\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\001\002\000\052\004\uffb3\006" +
    "\uffb3\017\uffb3\021\uffb3\022\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002" +
    "\000\016\020\135\046\071\047\112\070\102\073\103\074" +
    "\076\001\002\000\052\004\uffb1\006\uffb1\017\uffb1\021\uffb1" +
    "\022\uffb1\037\uffb1\040\130\041\127\042\124\043\132\044" +
    "\131\045\126\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\001\002\000\052\004\uffb4\006" +
    "\uffb4\017\uffb4\021\uffb4\022\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002" +
    "\000\052\004\uffb2\006\uffb2\017\uffb2\021\uffb2\022\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\001\002\000\004\021\142\001\002\000\052" +
    "\004\uffaf\006\uffaf\017\uffaf\021\uffaf\022\uffaf\037\uffaf\040" +
    "\130\041\127\042\124\043\132\044\131\045\126\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\001\002\000\016\020\135\046\071\047\112\070\102" +
    "\073\103\074\076\001\002\000\036\004\uffad\006\uffad\017" +
    "\uffad\021\uffad\022\uffad\037\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\001\002\000" +
    "\052\004\uffae\006\uffae\017\uffae\021\uffae\022\uffae\037\uffae" +
    "\040\130\041\127\042\124\043\132\044\131\045\126\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\001\002\000\052\004\uffb5\006\uffb5\017\uffb5\021" +
    "\uffb5\022\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000\020\004\uffa0" +
    "\017\uffa0\021\uffa0\022\uffa0\037\uffa0\056\uffa0\057\uffa0\001" +
    "\002\000\016\020\150\046\071\047\112\070\102\073\103" +
    "\074\076\001\002\000\020\004\uff9e\017\uff9e\021\uff9e\022" +
    "\uff9e\037\uff9e\056\uff9e\057\uff9e\001\002\000\050\004\uffa2" +
    "\017\uffa2\021\uffa2\022\uffa2\037\uffa2\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffa2\057\uffa2\001\002\000" +
    "\050\004\uffab\017\uffab\021\uffab\022\uffab\037\uffab\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\001\002\000\020\021\142\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\001\002\000\004\021\156\001\002" +
    "\000\034\004\uffa6\017\uffa6\021\uffa6\022\uffa6\037\uffa6\050" +
    "\157\051\160\052\165\053\164\054\163\055\161\056\uffa6" +
    "\057\uffa6\001\002\000\016\020\ufff7\046\ufff7\047\ufff7\070" +
    "\ufff7\073\ufff7\074\ufff7\001\002\000\016\020\ufff6\046\ufff6" +
    "\047\ufff6\070\ufff6\073\ufff6\074\ufff6\001\002\000\016\020" +
    "\ufff2\046\ufff2\047\ufff2\070\ufff2\073\ufff2\074\ufff2\001\002" +
    "\000\016\020\150\046\071\047\112\070\102\073\103\074" +
    "\076\001\002\000\016\020\ufff3\046\ufff3\047\ufff3\070\ufff3" +
    "\073\ufff3\074\ufff3\001\002\000\016\020\ufff4\046\ufff4\047" +
    "\ufff4\070\ufff4\073\ufff4\074\ufff4\001\002\000\016\020\ufff5" +
    "\046\ufff5\047\ufff5\070\ufff5\073\ufff5\074\ufff5\001\002\000" +
    "\020\004\uffa4\017\uffa4\021\uffa4\022\uffa4\037\uffa4\056\uffa4" +
    "\057\uffa4\001\002\000\034\004\uffa5\017\uffa5\021\uffa5\022" +
    "\uffa5\037\uffa5\050\157\051\160\052\165\053\164\054\163" +
    "\055\161\056\uffa5\057\uffa5\001\002\000\016\020\150\046" +
    "\071\047\112\070\102\073\103\074\076\001\002\000\020" +
    "\004\uffa7\017\uffa7\021\uffa7\022\uffa7\037\uffa7\056\uffa7\057" +
    "\uffa7\001\002\000\034\004\uffa8\017\uffa8\021\uffa8\022\uffa8" +
    "\037\uffa8\050\157\051\160\052\165\053\164\054\163\055" +
    "\161\056\uffa8\057\uffa8\001\002\000\034\015\212\020\072" +
    "\021\201\023\100\024\104\046\071\047\112\060\107\070" +
    "\102\071\213\072\202\073\103\074\076\001\002\000\010" +
    "\070\102\073\103\074\076\001\002\000\004\017\200\001" +
    "\002\000\004\017\177\001\002\000\052\004\uffe0\006\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002\000" +
    "\052\004\uffe1\006\uffe1\017\uffe1\021\uffe1\022\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\001\002\000\052\004\uff45\006\uff45\017\uff45\021" +
    "\uff45\022\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45" +
    "\044\uff45\045\uff45\050\uff45\051\uff45\052\uff45\053\uff45\054" +
    "\uff45\055\uff45\056\uff45\057\uff45\001\002\000\014\004\uffe6" +
    "\017\uffe6\021\uffe6\022\uffe6\037\uffe6\001\002\000\036\021" +
    "\uff4e\022\uff4e\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\001\002\000\006\021\uff49\022\uff49\001\002\000\036" +
    "\021\uff4a\022\uff4a\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\001\002\000\012\021\uff48\022\uff48\056\221\057" +
    "\222\001\002\000\006\021\uff47\022\216\001\002\000\004" +
    "\021\215\001\002\000\022\021\uff4b\022\uff4b\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\001\002\000\006" +
    "\021\uff4c\022\uff4c\001\002\000\014\004\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\037\uffe7\001\002\000\006\021\uff4d\022\uff4d" +
    "\001\002\000\052\004\uff44\006\uff44\017\uff44\021\uff44\022" +
    "\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44\044\uff44" +
    "\045\uff44\050\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055" +
    "\uff44\056\uff44\057\uff44\001\002\000\032\015\212\020\072" +
    "\023\100\024\104\046\071\047\112\060\107\070\102\071" +
    "\213\072\202\073\103\074\076\001\002\000\004\021\uff46" +
    "\001\002\000\024\020\072\023\100\024\104\046\071\047" +
    "\112\060\107\070\102\073\103\074\076\001\002\000\024" +
    "\020\ufff1\023\ufff1\024\ufff1\046\ufff1\047\ufff1\060\ufff1\070" +
    "\ufff1\073\ufff1\074\ufff1\001\002\000\024\020\ufff0\023\ufff0" +
    "\024\ufff0\046\ufff0\047\ufff0\060\ufff0\070\ufff0\073\ufff0\074" +
    "\ufff0\001\002\000\014\004\uff9c\017\uff9c\021\uff9c\022\uff9c" +
    "\037\uff9c\001\002\000\020\004\uff9d\017\uff9d\021\uff9d\022" +
    "\uff9d\037\uff9d\056\221\057\222\001\002\000\004\021\230" +
    "\001\002\000\006\056\221\057\222\001\002\000\010\021" +
    "\156\056\uff9f\057\uff9f\001\002\000\020\004\uff9b\017\uff9b" +
    "\021\uff9b\022\uff9b\037\uff9b\056\221\057\222\001\002\000" +
    "\024\020\072\023\100\024\104\046\071\047\112\060\107" +
    "\070\102\073\103\074\076\001\002\000\014\004\uff99\017" +
    "\uff99\021\uff99\022\uff99\037\uff99\001\002\000\020\004\uff9a" +
    "\017\uff9a\021\uff9a\022\uff9a\037\uff9a\056\221\057\222\001" +
    "\002\000\052\004\uffb6\006\uffb6\017\uffb6\021\uffb6\022\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\001\002\000\046\003\uff98\005\uff98\006" +
    "\uff98\011\uff98\012\uff98\014\uff98\025\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\034\uff98\061\uff98\062\uff98\063\uff98\064" +
    "\uff98\065\uff98\070\uff98\001\002\000\042\003\055\005\046" +
    "\011\054\012\056\014\045\025\052\027\060\030\063\031" +
    "\034\032\057\061\026\062\006\063\017\064\013\065\005" +
    "\070\042\001\002\000\042\003\uff78\005\uff78\011\uff78\012" +
    "\uff78\014\uff78\025\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\070\uff78\001" +
    "\002\000\004\006\241\001\002\000\004\030\242\001\002" +
    "\000\004\020\243\001\002\000\024\020\072\023\100\024" +
    "\104\046\071\047\112\060\107\070\102\073\103\074\076" +
    "\001\002\000\004\021\246\001\002\000\046\003\uff76\005" +
    "\uff76\006\uff76\011\uff76\012\uff76\014\uff76\025\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\034\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\065\uff76\070\uff76\001\002\000\046\003\uff77" +
    "\005\uff77\006\uff77\011\uff77\012\uff77\014\uff77\025\uff77\027" +
    "\uff77\030\uff77\031\uff77\032\uff77\034\uff77\061\uff77\062\uff77" +
    "\063\uff77\064\uff77\065\uff77\070\uff77\001\002\000\014\070" +
    "\102\071\213\072\202\073\103\074\076\001\002\000\006" +
    "\021\uff6e\037\uff6e\001\002\000\004\021\uff62\001\002\000" +
    "\004\021\255\001\002\000\006\021\uff6f\037\uff6f\001\002" +
    "\000\006\021\uff70\037\uff70\001\002\000\004\005\256\001" +
    "\002\000\006\033\260\035\261\001\002\000\004\006\306" +
    "\001\002\000\014\070\102\071\213\072\202\073\103\074" +
    "\076\001\002\000\004\037\263\001\002\000\044\003\055" +
    "\005\046\011\054\012\056\014\045\025\052\027\060\030" +
    "\063\031\034\032\057\034\264\061\026\062\006\063\017" +
    "\064\013\065\005\070\042\001\002\000\044\003\uff6c\005" +
    "\uff6c\011\uff6c\012\uff6c\014\uff6c\025\uff6c\027\uff6c\030\uff6c" +
    "\031\uff6c\032\uff6c\034\uff6c\061\uff6c\062\uff6c\063\uff6c\064" +
    "\uff6c\065\uff6c\070\uff6c\001\002\000\004\004\270\001\002" +
    "\000\004\034\266\001\002\000\004\004\270\001\002\000" +
    "\010\006\uff65\033\260\035\261\001\002\000\010\006\uff6b" +
    "\033\uff6b\035\uff6b\001\002\000\004\006\uff64\001\002\000" +
    "\010\006\uff66\033\260\035\261\001\002\000\004\006\uff63" +
    "\001\002\000\004\037\uff6d\001\002\000\004\037\263\001" +
    "\002\000\044\003\055\005\046\011\054\012\056\014\045" +
    "\025\052\027\060\030\063\031\034\032\057\034\277\061" +
    "\026\062\006\063\017\064\013\065\005\070\042\001\002" +
    "\000\004\004\270\001\002\000\004\034\301\001\002\000" +
    "\004\004\270\001\002\000\010\006\uff6a\033\260\035\261" +
    "\001\002\000\004\006\uff68\001\002\000\010\006\uff69\033" +
    "\260\035\261\001\002\000\004\006\uff67\001\002\000\046" +
    "\003\uff61\005\uff61\006\uff61\011\uff61\012\uff61\014\uff61\025" +
    "\uff61\027\uff61\030\uff61\031\uff61\032\uff61\034\uff61\061\uff61" +
    "\062\uff61\063\uff61\064\uff61\065\uff61\070\uff61\001\002\000" +
    "\046\003\uff60\005\uff60\006\uff60\011\uff60\012\uff60\014\uff60" +
    "\025\uff60\027\uff60\030\uff60\031\uff60\032\uff60\034\uff60\061" +
    "\uff60\062\uff60\063\uff60\064\uff60\065\uff60\070\uff60\001\002" +
    "\000\004\070\311\001\002\000\004\004\uff43\001\002\000" +
    "\046\003\uff8d\005\uff8d\006\uff8d\011\uff8d\012\uff8d\014\uff8d" +
    "\025\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\070\uff8d\001\002" +
    "\000\046\003\uff8e\005\uff8e\006\uff8e\011\uff8e\012\uff8e\014" +
    "\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\070\uff8e\001" +
    "\002\000\034\004\327\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\001\002\000\004\004\326\001\002\000\034" +
    "\004\325\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\001\002\000\010\004\324\056\221\057\222\001\002\000" +
    "\020\004\323\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\001\002\000\004\004\322\001\002\000\006\006" +
    "\uff5a\034\uff5a\001\002\000\006\006\uff58\034\uff58\001\002" +
    "\000\006\006\uff55\034\uff55\001\002\000\006\006\uff57\034" +
    "\uff57\001\002\000\006\006\uff56\034\uff56\001\002\000\006" +
    "\006\uff59\034\uff59\001\002\000\046\003\uff8f\005\uff8f\006" +
    "\uff8f\011\uff8f\012\uff8f\014\uff8f\025\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\034\uff8f\061\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\070\uff8f\001\002\000\024\020\072\023\100" +
    "\024\104\046\071\047\112\060\107\070\102\073\103\074" +
    "\076\001\002\000\004\021\333\001\002\000\004\005\334" +
    "\001\002\000\042\003\uff81\005\uff81\011\uff81\012\uff81\014" +
    "\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81\061\uff81" +
    "\062\uff81\063\uff81\064\uff81\065\uff81\070\uff81\001\002\000" +
    "\042\003\055\005\046\011\054\012\056\014\045\025\052" +
    "\027\060\030\063\031\034\032\057\061\026\062\006\063" +
    "\017\064\013\065\005\070\042\001\002\000\004\006\337" +
    "\001\002\000\050\003\uff80\005\uff80\006\uff80\011\uff80\012" +
    "\uff80\014\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80" +
    "\032\uff80\034\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065" +
    "\uff80\070\uff80\001\002\000\050\003\uff7d\005\uff7d\006\uff7d" +
    "\011\uff7d\012\uff7d\014\uff7d\025\uff7d\026\341\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\034\uff7d\061\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\065\uff7d\070\uff7d\001\002\000\004\005\343\001" +
    "\002\000\042\003\055\005\046\011\054\012\056\014\045" +
    "\025\052\027\060\030\063\031\034\032\057\061\026\062" +
    "\006\063\017\064\013\065\005\070\042\001\002\000\042" +
    "\003\uff7f\005\uff7f\011\uff7f\012\uff7f\014\uff7f\025\uff7f\027" +
    "\uff7f\030\uff7f\031\uff7f\032\uff7f\061\uff7f\062\uff7f\063\uff7f" +
    "\064\uff7f\065\uff7f\070\uff7f\001\002\000\004\006\345\001" +
    "\002\000\046\003\uff7e\005\uff7e\006\uff7e\011\uff7e\012\uff7e" +
    "\014\uff7e\025\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034" +
    "\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\070\uff7e" +
    "\001\002\000\046\003\uff7c\005\uff7c\006\uff7c\011\uff7c\012" +
    "\uff7c\014\uff7c\025\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\034\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\070" +
    "\uff7c\001\002\000\010\004\uffd7\007\351\016\350\001\002" +
    "\000\004\017\u010f\001\002\000\034\016\357\020\072\023" +
    "\100\024\104\046\071\047\112\060\107\067\352\070\102" +
    "\071\213\072\202\073\103\074\076\001\002\000\004\020" +
    "\u0109\001\002\000\034\004\uffd6\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\001\002\000\004\004\uffd1\001\002" +
    "\000\034\004\uffd4\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\001\002\000\010\004\uffd2\056\221\057\222\001" +
    "\002\000\004\020\364\001\002\000\004\004\uffd0\001\002" +
    "\000\020\004\uffd3\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\001\002\000\004\004\uffcf\001\002\000\004" +
    "\004\uffd5\001\002\000\024\020\072\023\100\024\104\046" +
    "\071\047\112\060\107\070\102\073\103\074\076\001\002" +
    "\000\004\021\u0103\001\002\000\010\021\367\056\221\057" +
    "\222\001\002\000\004\036\370\001\002\000\030\020\072" +
    "\023\100\024\104\046\071\047\112\060\107\070\102\071" +
    "\213\072\202\073\103\074\076\001\002\000\036\017\uffdf" +
    "\037\uffdf\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\001\002\000\006\017\uffda\037\uffda\001\002\000\004\037" +
    "\u0100\001\002\000\036\017\uffdd\037\uffdd\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\001\002\000\012\017\uffdb" +
    "\037\uffdb\056\221\057\222\001\002\000\022\017\uffdc\037" +
    "\uffdc\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\001\002\000\006\017\uffde\037\uffde\001\002\000\030\020" +
    "\072\023\100\024\104\046\071\047\112\060\107\070\102" +
    "\071\213\072\202\073\103\074\076\001\002\000\004\017" +
    "\u0102\001\002\000\006\004\uffd9\021\uffd9\001\002\000\004" +
    "\036\u0104\001\002\000\030\020\072\023\100\024\104\046" +
    "\071\047\112\060\107\070\102\071\213\072\202\073\103" +
    "\074\076\001\002\000\004\037\u0106\001\002\000\030\020" +
    "\072\023\100\024\104\046\071\047\112\060\107\070\102" +
    "\071\213\072\202\073\103\074\076\001\002\000\004\017" +
    "\u0108\001\002\000\006\004\uffd8\021\uffd8\001\002\000\010" +
    "\070\u010c\071\213\072\202\001\002\000\004\021\u010e\001" +
    "\002\000\004\021\u010d\001\002\000\006\020\173\021\uffe3" +
    "\001\002\000\006\004\uffb8\021\uffb8\001\002\000\006\004" +
    "\uffb7\021\uffb7\001\002\000\006\004\uffce\007\u0110\001\002" +
    "\000\006\005\u0111\015\u0112\001\002\000\016\020\135\046" +
    "\071\047\112\070\102\073\u0115\074\076\001\002\000\004" +
    "\004\uffcd\001\002\000\022\006\uffc6\022\uffc6\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\001\002\000\006" +
    "\006\uffc5\022\uffc5\001\002\000\022\006\uffc7\022\uffc7\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\001\002" +
    "\000\004\006\u011a\001\002\000\006\006\uffc4\022\u0118\001" +
    "\002\000\016\020\135\046\071\047\112\070\102\073\u0115" +
    "\074\076\001\002\000\004\006\uffc3\001\002\000\004\004" +
    "\uffcc\001\002\000\040\003\055\006\uff8c\012\056\014\045" +
    "\025\052\027\060\030\063\031\034\032\057\061\026\062" +
    "\006\063\017\064\013\065\005\070\042\001\002\000\004" +
    "\006\u011d\001\002\000\046\003\uff89\005\uff89\006\uff89\011" +
    "\uff89\012\uff89\014\uff89\025\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\034\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065" +
    "\uff89\070\uff89\001\002\000\046\003\055\005\046\006\uff86" +
    "\011\054\012\056\014\045\025\052\027\060\030\063\031" +
    "\034\032\057\034\uff86\061\026\062\006\063\017\064\013" +
    "\065\005\070\042\001\002\000\006\006\uff85\034\uff85\001" +
    "\002\000\004\006\uff8b\001\002\000\032\015\u0127\020\072" +
    "\023\100\024\104\046\071\047\112\060\107\070\102\071" +
    "\213\072\202\073\103\074\076\001\002\000\034\021\u012f" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\001\002" +
    "\000\004\021\u012e\001\002\000\034\021\u012d\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\001\002\000\010\021" +
    "\u012c\056\221\057\222\001\002\000\020\021\u012b\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\001\002\000" +
    "\004\021\u012a\001\002\000\004\021\u0129\001\002\000\004" +
    "\004\uff42\001\002\000\004\004\uff40\001\002\000\004\004" +
    "\uff3f\001\002\000\004\004\uff3d\001\002\000\004\004\uff3c" +
    "\001\002\000\004\004\uff3e\001\002\000\004\004\uff41\001" +
    "\002\000\020\003\uff51\061\uff51\062\uff51\063\uff51\064\uff51" +
    "\065\uff51\066\uff51\001\002\000\016\020\135\046\071\047" +
    "\112\070\102\073\u0140\074\076\001\002\000\036\015\u013a" +
    "\016\357\020\072\023\100\024\104\046\071\047\112\060" +
    "\107\067\352\070\102\071\213\072\202\073\103\074\076" +
    "\001\002\000\036\004\uffc1\021\uffc1\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\001\002\000\006\004\uffbc\021" +
    "\uffbc\001\002\000\036\004\uffbf\021\uffbf\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\001\002\000\012\004\uffbd" +
    "\021\uffbd\056\221\057\222\001\002\000\006\004\uffbb\021" +
    "\uffbb\001\002\000\022\004\uffbe\021\uffbe\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\001\002\000\006\004" +
    "\uffba\021\uffba\001\002\000\006\004\uffc2\021\uffc2\001\002" +
    "\000\006\004\uffc0\021\uffc0\001\002\000\024\004\uffc9\017" +
    "\uffc9\021\uffc9\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\001\002\000\010\004\uffc8\017\uffc8\021\uffc8\001" +
    "\002\000\004\017\u0141\001\002\000\024\004\uffca\017\uffca" +
    "\021\uffca\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\001\002\000\024\004\uffcb\017\uffcb\021\uffcb\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\001\002\000" +
    "\004\007\u0142\001\002\000\016\020\135\046\071\047\112" +
    "\070\102\073\u0140\074\076\001\002\000\006\004\uffb9\021" +
    "\uffb9\001\002\000\046\003\uff97\005\uff97\006\uff97\011\uff97" +
    "\012\uff97\014\uff97\025\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\034\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97" +
    "\070\uff97\001\002\000\006\006\uff87\034\uff87\001\002\000" +
    "\046\003\uff90\005\uff90\006\uff90\011\uff90\012\uff90\014\uff90" +
    "\025\uff90\027\uff90\030\uff90\031\uff90\032\uff90\034\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\065\uff90\070\uff90\001\002" +
    "\000\016\061\026\062\006\063\017\064\013\065\005\070" +
    "\u014a\001\002\000\004\004\uff75\001\002\000\004\004\u014c" +
    "\001\002\000\006\007\u0132\016\u0131\001\002\000\004\004" +
    "\uff74\001\002\000\024\020\072\023\100\024\104\046\071" +
    "\047\112\060\107\070\102\073\103\074\076\001\002\000" +
    "\004\004\u014e\001\002\000\004\070\u014a\001\002\000\004" +
    "\021\u0150\001\002\000\004\005\u0151\001\002\000\042\003" +
    "\uff73\005\uff73\011\uff73\012\uff73\014\uff73\025\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\061\uff73\062\uff73\063\uff73\064" +
    "\uff73\065\uff73\070\uff73\001\002\000\042\003\055\005\046" +
    "\011\054\012\056\014\045\025\052\027\060\030\063\031" +
    "\034\032\057\061\026\062\006\063\017\064\013\065\005" +
    "\070\042\001\002\000\004\006\u0154\001\002\000\046\003" +
    "\uff72\005\uff72\006\uff72\011\uff72\012\uff72\014\uff72\025\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\034\uff72\061\uff72\062" +
    "\uff72\063\uff72\064\uff72\065\uff72\070\uff72\001\002\000\046" +
    "\003\uff71\005\uff71\006\uff71\011\uff71\012\uff71\014\uff71\025" +
    "\uff71\027\uff71\030\uff71\031\uff71\032\uff71\034\uff71\061\uff71" +
    "\062\uff71\063\uff71\064\uff71\065\uff71\070\uff71\001\002\000" +
    "\006\021\uff5d\022\uff5d\001\002\000\014\061\026\062\006" +
    "\063\017\064\013\065\005\001\002\000\004\021\uff5b\001" +
    "\002\000\042\003\055\005\046\011\054\012\056\014\045" +
    "\025\052\027\060\030\063\031\034\032\057\061\026\062" +
    "\006\063\017\064\013\065\005\070\042\001\002\000\004" +
    "\006\u015b\001\002\000\020\003\uff52\061\uff52\062\uff52\063" +
    "\uff52\064\uff52\065\uff52\066\uff52\001\002\000\004\020\u015e" +
    "\001\002\000\004\020\000\001\002\000\004\021\u015f\001" +
    "\002\000\004\005\u0160\001\002\000\042\003\055\005\046" +
    "\011\054\012\056\014\045\025\052\027\060\030\063\031" +
    "\034\032\057\061\026\062\006\063\017\064\013\065\005" +
    "\070\042\001\002\000\004\006\u0162\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\014\002\010\007\013\040\007\043\006\061" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\u0163\007\013\040\007\043\006\061" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\u015b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\027\041\026\042\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\007\047\024\036\026\042\030\043\031\034\032\050\033" +
    "\063\035\040\044\060\047\064\050\035\051\052\054\061" +
    "\057\037\063\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\047\024\036\026\u0144" +
    "\030\043\031\034\032\050\033\063\035\040\044\060\047" +
    "\064\050\035\051\052\054\061\057\037\063\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\047\024\u011a\027\u011b\030\043\031" +
    "\034\032\050\033\063\035\040\047\064\050\035\051\052" +
    "\054\061\057\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\072" +
    "\010\313\011\320\012\067\013\107\015\315\016\112\017" +
    "\317\020\105\021\104\022\316\023\314\047\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\072\010\073\012\067\013\107" +
    "\015\076\016\112\017\110\020\105\021\104\022\100\023" +
    "\074\025\113\047\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\072\010\073\012\067\013\107\015" +
    "\076\016\112\017\153\020\105\021\226\022\225\023\224" +
    "\047\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\167\001\001\000\026\005\072\010\073\012\146\013" +
    "\151\015\076\016\112\017\110\020\105\021\150\047\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\117\001\001\000\002\001\001\000" +
    "\040\007\047\024\036\026\120\030\043\031\034\032\050" +
    "\033\063\035\040\044\060\047\064\050\035\051\052\054" +
    "\061\057\037\063\046\001\001\000\004\072\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\072\010\136\013\133\015\137\016\135\017\132" +
    "\047\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\072\010\136\013" +
    "\133\015\137\016\112\017\140\047\114\001\001\000\004" +
    "\003\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\142\001\001\000\020\005\072" +
    "\010\136\013\133\015\137\016\144\017\143\047\114\001" +
    "\001\000\002\001\001\000\004\003\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\072\010\073\013" +
    "\152\015\076\016\112\017\153\020\105\021\154\047\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\072\010\073\013\152\015\076\016\112" +
    "\017\110\020\166\021\165\047\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\167\001\001\000\024\005\072\010\073\013" +
    "\152\015\076\016\112\017\110\020\171\021\170\047\114" +
    "\001\001\000\002\001\001\000\004\004\167\001\001\000" +
    "\040\005\072\010\202\011\213\012\067\013\107\015\204" +
    "\016\112\017\210\020\105\021\104\022\205\023\203\045" +
    "\206\046\207\047\114\001\001\000\012\005\072\010\174" +
    "\013\175\047\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\072\010\202\011\213\012\067\013\107\015\204\016" +
    "\112\017\210\020\105\021\104\022\205\023\203\045\206" +
    "\046\216\047\114\001\001\000\002\001\001\000\032\005" +
    "\072\010\073\012\067\013\107\015\076\016\112\017\110" +
    "\020\105\021\104\022\223\023\222\047\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\217\001\001\000\002\001\001\000\004\006\217\001" +
    "\001\000\002\001\001\000\004\006\230\001\001\000\032" +
    "\005\072\010\073\012\067\013\107\015\076\016\112\017" +
    "\110\020\105\021\104\022\232\023\231\047\114\001\001" +
    "\000\002\001\001\000\004\006\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\047\024\036\026\237" +
    "\030\043\031\034\032\050\033\063\035\040\044\060\047" +
    "\064\050\035\051\052\054\061\057\037\063\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\072\010\073\012\067\013\107" +
    "\015\076\016\112\017\110\020\105\021\104\022\100\023" +
    "\074\025\243\047\114\001\001\000\004\074\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\072\010" +
    "\253\011\252\013\247\036\250\047\114\077\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\256\001\001\000\004\100\306\001\001\000\020\005" +
    "\072\010\253\011\252\013\247\036\273\047\114\101\274" +
    "\001\001\000\004\102\261\001\001\000\040\007\047\024" +
    "\036\026\264\030\043\031\034\032\050\033\063\035\040" +
    "\044\060\047\064\050\035\051\052\054\061\057\037\063" +
    "\046\001\001\000\002\001\001\000\004\103\271\001\001" +
    "\000\002\001\001\000\004\103\266\001\001\000\004\037" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\275\001\001\000\040\007\047\024\036\026\277" +
    "\030\043\031\034\032\050\033\063\035\040\044\060\047" +
    "\064\050\035\051\052\054\061\057\037\063\046\001\001" +
    "\000\004\103\303\001\001\000\002\001\001\000\004\103" +
    "\301\001\001\000\004\037\302\001\001\000\002\001\001" +
    "\000\004\037\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\072\010\073\012\067\013\107\015\076\016\112\017\110" +
    "\020\105\021\104\022\100\023\074\025\331\047\114\001" +
    "\001\000\002\001\001\000\004\065\334\001\001\000\002" +
    "\001\001\000\040\007\047\024\036\026\335\030\043\031" +
    "\034\032\050\033\063\035\040\044\060\047\064\050\035" +
    "\051\052\054\061\057\037\063\046\001\001\000\004\066" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\341\001\001\000\040\007\047\024\036\026\343\030" +
    "\043\031\034\032\050\033\063\035\040\044\060\047\064" +
    "\050\035\051\052\054\061\057\037\063\046\001\001\000" +
    "\002\001\001\000\004\070\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\072\010\352\011\362\012\067\013\107\015\354" +
    "\016\112\017\360\020\105\021\104\022\355\023\353\047" +
    "\114\053\357\060\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\072\010\073\012\067\013\107\015\076\016\112\017\110" +
    "\020\105\021\104\022\365\023\364\047\114\001\001\000" +
    "\002\001\001\000\004\006\217\001\001\000\002\001\001" +
    "\000\036\005\072\010\370\011\376\012\067\013\107\015" +
    "\373\016\112\017\375\020\105\021\104\022\374\023\371" +
    "\047\114\052\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\072\010\370\011\376\012\067\013\107\015\373\016\112" +
    "\017\375\020\105\021\104\022\374\023\371\047\114\052" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\072\010\370\011\376\012\067\013" +
    "\107\015\373\016\112\017\375\020\105\021\104\022\374" +
    "\023\371\047\114\052\u0104\001\001\000\002\001\001\000" +
    "\036\005\072\010\370\011\376\012\067\013\107\015\373" +
    "\016\112\017\375\020\105\021\104\022\374\023\371\047" +
    "\114\052\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\u010a\013\u0109\047\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\072\010\136\013\u0112\015\137\016\112\017\u0113" +
    "\047\114\055\u0116\056\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\072\010\136\013" +
    "\u0112\015\137\016\112\017\u0113\047\114\055\u0116\056\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\047\024\u011a\027\u011f\030\043\031\034\032\050\033\063" +
    "\035\040\047\064\050\035\051\052\054\061\057\037\001" +
    "\001\000\004\064\u011d\001\001\000\002\001\001\000\040" +
    "\007\047\024\036\026\u011e\030\043\031\034\032\050\033" +
    "\063\035\040\044\060\047\064\050\035\051\052\054\061" +
    "\057\037\063\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\072\010\u0121\011\u0127\012\067\013\107" +
    "\015\u0123\016\112\017\u0125\020\105\021\104\022\u0124\023" +
    "\u0122\047\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\u013e\010\136\013\u013b\014\u013d\015" +
    "\137\016\112\017\u013c\047\114\001\001\000\040\005\072" +
    "\010\u0132\011\u013a\012\067\013\107\015\u0134\016\112\017" +
    "\u0137\020\105\021\104\022\u0135\023\u0133\047\114\053\u0136" +
    "\060\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\u013e\010\136\013\u013b\014\u0142\015\137" +
    "\016\112\017\u013c\047\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\047\034\u0148\054\u0147\057\u014a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\072\010\073\012\067\013\107\015\076\016" +
    "\112\017\110\020\105\021\104\022\100\023\074\025\u014c" +
    "\047\114\001\001\000\002\001\001\000\004\057\u014e\001" +
    "\001\000\002\001\001\000\004\075\u0151\001\001\000\002" +
    "\001\001\000\040\007\047\024\036\026\u0152\030\043\031" +
    "\034\032\050\033\063\035\040\044\060\047\064\050\035" +
    "\051\052\054\061\057\037\063\046\001\001\000\004\076" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\027\041\026\042\u0157\001\001\000" +
    "\002\001\001\000\040\007\047\024\036\026\u0159\030\043" +
    "\031\034\032\050\033\063\035\040\044\060\047\064\050" +
    "\035\051\052\054\061\057\037\063\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\047" +
    "\024\036\026\u0160\030\043\031\034\032\050\033\063\035" +
    "\040\044\060\047\064\050\035\051\052\054\061\057\037" +
    "\063\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected analisis analis_semantico =  new analisis();
    protected Symbol s;
    
    public void syntax_error(Symbol s){
        archivo_ingresado.reportarError("recuperable" ,s.left+1,s.right+1,s.value);
        /*this.s = s;*/
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         archivo_ingresado.reportarError("no recuperable" ,s.left+1,s.right+1,s.value);
    }
    
    public void semantic_error(int left, int right, String mensaje){
        archivo_ingresado.reportarError_Semantico("recuperable",left+1,right+1,mensaje);
    }   

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ESCRIBIR ::= Print Parentesis_a Null Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ESCRIBIR ::= Print Parentesis_a LITERAL_NUMERICO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ESCRIBIR ::= Print Parentesis_a LITERAL_CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // LEER ::= Input Simbolo_input Identificador 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                if(flag){
                                                    String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                    if(tipo_var.toString().equals("string")){
                                                        parser.analis_semantico.init_var(id_var.toString());
                                                    }
                                                    else{
                                                        String mensaje = "Imposible convertir explícitamente de '" + "string" + "' a '"+tipo_var.toString()+"'";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                }else{
                                                    String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                }
                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FUNCION ::= Identificador Parentesis_a PARAMETROS_FUNCION Parentesis_c 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int param_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int param_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object param_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                
                                                String flag= parser.analis_semantico.func_call_params(id_func,param_func);
                                                if(!flag.equals("")){
                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                }
                                                String res= id_func + "("+param_func.toString()+")";
                                                literal litObject =  new literal();
                                                litObject.setTipo(parser.analis_semantico.get_tipo_func(id_func.toString()));
                                                litObject.setResultado(res);
                                                litObject.setTextual(res);
                                                RESULT = litObject;  
                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                                
                                                String flag= parser.analis_semantico.func_call(id_func); 
                                                if(!flag.equals("")){
                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                }
                                                String res= id_func + "()";
                                                literal litObject =  new literal();
                                                litObject.setTipo(parser.analis_semantico.get_tipo_func(id_func.toString()));
                                                litObject.setResultado(res);
                                                litObject.setTextual(res);
                                                RESULT = litObject; 

                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX Coma PARAMETROS_FUNCION 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param1+","+param2+ ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // PARAMETROS_FUNCION_AUX ::= Null 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // PARAMETROS_FUNCION_AUX ::= LITERAL_CADENA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // PARAMETROS_FUNCION_AUX ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DEC_FUNCION ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DEC_FUNCION ::= error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DEC_FUNCION ::= CALL_PROC_TYPE_FUNC CALL_PROC_ID_FUNC Parentesis_a TIPOS_PARAMETRO_FUNCION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;
		int tipo_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tipo_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object tipo_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                                                                                                                //setea el string del tipo a la funcion
                                                                                                                //parser.analis_semantico.dec_func_aux(id_func,tipo_func);
                                                                                                                //validar parametros
                                                                                                                String flag= parser.analis_semantico.dec_func_param(id_func,parametros); 
                                                                                                                if(!flag.equals("")){
                                                                                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                                                                                }  
                                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DEC_FUNCION ::= CALL_PROC_TYPE_FUNC CALL_PROC_ID_FUNC Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;
		int tipo_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tipo_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object tipo_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                                                                                                                //setea el string del tipo a la funcion
                                                                                                                boolean flag = parser.analis_semantico.get_returnFuncion(id_func.toString());
                                                                                                                if(!flag){
                                                                                                                    String mensaje = "Falta el retorno de la función";
                                                                                                                    parser.semantic_error(id_funcleft,id_funcright, mensaje); 
                                                                                                                }
                                                                                                                
                                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CALL_PROC_TYPE_FUNC ::= TIPOS_RETORNO_FUNCION 
            {
              Object RESULT =null;
		int tipo_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipo_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                        parser.analis_semantico.set_temp_type(tipo_func.toString());
                                        RESULT = tipo_func.toString();
                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_TYPE_FUNC",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CALL_PROC_ID_FUNC ::= Identificador 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = id_func;
                            boolean flag= parser.analis_semantico.dec_func(id_func); 
                            if(!flag){
                                String mensaje = "El identificador '" + id_func + "' ya está definido";
                                parser.semantic_error(id_funcleft,id_funcright, mensaje);
                                parser.analis_semantico.set_id_current_block("null");
                            }else{
                                parser.analis_semantico.set_id_current_block(id_func.toString());
                            }
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_ID_FUNC",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // RETORNOS_FUNCION ::= Return EXP_LOGICA_UNA Delimitador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RETORNOS_FUNCION ::= Return EXP_LOGICA Delimitador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                            literal litObject =  new literal();
                                            litObject.setTipo("bool");
                                            litObject.setResultado(lit.toString());
                                            litObject.setTextual(lit.toString());
                                            RESULT = litObject; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_UNA Delimitador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_BIN Delimitador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                    literal litObject =  new literal();
                                                    litObject.setTipo("int");
                                                    litObject.setResultado(lit.toString());
                                                    litObject.setTextual(lit.toString());
                                                    RESULT = litObject; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // RETORNOS_FUNCION ::= Return LITERAL_NUMERICO Delimitador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // RETORNOS_FUNCION ::= Return LITERAL_CADENA Delimitador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX Coma TIPOS_PARAMETRO_FUNCION 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param1+","+param2+ ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPOS_PARAM_FUNCION_AUX ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo + " "+id; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAM_FUNCION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPOS_RETORNO_FUNCION ::= TIPOS_VARIABLES 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPOS_RETORNO_FUNCION ::= T_void 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SWITCH ::= Switch Parentesis_a CALL_PROC_SWITCH Parentesis_c Llave_a CASE_SWITCH CALL_PROC_SWITCH_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CALL_PROC_SWITCH_CIERRE ::= Llave_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_SWITCH_CIERRE",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CALL_PROC_SWITCH ::= PARAM_SWITCH 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                        literal objectparam1=(literal)lit;
                        parser.analis_semantico.new_block_aux("switch",objectparam1.getTipo());
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_SWITCH",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASE_SWITCH ::= Default CALL_PROC_CASE Break CALL_PROC_CASE_CIERRE CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASE_SWITCH ::= Default CALL_PROC_CASE BLOQUE Break CALL_PROC_CASE_CIERRE CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASE_SWITCH ::= Default CALL_PROC_CASE BLOQUE Break CALL_PROC_CASE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASE_SWITCH ::= Default CALL_PROC_CASE Break CALL_PROC_CASE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CASE_SWITCH ::= Case SWITCH_STAMENT CALL_PROC_CASE Break CALL_PROC_CASE_CIERRE CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CASE_SWITCH ::= Case SWITCH_STAMENT CALL_PROC_CASE BLOQUE Break CALL_PROC_CASE_CIERRE CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CASE_SWITCH ::= Case SWITCH_STAMENT CALL_PROC_CASE Break CALL_PROC_CASE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASE_SWITCH ::= Case SWITCH_STAMENT CALL_PROC_CASE BLOQUE Break CALL_PROC_CASE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CALL_PROC_CASE_CIERRE ::= Delimitador 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_CASE_CIERRE",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CALL_PROC_CASE ::= Dos_puntos 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("case");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_CASE",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SWITCH_STAMENT ::= PARAM_SWITCH 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
                        literal objectparam1=(literal)lit;
                        if(!objectparam1.getTipo().equals("null")){
                                if(!objectparam1.getTipo().equals(parser.analis_semantico.get_tipo_currentBlock()) ){
                                    String mensaje = "Case: '" + objectparam1.getTextual() + "' no es compatible con el switch de tipo '" +parser.analis_semantico.get_tipo_currentBlock() + "'" ;
                                    parser.semantic_error(litleft,litright, mensaje); 
                                }
                        }else{
                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                            parser.semantic_error(litleft,litright, mensaje);
                        }
                        RESULT = objectparam1.getTextual();
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_STAMENT",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAM_SWITCH ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAM_SWITCH ::= LITERAL_CADENA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAM_SWITCH ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FOR ::= For Parentesis_a STATEMENT1 Delimitador CONDICION Delimitador ASIG_VARIABLE Parentesis_c CALL_PROC_FOR BLOQUE CALL_PROC_FOR_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CALL_PROC_FOR_CIERRE ::= Llave_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_FOR_CIERRE",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CALL_PROC_FOR ::= Llave_a 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("for");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_FOR",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // STATEMENT1 ::= ASIG_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // STATEMENT1 ::= DEC_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DO_WHILE ::= Do CALL_PROC_DOWHILE BLOQUE Llave_c While Parentesis_a CONDICION CALL_PROC_DOWHILE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CALL_PROC_DOWHILE_CIERRE ::= Parentesis_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_DOWHILE_CIERRE",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CALL_PROC_DOWHILE ::= Llave_a 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("doWhile");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_DOWHILE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WHILE ::= While Parentesis_a CONDICION Parentesis_c CALL_PROC_WHILE BLOQUE CALL_PROC_WHILE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CALL_PROC_WHILE_CIERRE ::= Llave_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_WHILE_CIERRE",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CALL_PROC_WHILE ::= Llave_a 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("while");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_WHILE",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c CALL_PROC_IF BLOQUE CALL_PROC_IF_CIERRE Else CALL_PROC_ELSE BLOQUE CALL_PROC_ELSE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c CALL_PROC_IF BLOQUE CALL_PROC_IF_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CALL_PROC_ELSE_CIERRE ::= Llave_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_ELSE_CIERRE",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CALL_PROC_ELSE ::= Llave_a 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("else");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_ELSE",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CALL_PROC_IF_CIERRE ::= Llave_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_IF_CIERRE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CALL_PROC_IF ::= Llave_a 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("if");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_IF",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectparam1=(literal)exp;
                            if(!objectparam1.getTipo().equals("null")){
                                    if(!objectparam1.getTipo().equals("bool") ){
                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                        parser.semantic_error(expleft,expright, mensaje); 
                                    }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(expleft,expright, mensaje);
                            }
                            RESULT = objectparam1.getTextual();
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BLOQUE ::= RETORNOS_FUNCION 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectparam1=(literal)ret;
                            if(!objectparam1.getTipo().equals("null")){
                                if(!parser.analis_semantico.get_tipo_currentBlock().equals("void")){
                                    if(!parser.analis_semantico.get_tipo_currentBlock().equals("void")){
                                        if(objectparam1.getTipo().equals(parser.analis_semantico.get_tipo_currentBlock()) ){
                                            parser.analis_semantico.set_funcionConReturn();
                                            
                                        }
                                        else{
                                            String mensaje = "Imposible convertir explícitamente de '" + objectparam1.getTipo() + "' a '"+parser.analis_semantico.get_tipo_currentBlock()+"'";
                                            parser.semantic_error(retleft,retright, mensaje);
                                        }
                                    }                         
                                    else{
                                         String mensaje = "El retorno no esta permitido";
                                    parser.semantic_error(retleft,retright, mensaje);
                                    }
                                }
                                else{
                                    String mensaje = "El retorno no esta permitido";
                                    parser.semantic_error(retleft,retright, mensaje);
                                }
                                    
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(retleft,retright, mensaje);
                            }
                            RESULT = objectparam1.getTextual();

                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BLOQUE ::= CALL_PROC_BLOQUE BLOQUE_ANIDADO CALL_PROC_BLOQUE_CIERRE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BLOQUE ::= CALL_PROC_BLOQUE BLOQUE_ANIDADO CALL_PROC_BLOQUE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BLOQUE ::= SENTENCIA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CALL_PROC_BLOQUE_CIERRE ::= Llave_c 
            {
              Object RESULT =null;
		
                parser.analis_semantico.backBlock();
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_BLOQUE_CIERRE",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CALL_PROC_BLOQUE ::= Llave_a 
            {
              Object RESULT =null;
		
                parser.analis_semantico.new_block("block");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_BLOQUE",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUE_ANIDADO ::= SENTENCIA BLOQUE_ANIDADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_ANIDADO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_ANIDADO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_ANIDADO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= error Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= ESCRIBIR Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= LEER Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= FUNCION Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA ::= ASIG_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= DEC_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_logico.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_logico.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = "(" + exp.toString() + ")"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                        literal objectparam1=(literal)param1;
                                                                        if(!objectparam1.getTipo().equals("null")){
                                                                            if(objectparam1.getTipo().equals("bool") ){
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                            }
                                                                        }else{
                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                        }
                                                                        RESULT = param1.toString() + tipo_logico.toString() + param2.toString();
                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                            literal objectparam1=(literal)param1;
                                                                            literal objectparam2=(literal)param2;
                                                                            if(!objectparam1.getTipo().equals("null")){
                                                                                if(!objectparam2.getTipo().equals("null")){
                                                                                     if(objectparam1.getTipo().equals("bool")){
                                                                                        if(objectparam2.getTipo().equals("bool")){

                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operación";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                        parser.semantic_error(param1left,param1right, mensaje); 
                                                                                    }
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                    parser.semantic_error(param2left,param2right, mensaje);
                                                                                }
                                                                            }else{
                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                parser.semantic_error(param1left,param1right, mensaje);
                                                                            }
                                                                            RESULT = param1.toString() + tipo_logico.toString() + param2.toString();
                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_LOGICA_UNA ::= Negacion EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado("!" +exp.toString());
                        litObject.setTextual("!" +exp.toString());
                        RESULT = litObject; 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_LOGICA_UNA ::= EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado(exp.toString());
                        litObject.setTextual(exp.toString());
                        RESULT = litObject; 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_LOGICA_UNA ::= Negacion LITERAL_BOOLEANO 
            {
              Object RESULT =null;
		int lit_negleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lit_negright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit_neg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                            literal objectlit1=(literal)lit;
                                            String tipo= objectlit1.getTipo();
                                            if(!tipo.equals("null")){
                                                if(tipo.equals("bool")){
                                                    String temp= objectlit1.getTextual();
                                                    objectlit1.setTextual("!"+ temp);

                                                }else{
                                                    String mensaje = "'" + objectlit1.getTextual() + "' no permite la operacion '!'";
                                                    parser.semantic_error(lit_negleft,lit_negright, mensaje);
                                                }
                                            }
                                            else{
                                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                                parser.semantic_error(litleft,litright, mensaje);
                                            }
                                            RESULT = objectlit1;
                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_LOGICA_UNA ::= LITERAL_BOOLEANO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_LOGICA_UNA ::= Negacion LITERAL_FUNID 
            {
              Object RESULT =null;
		int lit_negleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lit_negright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit_neg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                            literal objectlit1=(literal)lit;
                                            String tipo= objectlit1.getTipo();
                                            if(!tipo.equals("null")){
                                                if(tipo.equals("bool")){
                                                    String temp= objectlit1.getTextual();
                                                    objectlit1.setTextual("!"+ temp);

                                                }else{
                                                    String mensaje = "El identificador '" + objectlit1.getTextual() + "' no permite la operacion '!'";
                                                    parser.semantic_error(lit_negleft,lit_negright, mensaje);
                                                }
                                            }else{
                                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                                parser.semantic_error(litleft,litright, mensaje);
                                            }
                                            RESULT = objectlit1;
                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_LOGICA_UNA ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectlit1=(literal)lit;
                            String tipo= objectlit1.getTipo();
                            if(tipo.equals("null")){
                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT = objectlit1;
                         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_rel.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_rel.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = "(" + exp.toString() + ")"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    literal objectparam1=(literal)param1;
                                                                                    if(!objectparam1.getTipo().equals("null")){
                                                                                        if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                        parser.semantic_error(param1left,param1right, mensaje);
                                                                                    }
                                                                                    RESULT = param1.toString() + tipo_rel.toString() + param2.toString();
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                         if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                                            if(objectparam2.getTipo().equals("int") || objectparam2.getTipo().equals("float")){

                                                                                                            }else{
                                                                                                                String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operación";
                                                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                                                            }
                                                                                                        }else{
                                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                                            parser.semantic_error(param1left,param1right, mensaje); 
                                                                                                        }
                                                                                                    }else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = param1.toString() + tipo_rel.toString() + param2.toString();
                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAM_EXP_RELACIONAL ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAM_EXP_RELACIONAL ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_arit.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_arit.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = "(" + exp.toString() + ")"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                                        literal objectparam1=(literal)param1;
                                                                                        if(!objectparam1.getTipo().equals("null")){
                                                                                            if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                                            }
                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                                        }
                                                                                        RESULT = param1.toString() + tipo_arit.toString() + param2.toString();
                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                literal objectparam1=(literal)param1;
                                                                                literal objectparam2=(literal)param2;
                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                        if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                            if(objectparam2.getTipo().equals("int") || objectparam2.getTipo().equals("float")){
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operación";
                                                                                                 parser.semantic_error(param1left,param1right, mensaje); 
                                                                                            }
                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                }
                                                                                RESULT = param1.toString() + tipo_arit.toString() + param2.toString();
                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAM_EXP_ARITMETICA ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAM_EXP_ARITMETICA ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAM_EXP_ARITMETICA ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP_ARITMETICA_UNA ::= Unario_negatico Identificador 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    literal litObject =  new literal();
                                    RESULT=null;
                                    if(flag){
                                        String res= parser.analis_semantico.get_tipo_var(id_var.toString());
                                        if(res.equals("int") || res.equals("float")){
                                             if(parser.analis_semantico.var_inicializada(id_var.toString()).equals("true")){
                                                litObject.setTipo(res); //obtener tipo a traves de una funcion 
                                                litObject.setResultado("--"+id_var.toString());
                                                litObject.setTextual("--"+id_var.toString());
                                                RESULT = litObject;
                                             }
                                             else{
                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha inicializado";
                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                             }
                                              
                                        }
                                        else{
                                            String mensaje = "El identificador '" + id_var + "' no permite esta operación";
                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                        }
                                        
                                    }else{
                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                    }
                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP_ARITMETICA_UNA ::= Unario_positivo Identificador 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    literal litObject =  new literal();
                                    RESULT=null;
                                    if(flag){
                                        String res= parser.analis_semantico.get_tipo_var(id_var.toString());
                                        if(res.equals("int") || res.equals("float")){
                                            if(parser.analis_semantico.var_inicializada(id_var.toString()).equals("true")){
                                                litObject.setTipo(res); //obtener tipo a traves de una funcion 
                                                litObject.setResultado("++"+id_var.toString());
                                                litObject.setTextual("++"+id_var.toString());
                                                RESULT = litObject;  
                                            }else{
                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha inicializado";
                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                            }
                                            
                                        }
                                        else{
                                            String mensaje = "El identificador '" + id_var + "' no permite esta operación";
                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                        }
                                        
                                    }else{
                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                    }


                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CAST_STRING_INT ::= String_to_int Parentesis_a LITERAL_FUNID Parentesis_c 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                     literal objectparam1=(literal)lit;
                                                                     if(!objectparam1.getTipo().equals("null")){
                                                                        if(objectparam1.getTipo().equals("string") || objectparam1.getTipo().equals("char")){

                                                                        }else{
                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                            parser.semantic_error(litleft,litright, mensaje); 
                                                                        }
                                                                     }else{
                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                        parser.semantic_error(litleft,litright, mensaje);
                                                                     }
                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CAST_STRING_INT ::= String_to_int Parentesis_a LITERAL_CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIG_VARIABLE ::= Identificador Corchete_a POSICION_ARREGLO Corchete_c Asignacion POSICION_ARREGLO 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                if(flag){
                                                                    String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                    if(tipo_var.toString().equals("array")){
                                                                        parser.analis_semantico.init_var(id_var.toString());
                                                                    }
                                                                    else{
                                                                        String mensaje = "El identificador '" + id_var + "' no es un array";
                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                    }
                                                                }else{
                                                                    String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }                                       
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIG_VARIABLE ::= Identificador Asignacion CAST_STRING_INT 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                if(flag){
                                                    String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                    if(tipo_var.toString().equals("int")){
                                                        parser.analis_semantico.init_var(id_var.toString());
                                                    }
                                                    else{
                                                        String mensaje = "Imposible convertir explícitamente de '" + tipo_var.toString() + "' a 'int'";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                }else{
                                                    String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                }
                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIG_VARIABLE ::= Identificador Asignacion OPERADOR_TERNARIO 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }
                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                               String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }
                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }

                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                            if(flag){
                                                                String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                                literal litObject=(literal)lit;
                                                                if(tipo_var.toString().equals(litObject.getTipo())){
                                                                    parser.analis_semantico.init_var(id_var.toString());
                                                                }
                                                                else{
                                                                    String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                }
                                                            }else{
                                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                            }

                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG_VARIABLE ::= Identificador Asignacion LITERAL_CADENA 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(flag){
                                                        String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                        literal litObject=(literal)lit;
                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                            parser.analis_semantico.init_var(id_var.toString());
                                                        }
                                                        else{
                                                            String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                        }
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_VARIABLE ::= Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(flag){
                                                        String tipo_var=parser.analis_semantico.get_tipo_var(id_var.toString());
                                                        literal litObject=(literal)lit;
                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                            parser.analis_semantico.init_var(id_var.toString());
                                                        }
                                                        else{
                                                            String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                        }
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                    }
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_VARIABLE ::= Identificador Asignacion Null 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    if(flag){
                                        parser.analis_semantico.init_var(id_var.toString());
                                    }else{
                                        String mensaje = "El identificador '" + id_var.toString() + "' no se ha definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                    }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX Coma PARAMETROS_ARREGLO 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        literal objectparam1=(literal)param1;
                                        if(!objectparam1.getTipo().equals("null")){
                                                if(!objectparam1.getTipo().equals("int") ){
                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                    parser.semantic_error(param1left,param1right, mensaje); 
                                                }
                                        }else{
                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                            parser.semantic_error(param1left,param1right, mensaje);
                                        }
                                        RESULT = objectparam1.getTextual() + ","+ param2.toString(); 

                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
                            literal objectparam1=(literal)param1;
                            if(!objectparam1.getTipo().equals("null")){
                                    if(!objectparam1.getTipo().equals("int") ){
                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                        parser.semantic_error(param1left,param1right, mensaje); 
                                    }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(param1left,param1right, mensaje);
                            }
                            RESULT = objectparam1.getTextual(); 
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS_ARREGLO_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal litObject =  new literal();
                            litObject.setTipo("int");
                            litObject.setResultado(lit.toString());
                            litObject.setTextual(lit.toString());
                            RESULT = litObject; 
                               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS_ARREGLO_AUX ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectparam1=(literal)lit;
                            if(!objectparam1.getTipo().equals("null")){
                                if(objectparam1.getTipo().equals("int")){

                                }else{
                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                    parser.semantic_error(litleft,litright, mensaje);
                                }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT=objectparam1;
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS_ARREGLO_AUX ::= Int 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            literal litObject =  new literal();
            litObject.setTipo("int");
            litObject.setResultado(lit);
            litObject.setTextual(lit.toString());
            RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // POSICION_ARREGLO ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // POSICION_ARREGLO ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectparam1=(literal)lit;
                            if(!objectparam1.getTipo().equals("null")){
                                if(objectparam1.getTipo().equals("int")){

                                }else{
                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                    parser.semantic_error(litleft,litright, mensaje);
                                }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT=objectparam1;
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // POSICION_ARREGLO ::= TIPO_ARREGLO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // POSICION_ARREGLO ::= Int 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		      
                literal litObject =  new literal();
                litObject.setTipo("int");
                litObject.setResultado(lit);
                litObject.setTextual(lit.toString());
                RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Corchete_c Asignacion Llave_a PARAMETROS_ARREGLO Llave_c 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("array")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir explícitamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Corchete_c Asignacion Null 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir explícitamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Corchete_c 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir explícitamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
                                                                                                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion CAST_STRING_INT 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    if(tipo_var.toString().equals("int")){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "Imposible convertir explícitamente a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                }   
                                                                                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion OPERADOR_TERNARIO 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        literal objectlit1=(literal)exp;
                                                                                        String tipo= objectlit1.getTipo();
                                                                                        if(!tipo.equals("null")){
                                                                                            if(tipo_var.toString().equals(tipo)){
                                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                            }else{
                                                                                                String mensaje = "Imposible convertir explícitamente de '" + tipo + "' a '"+tipo_var.toString()+"'";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }

                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    if(tipo_var.toString().equals("bool")){
                                                                                        parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "Imposible convertir explícitamente a '"+tipo_var.toString()+"'";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                } 
                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                        boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                        if(!flag){
                                                                            literal objectlit1=(literal)exp;
                                                                            String tipo= objectlit1.getTipo();
                                                                            if(tipo_var.toString().equals(tipo) ){
                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                            }
                                                                            else{
                                                                                String mensaje = "Imposible convertir explícitamente de '" + tipo + "' a '"+tipo_var.toString()+"'";
                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                            }
                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                        }
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(tipo_var.toString().equals("int") || tipo_var.toString().equals("int")){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }else{
                                                                                            String mensaje = "Imposible convertir explícitamente a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_unaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_unaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp_una = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(exp_una!=null){
                                                                                            literal litObject=(literal)exp_una;
                                                                                            if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);    
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }
                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_CADENA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    literal litObject=(literal)lit;
                                                                                    if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                        parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                    }
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                } 
                                                                                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        literal litObject=(literal)lit;
                                                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }   
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(!flag){
                                                        parser.analis_semantico.setVar_Aux(id_var.toString(),tipo_var.toString());
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                    }
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADOR_TERNARIO ::= Corchete_a Parentesis_a EXP_LOGICA Parentesis_c Sig_pregunta PARAM_OPERADOR_TERNARIO Dos_puntos PARAM_OPERADOR_TERNARIO Corchete_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                literal litObject =  new literal();
                                                                                                litObject.setTipo("null");
                                                                                                litObject.setResultado("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                litObject.setTextual("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                        if(objectparam1.getTipo().equals(objectparam2.getTipo())){
                                                                                                                litObject.setTipo(objectparam1.getTipo());    
                                                                                                        }
                                                                                                        else{
                                                                                                            String mensaje = "Los tipos de retorno del 'IF ternario' no coinciden";
                                                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = litObject;     
                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_TERNARIO ::= Corchete_a Parentesis_a EXP_LOGICA_UNA Parentesis_c Sig_pregunta PARAM_OPERADOR_TERNARIO Dos_puntos PARAM_OPERADOR_TERNARIO Corchete_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                literal objectexp=(literal)exp;
                                                                                                literal litObject =  new literal();
                                                                                                litObject.setTipo("null");
                                                                                                litObject.setResultado("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                litObject.setTextual("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                        if(objectexp.getTipo().equals("bool")){
                                                                                                            if(objectparam1.getTipo().equals(objectparam2.getTipo())){
                                                                                                                    litObject.setTipo(objectparam1.getTipo());
                                                                                                                    
                                                                                                            }
                                                                                                            else{
                                                                                                                String mensaje = "Los tipos de retorno del 'IF ternario' no coinciden";
                                                                                                                parser.semantic_error(param1left,param1right, mensaje);
                                                                                                            } 
                                                                                                        }else{
                                                                                                            String mensaje = "El identificador '" + objectexp.getTextual() + "' no permite esta operación";
                                                                                                            parser.semantic_error(expleft,expright, mensaje); 
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(expleft,expright, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = litObject;     
                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM_OPERADOR_TERNARIO ::= EXP_LOGICA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado(lit.toString());
                        litObject.setTextual(lit.toString());
                        RESULT = litObject; 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAM_OPERADOR_TERNARIO ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = lit; 
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAM_OPERADOR_TERNARIO ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAM_OPERADOR_TERNARIO ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM_OPERADOR_TERNARIO ::= LITERAL_CADENA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAM_OPERADOR_TERNARIO ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_ARREGLO ::= Identificador Corchete_a LITERAL_FUNID Corchete_c 
            {
              Object RESULT =null;
		int id_arregloleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id_arregloright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id_arreglo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                        String res= parser.analis_semantico.get_tipo_var(id_arreglo.toString());
                                                                        literal litObject2 =  new literal();
                                                                        litObject2.setTipo("null");
                                                                        if(res!="null"){
                                                                            if(res=="array"){
                                                                                literal litObject3=(literal)id;
                                                                                if(litObject3.getTipo().equals("int")){

                                                                                    literal litObject4 =  new literal();
                                                                                    litObject4.setTipo("int"); //obtener tipo a traves de una funcion 
                                                                                    litObject4.setResultado(id_arreglo+ "["+litObject4.getTextual()+"]");
                                                                                    litObject4.setTextual(id_arreglo+ "["+litObject4.getTextual()+"]");
                                                                                

                                                                                }
                                                                                else{
                                                                                    String mensaje = "Imposible convertir explícitamente a int'" + litObject3.getTextual()+"'" ;
                                                                                    parser.semantic_error(idleft,idright, mensaje);
                                                                                }
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + id_arreglo + "' no es un array";
                                                                                parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                            }

                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_arreglo + "' no se ha declarado";
                                                                            parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                        }
                                                                        RESULT = litObject2;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_ARREGLO ::= Identificador Corchete_a LITERAL_NUMERICO Corchete_c 
            {
              Object RESULT =null;
		int id_arregloleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id_arregloright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id_arreglo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                                                                        String res= parser.analis_semantico.get_tipo_var(id_arreglo.toString());
                                                                        literal litObject2 =  new literal();
                                                                        litObject2.setTipo("null");
                                                                        if(res!="null"){
                                                                            if(res=="array"){
                                                                                literal litObject1=(literal)num;
                                                                                litObject2.setTipo("int"); 
                                                                                litObject2.setResultado(id_arreglo+ "["+litObject1.getTextual()+"]");
                                                                                litObject2.setTextual(id_arreglo+ "["+litObject1.getTextual()+"]");
                                                                               
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + id_arreglo + "' no es un array";
                                                                                parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                            }

                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_arreglo + "' no se ha declarado";
                                                                            parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                        }
                                                                         RESULT = litObject2;

                                                                        
                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LITERAL_FUNID ::= FUNCION 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo(parser.analis_semantico.get_tipo_func(lit.toString())); //obtener tipo a traves de una funcion 
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_FUNID",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LITERAL_FUNID ::= Identificador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo(parser.analis_semantico.get_tipo_var(lit.toString())); //obtener tipo a traves de una funcion 
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    if(litObject.getTipo()!="null"){
                        if(parser.analis_semantico.var_inicializada(lit.toString()).equals("false")){
                            String mensaje = "El identificador '" + lit.toString() + "' no se ha inicializado";
                            parser.semantic_error(litleft,litright, mensaje);
                        }
                    }
                    RESULT = litObject;  
                     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_FUNID",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LITERAL_BOOLEANO ::= False 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("bool");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LITERAL_BOOLEANO ::= True 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("bool");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LITERAL_CADENA ::= Character 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("char");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_CADENA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LITERAL_CADENA ::= String 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("string");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_CADENA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LITERAL_NUMERICO ::= TIPO_ARREGLO 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = literal; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LITERAL_NUMERICO ::= Float 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    literal litObject =  new literal();
                    litObject.setTipo("float");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LITERAL_NUMERICO ::= Int 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
                    literal litObject =  new literal();
                    litObject.setTipo("int");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_VARIABLES ::= T_string 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_VARIABLES ::= T_char 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_VARIABLES ::= T_bool 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= T_float 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= T_int 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_LOGICOS ::= Disyuncion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_LOGICOS ::= Conjuncion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_RELACIONALES ::= Mayor_igual 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_RELACIONALES ::= Menor_igual 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_RELACIONALES ::= Igual 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_RELACIONALES ::= Mayor 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS_RELACIONALES ::= Menor 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS_ARITMETICOS ::= Potencia 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPOS_ARITMETICOS ::= Division 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPOS_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPOS_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DEC_FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= T_int CALL_PROC_MAIN Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;
		 parser.analis_semantico.dec_main(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CALL_PROC_MAIN ::= Main 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    RESULT = id_func;
                    boolean flag= parser.analis_semantico.dec_func(id_func); 
                    if(!flag){
                        String mensaje = "La variable '" + id_func + "' ya está definida";
                        parser.semantic_error(id_funcleft,id_funcright, mensaje);
                        parser.analis_semantico.set_id_current_block("null");
                    }else{
                        parser.analis_semantico.set_id_current_block(id_func.toString());
                    }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_MAIN",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

