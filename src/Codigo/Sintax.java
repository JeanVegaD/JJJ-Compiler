
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 27 21:47:51 CST 2020
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;
import Codigo.archivo_ingresado;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 27 21:47:51 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\002\011\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\005\006" +
    "\000\002\005\006\000\002\047\004\000\002\047\006\000" +
    "\002\047\006\000\002\047\006\000\002\047\006\000\002" +
    "\047\006\000\002\047\006\000\002\047\007\000\002\047" +
    "\011\000\002\047\013\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\051\003\000\002" +
    "\051\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\010\000\002\053\006\000" +
    "\002\053\006\000\002\015\004\000\002\015\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\007" +
    "\000\002\017\007\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\007\000\002\021" +
    "\007\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\022\003\000\002\022\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\007\000\002\023\007\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\026\003\000\002\026\004\000\002\026" +
    "\003\000\002\025\003\000\002\025\003\000\002\027\011" +
    "\000\002\027\015\000\002\030\011\000\002\031\012\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\010\000\002\034\007\000\002\034\011" +
    "\000\002\034\010\000\002\034\006\000\002\034\007\000" +
    "\002\034\010\000\002\034\007\000\002\032\011\000\002" +
    "\035\003\000\002\035\003\000\002\036\004\000\002\036" +
    "\006\000\002\037\003\000\002\037\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\040\011\000\002\040\012\000\002\040\004\000\002\040" +
    "\004\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\003\000\002\043\005\000\002" +
    "\044\005\000\002\044\006\000\002\045\005\000\002\046" +
    "\006\000\002\046\006\000\002\046\006\000\002\046\006" +
    "\000\002\046\006\000\002\046\006\000\002\046\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\020\003\015\057\012\060\005\061\016\062" +
    "\014\063\006\064\004\001\002\000\004\066\uff80\001\002" +
    "\000\004\066\uffef\001\002\000\004\066\uffec\001\002\000" +
    "\020\003\015\057\012\060\005\061\016\062\014\063\006" +
    "\064\004\001\002\000\004\066\u011a\001\002\000\004\002" +
    "\u0119\001\002\000\006\010\021\066\ufff0\001\002\000\004" +
    "\066\uff7f\001\002\000\004\066\uffed\001\002\000\006\006" +
    "\017\021\020\001\002\000\004\066\uffee\001\002\000\020" +
    "\003\uff70\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064" +
    "\uff70\001\002\000\020\003\uff71\057\uff71\060\uff71\061\uff71" +
    "\062\uff71\063\uff71\064\uff71\001\002\000\004\020\022\001" +
    "\002\000\004\021\023\001\002\000\004\005\024\001\002" +
    "\000\040\003\045\011\044\012\046\014\037\025\042\027" +
    "\051\030\053\031\047\057\025\060\005\061\016\062\014" +
    "\063\006\065\026\066\034\001\002\000\004\066\ufff0\001" +
    "\002\000\004\020\u0113\001\002\000\044\003\uffa1\006\uffa1" +
    "\011\uffa1\012\uffa1\014\uffa1\025\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\033\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\065\uffa1\066\uffa1\001\002\000\004\004\u0112\001\002\000" +
    "\044\003\045\006\uff99\011\044\012\046\014\037\025\042" +
    "\027\051\030\053\031\047\033\uff99\057\025\060\005\061" +
    "\016\062\014\063\006\065\026\066\034\001\002\000\004" +
    "\004\u0110\001\002\000\044\003\uff9f\006\uff9f\011\uff9f\012" +
    "\uff9f\014\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f\066" +
    "\uff9f\001\002\000\010\007\u0104\016\u0103\020\162\001\002" +
    "\000\004\006\u0102\001\002\000\044\003\uffa2\006\uffa2\011" +
    "\uffa2\012\uffa2\014\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\033\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\065" +
    "\uffa2\066\uffa2\001\002\000\004\020\363\001\002\000\004" +
    "\066\331\001\002\000\044\003\uffa0\006\uffa0\011\uffa0\012" +
    "\uffa0\014\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\065\uffa0\066" +
    "\uffa0\001\002\000\004\020\317\001\002\000\004\004\316" +
    "\001\002\000\032\015\305\020\063\023\070\024\075\044" +
    "\062\045\103\056\100\066\073\067\202\070\171\071\074" +
    "\072\067\001\002\000\006\004\277\006\276\001\002\000" +
    "\004\013\274\001\002\000\004\020\234\001\002\000\004" +
    "\004\233\001\002\000\004\005\224\001\002\000\006\006" +
    "\uff97\033\uff97\001\002\000\004\020\060\001\002\000\004" +
    "\004\057\001\002\000\004\004\056\001\002\000\044\003" +
    "\uff9e\006\uff9e\011\uff9e\012\uff9e\014\uff9e\025\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\033\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\065\uff9e\066\uff9e\001\002\000\044\003\uffa5" +
    "\006\uffa5\011\uffa5\012\uffa5\014\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\033\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\065\uffa5\066\uffa5\001\002\000\024\020\063\023" +
    "\070\024\075\044\062\045\103\056\100\066\073\071\074" +
    "\072\067\001\002\000\014\004\uffae\021\uffae\022\uffae\054" +
    "\uffae\055\uffae\001\002\000\004\066\223\001\002\000\024" +
    "\020\063\023\070\024\075\044\062\045\103\056\100\066" +
    "\073\071\074\072\067\001\002\000\046\004\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\001\002\000\044\004\uffb9\021" +
    "\uffb9\022\uffb9\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\001\002\000\004\021\uff96\001\002" +
    "\000\046\004\uffea\017\uffea\021\uffea\022\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\046\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\001" +
    "\002\000\014\004\uffe6\021\uffe6\022\uffe6\054\uffe6\055\uffe6" +
    "\001\002\000\044\004\uffb7\021\uffb7\022\uffb7\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\001" +
    "\002\000\010\021\uff95\054\210\055\211\001\002\000\052" +
    "\004\uffe4\016\163\017\uffe4\020\162\021\uffe4\022\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\001\002\000\046\004\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\001\002\000\014\004\uffe5\021\uffe5\022\uffe5\054" +
    "\uffe5\055\uffe5\001\002\000\014\004\uffac\021\uffac\022\uffac" +
    "\054\uffac\055\uffac\001\002\000\016\046\146\047\147\050" +
    "\154\051\153\052\150\053\151\001\002\000\022\020\137" +
    "\023\070\024\075\044\062\045\103\066\073\071\074\072" +
    "\067\001\002\000\044\004\uffb0\021\uffb0\022\uffb0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\046\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb0\055\uffb0" +
    "\001\002\000\030\004\uffb6\021\uffb6\022\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\001\002\000\004\066\135\001\002\000\016\036\117\037" +
    "\116\040\114\041\121\042\120\043\115\001\002\000\004" +
    "\021\107\001\002\000\046\004\uffe3\017\uffe3\021\uffe3\022" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\001\002\000\004\005\110\001\002\000\040" +
    "\003\045\011\044\012\046\014\037\025\042\027\051\030" +
    "\053\031\047\057\025\060\005\061\016\062\014\063\006" +
    "\065\026\066\034\001\002\000\004\006\112\001\002\000" +
    "\044\003\uff92\006\uff92\011\uff92\012\uff92\014\uff92\025\uff92" +
    "\027\uff92\030\uff92\031\uff92\033\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\065\uff92\066\uff92\001\002\000\016" +
    "\020\124\044\062\045\103\066\073\071\074\072\067\001" +
    "\002\000\016\020\ufffc\044\ufffc\045\ufffc\066\ufffc\071\ufffc" +
    "\072\ufffc\001\002\000\016\020\ufff9\044\ufff9\045\ufff9\066" +
    "\ufff9\071\ufff9\072\ufff9\001\002\000\016\020\ufffd\044\ufffd" +
    "\045\ufffd\066\ufffd\071\ufffd\072\ufffd\001\002\000\016\020" +
    "\ufffe\044\ufffe\045\ufffe\066\ufffe\071\ufffe\072\ufffe\001\002" +
    "\000\016\020\ufffa\044\ufffa\045\ufffa\066\ufffa\071\ufffa\072" +
    "\ufffa\001\002\000\016\020\ufffb\044\ufffb\045\ufffb\066\ufffb" +
    "\071\ufffb\072\ufffb\001\002\000\046\004\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\001\002\000\032\004\uffbd\017\uffbd" +
    "\021\uffbd\022\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\001\002\000\016\020\124" +
    "\044\062\045\103\066\073\071\074\072\067\001\002\000" +
    "\046\004\uffbe\017\uffbe\021\uffbe\022\uffbe\036\117\037\116" +
    "\040\114\041\121\042\120\043\115\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002" +
    "\000\046\004\uffc1\017\uffc1\021\uffc1\022\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\001" +
    "\002\000\046\004\uffbf\017\uffbf\021\uffbf\022\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\001\002\000\004\021\131\001\002\000\046\004\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\036\117\037\116\040\114\041\121" +
    "\042\120\043\115\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002\000\016\020\124" +
    "\044\062\045\103\066\073\071\074\072\067\001\002\000" +
    "\032\004\uffba\017\uffba\021\uffba\022\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\001" +
    "\002\000\046\004\uffbb\017\uffbb\021\uffbb\022\uffbb\036\117" +
    "\037\116\040\114\041\121\042\120\043\115\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\046\004\uffc2\017\uffc2\021\uffc2\022\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\001\002\000\014\004\uffad\021\uffad\022\uffad\054\uffad" +
    "\055\uffad\001\002\000\016\020\137\044\062\045\103\066" +
    "\073\071\074\072\067\001\002\000\014\004\uffab\021\uffab" +
    "\022\uffab\054\uffab\055\uffab\001\002\000\044\004\uffaf\021" +
    "\uffaf\022\uffaf\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffaf\055\uffaf\001\002\000\044\004\uffb8\021\uffb8" +
    "\022\uffb8\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\001\002\000\020\021\131\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\004" +
    "\021\145\001\002\000\030\004\uffb3\021\uffb3\022\uffb3\046" +
    "\146\047\147\050\154\051\153\052\150\053\151\054\uffb3" +
    "\055\uffb3\001\002\000\016\020\ufff8\044\ufff8\045\ufff8\066" +
    "\ufff8\071\ufff8\072\ufff8\001\002\000\016\020\ufff7\044\ufff7" +
    "\045\ufff7\066\ufff7\071\ufff7\072\ufff7\001\002\000\016\020" +
    "\ufff4\044\ufff4\045\ufff4\066\ufff4\071\ufff4\072\ufff4\001\002" +
    "\000\016\020\ufff3\044\ufff3\045\ufff3\066\ufff3\071\ufff3\072" +
    "\ufff3\001\002\000\016\020\137\044\062\045\103\066\073" +
    "\071\074\072\067\001\002\000\016\020\ufff5\044\ufff5\045" +
    "\ufff5\066\ufff5\071\ufff5\072\ufff5\001\002\000\016\020\ufff6" +
    "\044\ufff6\045\ufff6\066\ufff6\071\ufff6\072\ufff6\001\002\000" +
    "\014\004\uffb1\021\uffb1\022\uffb1\054\uffb1\055\uffb1\001\002" +
    "\000\030\004\uffb2\021\uffb2\022\uffb2\046\146\047\147\050" +
    "\154\051\153\052\150\053\151\054\uffb2\055\uffb2\001\002" +
    "\000\016\020\137\044\062\045\103\066\073\071\074\072" +
    "\067\001\002\000\014\004\uffb4\021\uffb4\022\uffb4\054\uffb4" +
    "\055\uffb4\001\002\000\030\004\uffb5\021\uffb5\022\uffb5\046" +
    "\146\047\147\050\154\051\153\052\150\053\151\054\uffb5" +
    "\055\uffb5\001\002\000\034\015\201\020\063\021\170\023" +
    "\070\024\075\044\062\045\103\056\100\066\073\067\202" +
    "\070\171\071\074\072\067\001\002\000\010\066\073\071" +
    "\074\072\067\001\002\000\004\017\167\001\002\000\004" +
    "\017\166\001\002\000\050\004\uffe2\017\uffe2\021\uffe2\022" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\001\002\000\050\004\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\001\002\000\050\004" +
    "\uff66\017\uff66\021\uff66\022\uff66\035\uff66\036\uff66\037\uff66" +
    "\040\uff66\041\uff66\042\uff66\043\uff66\046\uff66\047\uff66\050" +
    "\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\001\002" +
    "\000\010\004\uffe7\021\uffe7\022\uffe7\001\002\000\036\021" +
    "\uff6f\022\uff6f\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\001\002\000\006\021\uff6a\022\uff6a\001\002\000\036" +
    "\021\uff6b\022\uff6b\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\001\002\000\012\021\uff69\022\uff69\054\210\055" +
    "\211\001\002\000\006\021\uff68\022\205\001\002\000\004" +
    "\021\204\001\002\000\022\021\uff6c\022\uff6c\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\006" +
    "\021\uff6d\022\uff6d\001\002\000\010\004\uffe8\021\uffe8\022" +
    "\uffe8\001\002\000\006\021\uff6e\022\uff6e\001\002\000\050" +
    "\004\uff65\017\uff65\021\uff65\022\uff65\035\uff65\036\uff65\037" +
    "\uff65\040\uff65\041\uff65\042\uff65\043\uff65\046\uff65\047\uff65" +
    "\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65\001" +
    "\002\000\032\015\201\020\063\023\070\024\075\044\062" +
    "\045\103\056\100\066\073\067\202\070\171\071\074\072" +
    "\067\001\002\000\004\021\uff67\001\002\000\024\020\063" +
    "\023\070\024\075\044\062\045\103\056\100\066\073\071" +
    "\074\072\067\001\002\000\024\020\ufff2\023\ufff2\024\ufff2" +
    "\044\ufff2\045\ufff2\056\ufff2\066\ufff2\071\ufff2\072\ufff2\001" +
    "\002\000\024\020\ufff1\023\ufff1\024\ufff1\044\ufff1\045\ufff1" +
    "\056\ufff1\066\ufff1\071\ufff1\072\ufff1\001\002\000\010\004" +
    "\uffa9\021\uffa9\022\uffa9\001\002\000\014\004\uffaa\021\uffaa" +
    "\022\uffaa\054\210\055\211\001\002\000\004\021\217\001" +
    "\002\000\006\054\210\055\211\001\002\000\010\021\145" +
    "\054\uffac\055\uffac\001\002\000\014\004\uffa8\021\uffa8\022" +
    "\uffa8\054\210\055\211\001\002\000\024\020\063\023\070" +
    "\024\075\044\062\045\103\056\100\066\073\071\074\072" +
    "\067\001\002\000\010\004\uffa6\021\uffa6\022\uffa6\001\002" +
    "\000\014\004\uffa7\021\uffa7\022\uffa7\054\210\055\211\001" +
    "\002\000\046\004\uffc3\017\uffc3\021\uffc3\022\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\001\002\000\040\003\045\011\044\012\046\014\037\025" +
    "\042\027\051\030\053\031\047\057\025\060\005\061\016" +
    "\062\014\063\006\065\026\066\034\001\002\000\004\006" +
    "\226\001\002\000\004\030\227\001\002\000\004\020\230" +
    "\001\002\000\024\020\063\023\070\024\075\044\062\045" +
    "\103\056\100\066\073\071\074\072\067\001\002\000\004" +
    "\021\232\001\002\000\044\003\uff91\006\uff91\011\uff91\012" +
    "\uff91\014\uff91\025\uff91\027\uff91\030\uff91\031\uff91\033\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\065\uff91\066" +
    "\uff91\001\002\000\044\003\uffa3\006\uffa3\011\uffa3\012\uffa3" +
    "\014\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\065\uffa3\066\uffa3" +
    "\001\002\000\014\066\243\067\235\070\241\071\244\072" +
    "\240\001\002\000\006\021\uff8e\035\uff8e\001\002\000\006" +
    "\021\uff8b\035\uff8b\001\002\000\006\021\uff8a\035\uff8a\001" +
    "\002\000\006\021\uff8f\035\uff8f\001\002\000\006\021\uff8d" +
    "\035\uff8d\001\002\000\004\021\245\001\002\000\012\016" +
    "\163\020\162\021\uff8c\035\uff8c\001\002\000\006\021\uff90" +
    "\035\uff90\001\002\000\004\005\246\001\002\000\006\032" +
    "\250\034\251\001\002\000\004\006\273\001\002\000\014" +
    "\066\243\067\235\070\241\071\244\072\240\001\002\000" +
    "\004\035\252\001\002\000\042\003\045\011\044\012\046" +
    "\014\037\025\042\027\051\030\053\031\047\033\253\057" +
    "\025\060\005\061\016\062\014\063\006\065\026\066\034" +
    "\001\002\000\004\004\260\001\002\000\004\033\255\001" +
    "\002\000\004\004\256\001\002\000\010\006\uff84\032\250" +
    "\034\251\001\002\000\004\006\uff83\001\002\000\010\006" +
    "\uff85\032\250\034\251\001\002\000\004\006\uff82\001\002" +
    "\000\004\035\263\001\002\000\042\003\045\011\044\012" +
    "\046\014\037\025\042\027\051\030\053\031\047\033\264" +
    "\057\025\060\005\061\016\062\014\063\006\065\026\066" +
    "\034\001\002\000\004\004\271\001\002\000\004\033\266" +
    "\001\002\000\004\004\267\001\002\000\010\006\uff89\032" +
    "\250\034\251\001\002\000\004\006\uff87\001\002\000\010" +
    "\006\uff88\032\250\034\251\001\002\000\004\006\uff86\001" +
    "\002\000\044\003\uff81\006\uff81\011\uff81\012\uff81\014\uff81" +
    "\025\uff81\027\uff81\030\uff81\031\uff81\033\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\063\uff81\065\uff81\066\uff81\001\002" +
    "\000\004\066\275\001\002\000\004\004\uff64\001\002\000" +
    "\044\003\uff9a\006\uff9a\011\uff9a\012\uff9a\014\uff9a\025\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\033\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\065\uff9a\066\uff9a\001\002\000\044" +
    "\003\uff9b\006\uff9b\011\uff9b\012\uff9b\014\uff9b\025\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\033\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\065\uff9b\066\uff9b\001\002\000\034\004" +
    "\315\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\004\004\314\001\002\000\034\004\313\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\010" +
    "\004\312\054\210\055\211\001\002\000\020\004\311\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002" +
    "\000\004\004\310\001\002\000\004\004\307\001\002\000" +
    "\006\006\uff7a\033\uff7a\001\002\000\006\006\uff78\033\uff78" +
    "\001\002\000\006\006\uff77\033\uff77\001\002\000\006\006" +
    "\uff74\033\uff74\001\002\000\006\006\uff76\033\uff76\001\002" +
    "\000\006\006\uff75\033\uff75\001\002\000\006\006\uff79\033" +
    "\uff79\001\002\000\044\003\uff9c\006\uff9c\011\uff9c\012\uff9c" +
    "\014\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\065\uff9c\066\uff9c" +
    "\001\002\000\024\020\063\023\070\024\075\044\062\045" +
    "\103\056\100\066\073\071\074\072\067\001\002\000\004" +
    "\021\321\001\002\000\004\005\322\001\002\000\040\003" +
    "\045\011\044\012\046\014\037\025\042\027\051\030\053" +
    "\031\047\057\025\060\005\061\016\062\014\063\006\065" +
    "\026\066\034\001\002\000\004\006\324\001\002\000\046" +
    "\003\uff94\006\uff94\011\uff94\012\uff94\014\uff94\025\uff94\026" +
    "\325\027\uff94\030\uff94\031\uff94\033\uff94\057\uff94\060\uff94" +
    "\061\uff94\062\uff94\063\uff94\065\uff94\066\uff94\001\002\000" +
    "\004\005\326\001\002\000\040\003\045\011\044\012\046" +
    "\014\037\025\042\027\051\030\053\031\047\057\025\060" +
    "\005\061\016\062\014\063\006\065\026\066\034\001\002" +
    "\000\004\006\330\001\002\000\044\003\uff93\006\uff93\011" +
    "\uff93\012\uff93\014\uff93\025\uff93\027\uff93\030\uff93\031\uff93" +
    "\033\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\065" +
    "\uff93\066\uff93\001\002\000\010\004\uffe0\007\333\016\332" +
    "\001\002\000\016\020\124\044\062\045\103\066\073\071" +
    "\346\072\067\001\002\000\030\020\063\023\070\024\075" +
    "\044\062\045\103\056\100\066\073\067\202\070\171\071" +
    "\074\072\067\001\002\000\034\004\uffdf\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000\004\004\uffda" +
    "\001\002\000\034\004\uffdd\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\010\004\uffdb\054\210\055" +
    "\211\001\002\000\020\004\uffdc\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\001\002\000\004\004\uffde\001" +
    "\002\000\006\004\uffd3\017\uffd3\001\002\000\022\004\uffd4" +
    "\017\uffd4\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\001\002\000\022\004\uffd5\017\uffd5\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\001\002\000\004\017" +
    "\347\001\002\000\022\004\uffd6\017\uffd6\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002\000\006\004" +
    "\uffd9\007\350\001\002\000\006\015\352\016\351\001\002" +
    "\000\016\020\124\044\062\045\103\066\073\071\355\072" +
    "\067\001\002\000\004\004\uffd8\001\002\000\006\017\uffd0" +
    "\022\uffd0\001\002\000\022\017\uffd1\022\uffd1\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002\000\022" +
    "\017\uffd2\022\uffd2\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\001\002\000\004\017\362\001\002\000\006" +
    "\017\uffcf\022\360\001\002\000\016\020\124\044\062\045" +
    "\103\066\073\071\355\072\067\001\002\000\004\017\uffce" +
    "\001\002\000\004\004\uffd7\001\002\000\032\015\371\020" +
    "\063\023\070\024\075\044\062\045\103\056\100\066\073" +
    "\067\202\070\171\071\074\072\067\001\002\000\034\021" +
    "\u0101\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\004\021\u0100\001\002\000\034\021\377\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\010" +
    "\021\376\054\210\055\211\001\002\000\020\021\375\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002" +
    "\000\004\021\374\001\002\000\004\021\373\001\002\000" +
    "\004\004\uff63\001\002\000\004\004\uff61\001\002\000\004" +
    "\004\uff60\001\002\000\004\004\uff5e\001\002\000\004\004" +
    "\uff5d\001\002\000\004\004\uff5f\001\002\000\004\004\uff62" +
    "\001\002\000\004\002\000\001\002\000\016\020\124\044" +
    "\062\045\103\066\073\071\346\072\067\001\002\000\032" +
    "\015\u010a\020\063\023\070\024\075\044\062\045\103\056" +
    "\100\066\073\067\202\070\171\071\074\072\067\001\002" +
    "\000\034\004\uffcd\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\001\002\000\004\004\uffc7\001\002\000\034\004" +
    "\uffca\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001" +
    "\002\000\010\004\uffc8\054\210\055\211\001\002\000\020" +
    "\004\uffc9\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\001\002\000\004\004\uffcb\001\002\000\004\004\uffcc" +
    "\001\002\000\004\017\u010d\001\002\000\004\007\u010e\001" +
    "\002\000\016\020\124\044\062\045\103\066\073\071\346" +
    "\072\067\001\002\000\004\004\uffc6\001\002\000\044\003" +
    "\uffa4\006\uffa4\011\uffa4\012\uffa4\014\uffa4\025\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\033\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\065\uffa4\066\uffa4\001\002\000\006\006\uff98" +
    "\033\uff98\001\002\000\044\003\uff9d\006\uff9d\011\uff9d\012" +
    "\uff9d\014\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\065\uff9d\066" +
    "\uff9d\001\002\000\010\066\u0116\067\202\070\171\001\002" +
    "\000\004\021\u0118\001\002\000\004\021\u0117\001\002\000" +
    "\006\020\162\021\uffe4\001\002\000\004\004\uffc4\001\002" +
    "\000\004\004\uffc5\001\002\000\004\002\001\001\002\000" +
    "\004\020\u011b\001\002\000\016\021\u011c\057\u011d\060\005" +
    "\061\016\062\014\063\006\001\002\000\004\005\u012b\001" +
    "\002\000\006\016\u0128\066\ufff0\001\002\000\006\021\uff7c" +
    "\022\u0126\001\002\000\004\066\u0125\001\002\000\004\021" +
    "\u0121\001\002\000\004\005\u0122\001\002\000\040\003\045" +
    "\011\044\012\046\014\037\025\042\027\051\030\053\031" +
    "\047\057\025\060\005\061\016\062\014\063\006\065\026" +
    "\066\034\001\002\000\004\006\u0124\001\002\000\020\003" +
    "\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72" +
    "\001\002\000\006\021\uff7e\022\uff7e\001\002\000\014\057" +
    "\u011d\060\005\061\016\062\014\063\006\001\002\000\004" +
    "\021\uff7b\001\002\000\004\017\u0129\001\002\000\004\066" +
    "\u012a\001\002\000\006\021\uff7d\022\uff7d\001\002\000\040" +
    "\003\045\011\044\012\046\014\037\025\042\027\051\030" +
    "\053\031\047\057\025\060\005\061\016\062\014\063\006" +
    "\065\026\066\034\001\002\000\004\006\u012d\001\002\000" +
    "\020\003\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063\uff73" +
    "\064\uff73\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\012\002\010\007\012\035\007\040\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\u012d\007\012\035\007\040\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\037\024" +
    "\030\026\034\027\035\030\026\031\040\032\032\041\051" +
    "\044\054\045\027\046\042\047\053\052\031\053\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\007\037\024\030\026\u0110\027" +
    "\035\030\026\031\040\032\032\041\051\044\054\045\027" +
    "\046\042\047\053\052\031\053\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\063\010\277\011\305\012\060\013\100\015\301\016" +
    "\103\017\303\020\076\021\075\022\302\023\300\044\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\063\010\064" +
    "\012\060\013\100\015\070\016\103\017\101\020\076\021" +
    "\075\022\071\023\065\025\104\044\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\063\010\064\012" +
    "\060\013\100\015\070\016\103\017\142\020\076\021\215" +
    "\022\214\023\213\044\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\156\001\001\000\026\005\063\010" +
    "\064\012\135\013\140\015\070\016\103\017\101\020\076" +
    "\021\137\044\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\037\024\030\026\110\027\035\030\026\031\040\032\032" +
    "\041\051\044\054\045\027\046\042\047\053\052\031\053" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\063\010\125\013\121\015\126\016\124\017\122\044" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\063" +
    "\010\125\013\121\015\126\016\103\017\127\044\105\001" +
    "\001\000\004\003\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\131\001\001\000" +
    "\020\005\063\010\125\013\121\015\126\016\133\017\132" +
    "\044\105\001\001\000\002\001\001\000\004\003\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\063" +
    "\010\064\013\141\015\070\016\103\017\142\020\076\021" +
    "\143\044\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\063\010" +
    "\064\013\141\015\070\016\103\017\101\020\155\021\154" +
    "\044\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\156\001\001\000\024\005\063" +
    "\010\064\013\141\015\070\016\103\017\101\020\160\021" +
    "\157\044\105\001\001\000\002\001\001\000\004\004\156" +
    "\001\001\000\040\005\063\010\171\011\202\012\060\013" +
    "\100\015\173\016\103\017\177\020\076\021\075\022\174" +
    "\023\172\042\175\043\176\044\105\001\001\000\012\005" +
    "\063\010\164\013\163\044\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\005\063\010\171\011\202\012\060\013\100" +
    "\015\173\016\103\017\177\020\076\021\075\022\174\023" +
    "\172\042\175\043\205\044\105\001\001\000\002\001\001" +
    "\000\032\005\063\010\064\012\060\013\100\015\070\016" +
    "\103\017\101\020\076\021\075\022\212\023\211\044\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\206\001\001\000\002\001\001\000\004" +
    "\006\206\001\001\000\002\001\001\000\004\006\217\001" +
    "\001\000\032\005\063\010\064\012\060\013\100\015\070" +
    "\016\103\017\101\020\076\021\075\022\221\023\220\044" +
    "\105\001\001\000\002\001\001\000\004\006\206\001\001" +
    "\000\002\001\001\000\036\007\037\024\030\026\224\027" +
    "\035\030\026\031\040\032\032\041\051\044\054\045\027" +
    "\046\042\047\053\052\031\053\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\063" +
    "\010\064\012\060\013\100\015\070\016\103\017\101\020" +
    "\076\021\075\022\071\023\065\025\230\044\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\236\033\241\044\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\246\001\001\000" +
    "\002\001\001\000\010\005\236\033\261\044\235\001\001" +
    "\000\002\001\001\000\036\007\037\024\030\026\253\027" +
    "\035\030\026\031\040\032\032\041\051\044\054\045\027" +
    "\046\042\047\053\052\031\053\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\256" +
    "\001\001\000\002\001\001\000\004\034\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\037\024\030" +
    "\026\264\027\035\030\026\031\040\032\032\041\051\044" +
    "\054\045\027\046\042\047\053\052\031\053\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\267\001\001\000\002\001\001\000\004\034\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\063\010\064\012\060\013\100\015\070\016\103\017\101" +
    "\020\076\021\075\022\071\023\065\025\317\044\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\037" +
    "\024\030\026\322\027\035\030\026\031\040\032\032\041" +
    "\051\044\054\045\027\046\042\047\053\052\031\053\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\007\037\024\030\026\326\027\035\030\026" +
    "\031\040\032\032\041\051\044\054\045\027\046\042\047" +
    "\053\052\031\053\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\343\010\125\013" +
    "\342\014\344\015\126\016\103\017\341\044\105\001\001" +
    "\000\034\005\063\010\333\011\340\012\060\013\100\015" +
    "\335\016\103\017\337\020\076\021\075\022\336\023\334" +
    "\044\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\063\010\125\013" +
    "\353\015\126\016\103\017\352\044\105\050\356\051\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\063\010\125\013\353\015\126\016\103\017" +
    "\352\044\105\050\356\051\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\063\010\363\011\371\012" +
    "\060\013\100\015\365\016\103\017\367\020\076\021\075" +
    "\022\366\023\364\044\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\343\010\125\013\342" +
    "\014\u010b\015\126\016\103\017\341\044\105\001\001\000" +
    "\034\005\063\010\u0104\011\u010a\012\060\013\100\015\u0106" +
    "\016\103\017\u0108\020\076\021\075\022\u0107\023\u0105\044" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\343\010\125\013\342\014\u010e\015" +
    "\126\016\103\017\341\044\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\u0113\013\u0114\044\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\u011e\036\u011d\037\u011f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\007\037\024\030\026" +
    "\u0122\027\035\030\026\031\040\032\032\041\051\044\054" +
    "\045\027\046\042\047\053\052\031\053\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\u011e\036\u011d\037\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\037\024\030\026\u012b\027\035\030\026\031\040\032" +
    "\032\041\051\044\054\045\027\046\042\047\053\052\031" +
    "\053\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        archivo_ingresado.reportarError("recuperable" ,s.left+1,s.right+1,s.value);
        /*this.s = s;*/
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         archivo_ingresado.reportarError("no recuperable" ,s.left+1,s.right+1,s.value);
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ESCRIBIR ::= Print Parentesis_a Null Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ESCRIBIR ::= Print Parentesis_a LITERAL_NUMERICO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ESCRIBIR ::= Print Parentesis_a LITERAL_CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LEER ::= Input Simbolo_input Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FUNCION ::= Identificador Parentesis_a PARAMETROS_FUNCION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX Coma PARAMETROS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PARAMETROS_FUNCION_AUX ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAMETROS_FUNCION_AUX ::= LITERAL_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PARAMETROS_FUNCION_AUX ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DEC_FUNCION ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DEC_FUNCION ::= error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION Identificador Parentesis_a TIPOS_PARAMETRO_FUNCION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION Identificador Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // RETORNOS_FUNCION ::= Return EXP_LOGICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RETORNOS_FUNCION ::= Return EXP_LOGICA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_BIN Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // RETORNOS_FUNCION ::= Return Null Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // RETORNOS_FUNCION ::= Return LITERAL_NUMERICO Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RETORNOS_FUNCION ::= Return LITERAL_CADENA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX Coma TIPOS_PARAMETRO_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPOS_PARAM_FUNCION_AUX ::= T_int Corchete_a Corchete_c Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAM_FUNCION_AUX",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPOS_PARAM_FUNCION_AUX ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAM_FUNCION_AUX",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPOS_RETORNO_FUNCION ::= TIPOS_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPOS_RETORNO_FUNCION ::= T_void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SWITCH ::= Switch Parentesis_a PARAM_SWITCH Parentesis_c Llave_a CASE_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE_SWITCH ::= Default Dos_puntos Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE_SWITCH ::= Default Dos_puntos BLOQUE Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE_SWITCH ::= Default Dos_puntos BLOQUE Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE_SWITCH ::= Default Dos_puntos Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAM_SWITCH ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAM_SWITCH ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAM_SWITCH ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAM_SWITCH ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAM_SWITCH ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAM_SWITCH ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAM_SWITCH ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DO_WHILE ::= Do Llave_a BLOQUE Llave_c While Parentesis_a CONDICION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WHILE ::= While Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c Else Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICION ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICION ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BLOQUE ::= RETORNOS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BLOQUE ::= SENTENCIA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA ::= error Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= ESCRIBIR Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= LEER Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= FUNCION Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA ::= CAST_STRING_INT Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA ::= ASIG_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA ::= DEC_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_LOGICA_UNA ::= Negacion EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP_LOGICA_UNA ::= EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP_LOGICA_UNA ::= Negacion LITERAL_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP_LOGICA_UNA ::= LITERAL_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP_LOGICA_UNA ::= Negacion LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP_LOGICA_UNA ::= LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAM_EXP_RELACIONAL ::= LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAM_EXP_RELACIONAL ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAM_EXP_ARITMETICA ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAM_EXP_ARITMETICA ::= LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAM_EXP_ARITMETICA ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_ARITMETICA_UNA ::= Unario_negatico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP_ARITMETICA_UNA ::= Unario_positivo Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CAST_STRING_INT ::= String_to_int Parentesis_a LITERAL_FUNID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CAST_STRING_INT ::= String_to_int Parentesis_a LITERAL_CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG_VARIABLE ::= Identificador Corchete_a POSICION_ARREGLO Corchete_c Asignacion POSICION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIG_VARIABLE ::= Identificador Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIG_VARIABLE ::= Identificador Asignacion LITERAL_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIG_VARIABLE ::= Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX Coma PARAMETROS_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS_ARREGLO_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMETROS_ARREGLO_AUX ::= LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROS_ARREGLO_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // POSICION_ARREGLO ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // POSICION_ARREGLO ::= LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // POSICION_ARREGLO ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // POSICION_ARREGLO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a POSICION_ARREGLO Corchete_c Asignacion Corchete_a PARAMETROS_ARREGLO Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a POSICION_ARREGLO Corchete_c Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a POSICION_ARREGLO Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_ARREGLO ::= Identificador Corchete_a LITERAL_FUNID Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_ARREGLO ::= Identificador Corchete_a LITERAL_NUMERICO Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LITERAL_FUNID ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_FUNID",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LITERAL_FUNID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_FUNID",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LITERAL_BOOLEANO ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LITERAL_BOOLEANO ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LITERAL_CADENA ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_CADENA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LITERAL_CADENA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_CADENA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LITERAL_NUMERICO ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LITERAL_NUMERICO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LITERAL_NUMERICO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_VARIABLES ::= T_string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_VARIABLES ::= T_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= T_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= T_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_VARIABLES ::= T_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_LOGICOS ::= Disyuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_LOGICOS ::= Conjuncion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_RELACIONALES ::= Mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_RELACIONALES ::= Menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_RELACIONALES ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS_RELACIONALES ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS_RELACIONALES ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS_ARITMETICOS ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPOS_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPOS_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPOS_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPOS_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DEC_FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_int Main Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

