
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 11 23:46:22 CST 2020
//----------------------------------------------------

package Codigo;

import java_cup.runtime.Symbol;
import Codigo.archivo_ingresado;
import Codigo.semantico.analisis;
import Codigo.semantico.literal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 11 23:46:22 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\275\000\002\002\004\000\002\063\003\000\002\002" +
    "\011\000\002\002\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\005\006\000\002\005\006\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\054\013\000\002\054" +
    "\013\000\002\055\004\000\002\055\006\000\002\055\006" +
    "\000\002\055\006\000\002\055\006\000\002\055\006\000" +
    "\002\055\006\000\002\055\006\000\002\055\006\000\002" +
    "\055\010\000\002\055\012\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\057\003\000" +
    "\002\057\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\010" +
    "\000\002\061\006\000\002\061\006\000\002\015\004\000" +
    "\002\015\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\007\000\002\017\007\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\007\000\002\021\007\000\002\022\003\000\002\022" +
    "\004\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\007\000\002\023\007\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\027\003\000\002\027\004\000\002\026\003\000\002\026" +
    "\004\000\002\026\005\000\002\026\003\000\002\025\003" +
    "\000\002\025\003\000\002\030\011\000\002\030\015\000" +
    "\002\031\011\000\002\032\012\000\002\034\006\000\002" +
    "\034\006\000\002\034\005\000\002\034\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\033\015\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\010\000\002\040" +
    "\007\000\002\040\011\000\002\040\010\000\002\040\006" +
    "\000\002\040\007\000\002\040\010\000\002\040\007\000" +
    "\002\036\011\000\002\041\003\000\002\041\003\000\002" +
    "\042\004\000\002\043\003\000\002\043\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\062\003\000\002\044\011\000\002\044\012\000\002" +
    "\044\004\000\002\044\004\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\047\005\000\002\050\005\000\002\050\006\000\002" +
    "\051\005\000\002\052\006\000\002\052\006\000\002\052" +
    "\006\000\002\052\006\000\002\052\006\000\002\052\006" +
    "\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\020\003\015\061\012\062\006\063\016\064" +
    "\014\065\005\066\004\001\002\000\004\070\uff68\001\002" +
    "\000\004\070\uffeb\001\002\000\004\070\uffee\001\002\000" +
    "\020\003\015\061\012\062\006\063\016\064\014\065\005" +
    "\066\004\001\002\000\004\070\u0153\001\002\000\004\002" +
    "\u0151\001\002\000\006\010\022\070\uffef\001\002\000\004" +
    "\070\uff67\001\002\000\004\070\uffec\001\002\000\006\006" +
    "\017\021\020\001\002\000\004\070\uffed\001\002\000\020" +
    "\003\uff58\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066" +
    "\uff58\001\002\000\020\003\uff59\061\uff59\062\uff59\063\uff59" +
    "\064\uff59\065\uff59\066\uff59\001\002\000\004\020\023\001" +
    "\002\000\004\020\000\001\002\000\004\021\024\001\002" +
    "\000\004\005\025\001\002\000\044\003\050\005\042\011" +
    "\047\012\051\014\040\025\045\027\053\030\057\031\030" +
    "\032\052\061\026\062\006\063\016\064\014\065\005\067" +
    "\027\070\036\001\002\000\004\070\uffef\001\002\000\004" +
    "\020\u014b\001\002\000\004\020\u0132\001\002\000\050\003" +
    "\uff96\005\uff96\006\uff96\011\uff96\012\uff96\014\uff96\025\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\034\uff96\061\uff96\062" +
    "\uff96\063\uff96\064\uff96\065\uff96\067\uff96\070\uff96\001\002" +
    "\000\004\004\u0131\001\002\000\050\003\050\005\042\006" +
    "\uff8b\011\047\012\051\014\040\025\045\027\053\030\057" +
    "\031\030\032\052\034\uff8b\061\026\062\006\063\016\064" +
    "\014\065\005\067\027\070\036\001\002\000\004\004\u012f" +
    "\001\002\000\050\003\uff93\005\uff93\006\uff93\011\uff93\012" +
    "\uff93\014\uff93\025\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\034\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\067" +
    "\uff93\070\uff93\001\002\000\010\007\u011e\016\u011d\020\166" +
    "\001\002\000\004\006\u011c\001\002\000\004\020\u010d\001" +
    "\002\000\050\003\uff97\005\uff97\006\uff97\011\uff97\012\uff97" +
    "\014\uff97\025\uff97\027\uff97\030\uff97\031\uff97\032\uff97\034" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\067\uff97" +
    "\070\uff97\001\002\000\040\003\050\012\051\014\040\025" +
    "\045\027\053\030\057\031\030\032\052\061\026\062\006" +
    "\063\016\064\014\065\005\067\027\070\036\001\002\000" +
    "\004\070\335\001\002\000\050\003\uff94\005\uff94\006\uff94" +
    "\011\uff94\012\uff94\014\uff94\025\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\034\uff94\061\uff94\062\uff94\063\uff94\064\uff94" +
    "\065\uff94\067\uff94\070\uff94\001\002\000\004\020\323\001" +
    "\002\000\004\004\322\001\002\000\032\015\311\020\070" +
    "\023\075\024\101\046\066\047\107\060\104\070\077\071" +
    "\206\072\175\073\100\074\073\001\002\000\006\004\303" +
    "\006\302\001\002\000\004\013\300\001\002\000\004\020" +
    "\240\001\002\000\004\005\231\001\002\000\004\004\230" +
    "\001\002\000\006\006\uff88\034\uff88\001\002\000\050\003" +
    "\uff95\005\uff95\006\uff95\011\uff95\012\uff95\014\uff95\025\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\034\uff95\061\uff95\062" +
    "\uff95\063\uff95\064\uff95\065\uff95\067\uff95\070\uff95\001\002" +
    "\000\004\020\064\001\002\000\004\004\063\001\002\000" +
    "\004\004\062\001\002\000\050\003\uff92\005\uff92\006\uff92" +
    "\011\uff92\012\uff92\014\uff92\025\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\034\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\067\uff92\070\uff92\001\002\000\050\003\uff9a\005" +
    "\uff9a\006\uff9a\011\uff9a\012\uff9a\014\uff9a\025\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\034\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\064\uff9a\065\uff9a\067\uff9a\070\uff9a\001\002\000\024" +
    "\020\070\023\075\024\101\046\066\047\107\060\104\070" +
    "\077\073\100\074\073\001\002\000\020\004\uffa3\017\uffa3" +
    "\021\uffa3\022\uffa3\037\uffa3\056\uffa3\057\uffa3\001\002\000" +
    "\004\070\227\001\002\000\052\004\uffe8\006\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\001\002\000\024\020" +
    "\070\023\075\024\101\046\066\047\107\060\104\070\077" +
    "\073\100\074\073\001\002\000\050\004\uffae\017\uffae\021" +
    "\uffae\022\uffae\037\uffae\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\001\002\000\006\004\uff87" +
    "\021\uff87\001\002\000\052\004\uffe9\006\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\001\002\000\050\004\uffac" +
    "\017\uffac\021\uffac\022\uffac\037\uffac\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002\000" +
    "\020\004\uffe5\017\uffe5\021\uffe5\022\uffe5\037\uffe5\056\uffe5" +
    "\057\uffe5\001\002\000\012\004\uff86\021\uff86\056\214\057" +
    "\215\001\002\000\056\004\uffe3\006\uffe3\016\167\017\uffe3" +
    "\020\166\021\uffe3\022\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000" +
    "\052\004\uffea\006\uffea\017\uffea\021\uffea\022\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\001\002\000\020\004\uffe4\017\uffe4\021\uffe4\022" +
    "\uffe4\037\uffe4\056\uffe4\057\uffe4\001\002\000\020\004\uffa1" +
    "\017\uffa1\021\uffa1\022\uffa1\037\uffa1\056\uffa1\057\uffa1\001" +
    "\002\000\016\050\152\051\153\052\160\053\157\054\156" +
    "\055\154\001\002\000\022\020\143\023\075\024\101\046" +
    "\066\047\107\070\077\073\100\074\073\001\002\000\034" +
    "\004\uffab\017\uffab\021\uffab\022\uffab\037\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\001\002\000\050\004\uffa5\017\uffa5\021\uffa5\022\uffa5\037" +
    "\uffa5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffa5\057\uffa5\001\002\000\004\070\141\001\002\000\016" +
    "\040\123\041\122\042\117\043\125\044\124\045\121\001" +
    "\002\000\004\021\113\001\002\000\052\004\uffe2\006\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002\000" +
    "\004\005\114\001\002\000\044\003\050\005\042\011\047" +
    "\012\051\014\040\025\045\027\053\030\057\031\030\032" +
    "\052\061\026\062\006\063\016\064\014\065\005\067\027" +
    "\070\036\001\002\000\004\006\116\001\002\000\050\003" +
    "\uff83\005\uff83\006\uff83\011\uff83\012\uff83\014\uff83\025\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\034\uff83\061\uff83\062" +
    "\uff83\063\uff83\064\uff83\065\uff83\067\uff83\070\uff83\001\002" +
    "\000\016\020\ufffb\046\ufffb\047\ufffb\070\ufffb\073\ufffb\074" +
    "\ufffb\001\002\000\016\020\130\046\066\047\107\070\077" +
    "\073\100\074\073\001\002\000\016\020\ufff8\046\ufff8\047" +
    "\ufff8\070\ufff8\073\ufff8\074\ufff8\001\002\000\016\020\ufffc" +
    "\046\ufffc\047\ufffc\070\ufffc\073\ufffc\074\ufffc\001\002\000" +
    "\016\020\ufffd\046\ufffd\047\ufffd\070\ufffd\073\ufffd\074\ufffd" +
    "\001\002\000\016\020\ufff9\046\ufff9\047\ufff9\070\ufff9\073" +
    "\ufff9\074\ufff9\001\002\000\016\020\ufffa\046\ufffa\047\ufffa" +
    "\070\ufffa\073\ufffa\074\ufffa\001\002\000\036\004\uffb2\006" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\037\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001" +
    "\002\000\052\004\uffb5\006\uffb5\017\uffb5\021\uffb5\022\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\057\uffb5\001\002\000\016\020\130\046\066\047" +
    "\107\070\077\073\100\074\073\001\002\000\052\004\uffb3" +
    "\006\uffb3\017\uffb3\021\uffb3\022\uffb3\037\uffb3\040\123\041" +
    "\122\042\117\043\125\044\124\045\121\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001" +
    "\002\000\052\004\uffb6\006\uffb6\017\uffb6\021\uffb6\022\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\001\002\000\052\004\uffb4\006\uffb4\017" +
    "\uffb4\021\uffb4\022\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002\000\004" +
    "\021\135\001\002\000\052\004\uffb1\006\uffb1\017\uffb1\021" +
    "\uffb1\022\uffb1\037\uffb1\040\123\041\122\042\117\043\125" +
    "\044\124\045\121\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\016\020\130" +
    "\046\066\047\107\070\077\073\100\074\073\001\002\000" +
    "\036\004\uffaf\006\uffaf\017\uffaf\021\uffaf\022\uffaf\037\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\001\002\000\052\004\uffb0\006\uffb0\017\uffb0" +
    "\021\uffb0\022\uffb0\037\uffb0\040\123\041\122\042\117\043" +
    "\125\044\124\045\121\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\001\002\000\052\004" +
    "\uffb7\006\uffb7\017\uffb7\021\uffb7\022\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\001\002\000\020\004\uffa2\017\uffa2\021\uffa2\022\uffa2\037" +
    "\uffa2\056\uffa2\057\uffa2\001\002\000\016\020\143\046\066" +
    "\047\107\070\077\073\100\074\073\001\002\000\020\004" +
    "\uffa0\017\uffa0\021\uffa0\022\uffa0\037\uffa0\056\uffa0\057\uffa0" +
    "\001\002\000\050\004\uffa4\017\uffa4\021\uffa4\022\uffa4\037" +
    "\uffa4\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffa4\057\uffa4\001\002\000\050\004\uffad\017\uffad\021\uffad" +
    "\022\uffad\037\uffad\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\001\002\000\020\021\135\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\001\002" +
    "\000\004\021\151\001\002\000\034\004\uffa8\017\uffa8\021" +
    "\uffa8\022\uffa8\037\uffa8\050\152\051\153\052\160\053\157" +
    "\054\156\055\154\056\uffa8\057\uffa8\001\002\000\016\020" +
    "\ufff7\046\ufff7\047\ufff7\070\ufff7\073\ufff7\074\ufff7\001\002" +
    "\000\016\020\ufff6\046\ufff6\047\ufff6\070\ufff6\073\ufff6\074" +
    "\ufff6\001\002\000\016\020\ufff2\046\ufff2\047\ufff2\070\ufff2" +
    "\073\ufff2\074\ufff2\001\002\000\016\020\143\046\066\047" +
    "\107\070\077\073\100\074\073\001\002\000\016\020\ufff3" +
    "\046\ufff3\047\ufff3\070\ufff3\073\ufff3\074\ufff3\001\002\000" +
    "\016\020\ufff4\046\ufff4\047\ufff4\070\ufff4\073\ufff4\074\ufff4" +
    "\001\002\000\016\020\ufff5\046\ufff5\047\ufff5\070\ufff5\073" +
    "\ufff5\074\ufff5\001\002\000\020\004\uffa6\017\uffa6\021\uffa6" +
    "\022\uffa6\037\uffa6\056\uffa6\057\uffa6\001\002\000\034\004" +
    "\uffa7\017\uffa7\021\uffa7\022\uffa7\037\uffa7\050\152\051\153" +
    "\052\160\053\157\054\156\055\154\056\uffa7\057\uffa7\001" +
    "\002\000\016\020\143\046\066\047\107\070\077\073\100" +
    "\074\073\001\002\000\020\004\uffa9\017\uffa9\021\uffa9\022" +
    "\uffa9\037\uffa9\056\uffa9\057\uffa9\001\002\000\034\004\uffaa" +
    "\017\uffaa\021\uffaa\022\uffaa\037\uffaa\050\152\051\153\052" +
    "\160\053\157\054\156\055\154\056\uffaa\057\uffaa\001\002" +
    "\000\034\015\205\020\070\021\174\023\075\024\101\046" +
    "\066\047\107\060\104\070\077\071\206\072\175\073\100" +
    "\074\073\001\002\000\010\070\077\073\100\074\073\001" +
    "\002\000\004\017\173\001\002\000\004\017\172\001\002" +
    "\000\052\004\uffe0\006\uffe0\017\uffe0\021\uffe0\022\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\001\002\000\052\004\uffe1\006\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\052\004" +
    "\uff4e\006\uff4e\017\uff4e\021\uff4e\022\uff4e\037\uff4e\040\uff4e" +
    "\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\050\uff4e\051" +
    "\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\057\uff4e" +
    "\001\002\000\014\004\uffe6\017\uffe6\021\uffe6\022\uffe6\037" +
    "\uffe6\001\002\000\036\021\uff57\022\uff57\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\001\002\000\006\021\uff52" +
    "\022\uff52\001\002\000\036\021\uff53\022\uff53\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\001\002\000\012\021" +
    "\uff51\022\uff51\056\214\057\215\001\002\000\006\021\uff50" +
    "\022\211\001\002\000\004\021\210\001\002\000\022\021" +
    "\uff54\022\uff54\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\001\002\000\006\021\uff55\022\uff55\001\002\000" +
    "\014\004\uffe7\017\uffe7\021\uffe7\022\uffe7\037\uffe7\001\002" +
    "\000\006\021\uff56\022\uff56\001\002\000\052\004\uff4d\006" +
    "\uff4d\017\uff4d\021\uff4d\022\uff4d\037\uff4d\040\uff4d\041\uff4d" +
    "\042\uff4d\043\uff4d\044\uff4d\045\uff4d\050\uff4d\051\uff4d\052" +
    "\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d\001\002" +
    "\000\032\015\205\020\070\023\075\024\101\046\066\047" +
    "\107\060\104\070\077\071\206\072\175\073\100\074\073" +
    "\001\002\000\004\021\uff4f\001\002\000\024\020\070\023" +
    "\075\024\101\046\066\047\107\060\104\070\077\073\100" +
    "\074\073\001\002\000\024\020\ufff1\023\ufff1\024\ufff1\046" +
    "\ufff1\047\ufff1\060\ufff1\070\ufff1\073\ufff1\074\ufff1\001\002" +
    "\000\024\020\ufff0\023\ufff0\024\ufff0\046\ufff0\047\ufff0\060" +
    "\ufff0\070\ufff0\073\ufff0\074\ufff0\001\002\000\014\004\uff9e" +
    "\017\uff9e\021\uff9e\022\uff9e\037\uff9e\001\002\000\020\004" +
    "\uff9f\017\uff9f\021\uff9f\022\uff9f\037\uff9f\056\214\057\215" +
    "\001\002\000\004\021\223\001\002\000\006\056\214\057" +
    "\215\001\002\000\010\021\151\056\uffa1\057\uffa1\001\002" +
    "\000\020\004\uff9d\017\uff9d\021\uff9d\022\uff9d\037\uff9d\056" +
    "\214\057\215\001\002\000\024\020\070\023\075\024\101" +
    "\046\066\047\107\060\104\070\077\073\100\074\073\001" +
    "\002\000\014\004\uff9b\017\uff9b\021\uff9b\022\uff9b\037\uff9b" +
    "\001\002\000\020\004\uff9c\017\uff9c\021\uff9c\022\uff9c\037" +
    "\uff9c\056\214\057\215\001\002\000\052\004\uffb8\006\uffb8" +
    "\017\uffb8\021\uffb8\022\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\001\002\000" +
    "\050\003\uff98\005\uff98\006\uff98\011\uff98\012\uff98\014\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\032\uff98\034\uff98\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\067\uff98\070\uff98" +
    "\001\002\000\044\003\050\005\042\011\047\012\051\014" +
    "\040\025\045\027\053\030\057\031\030\032\052\061\026" +
    "\062\006\063\016\064\014\065\005\067\027\070\036\001" +
    "\002\000\004\006\233\001\002\000\004\030\234\001\002" +
    "\000\004\020\235\001\002\000\024\020\070\023\075\024" +
    "\101\046\066\047\107\060\104\070\077\073\100\074\073" +
    "\001\002\000\004\021\237\001\002\000\050\003\uff82\005" +
    "\uff82\006\uff82\011\uff82\012\uff82\014\uff82\025\uff82\027\uff82" +
    "\030\uff82\031\uff82\032\uff82\034\uff82\061\uff82\062\uff82\063" +
    "\uff82\064\uff82\065\uff82\067\uff82\070\uff82\001\002\000\014" +
    "\070\247\071\241\072\245\073\250\074\242\001\002\000" +
    "\006\021\uff76\037\uff76\001\002\000\006\021\uff77\037\uff77" +
    "\001\002\000\006\021\uff73\037\uff73\001\002\000\006\021" +
    "\uff72\037\uff72\001\002\000\006\021\uff75\037\uff75\001\002" +
    "\000\004\021\251\001\002\000\012\016\167\020\166\021" +
    "\uff74\037\uff74\001\002\000\006\021\uff78\037\uff78\001\002" +
    "\000\004\005\252\001\002\000\006\033\254\035\255\001" +
    "\002\000\004\006\277\001\002\000\014\070\247\071\241" +
    "\072\245\073\250\074\242\001\002\000\004\037\256\001" +
    "\002\000\046\003\050\005\042\011\047\012\051\014\040" +
    "\025\045\027\053\030\057\031\030\032\052\034\257\061" +
    "\026\062\006\063\016\064\014\065\005\067\027\070\036" +
    "\001\002\000\004\004\264\001\002\000\004\034\261\001" +
    "\002\000\004\004\262\001\002\000\010\006\uff6c\033\254" +
    "\035\255\001\002\000\004\006\uff6b\001\002\000\010\006" +
    "\uff6d\033\254\035\255\001\002\000\004\006\uff6a\001\002" +
    "\000\004\037\267\001\002\000\046\003\050\005\042\011" +
    "\047\012\051\014\040\025\045\027\053\030\057\031\030" +
    "\032\052\034\270\061\026\062\006\063\016\064\014\065" +
    "\005\067\027\070\036\001\002\000\004\004\275\001\002" +
    "\000\004\034\272\001\002\000\004\004\273\001\002\000" +
    "\010\006\uff71\033\254\035\255\001\002\000\004\006\uff6f" +
    "\001\002\000\010\006\uff70\033\254\035\255\001\002\000" +
    "\004\006\uff6e\001\002\000\050\003\uff69\005\uff69\006\uff69" +
    "\011\uff69\012\uff69\014\uff69\025\uff69\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\034\uff69\061\uff69\062\uff69\063\uff69\064\uff69" +
    "\065\uff69\067\uff69\070\uff69\001\002\000\004\070\301\001" +
    "\002\000\004\004\uff4c\001\002\000\050\003\uff8e\005\uff8e" +
    "\006\uff8e\011\uff8e\012\uff8e\014\uff8e\025\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\034\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\067\uff8e\070\uff8e\001\002\000\050\003" +
    "\uff8f\005\uff8f\006\uff8f\011\uff8f\012\uff8f\014\uff8f\025\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\065\uff8f\067\uff8f\070\uff8f\001\002" +
    "\000\034\004\321\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\001\002\000\004\004\320\001\002\000\034\004" +
    "\317\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\001" +
    "\002\000\010\004\316\056\214\057\215\001\002\000\020" +
    "\004\315\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\001\002\000\004\004\314\001\002\000\004\004\313" +
    "\001\002\000\006\006\uff63\034\uff63\001\002\000\006\006" +
    "\uff61\034\uff61\001\002\000\006\006\uff60\034\uff60\001\002" +
    "\000\006\006\uff5d\034\uff5d\001\002\000\006\006\uff5f\034" +
    "\uff5f\001\002\000\006\006\uff5e\034\uff5e\001\002\000\006" +
    "\006\uff62\034\uff62\001\002\000\050\003\uff90\005\uff90\006" +
    "\uff90\011\uff90\012\uff90\014\uff90\025\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\034\uff90\061\uff90\062\uff90\063\uff90\064" +
    "\uff90\065\uff90\067\uff90\070\uff90\001\002\000\024\020\070" +
    "\023\075\024\101\046\066\047\107\060\104\070\077\073" +
    "\100\074\073\001\002\000\004\021\325\001\002\000\004" +
    "\005\326\001\002\000\044\003\050\005\042\011\047\012" +
    "\051\014\040\025\045\027\053\030\057\031\030\032\052" +
    "\061\026\062\006\063\016\064\014\065\005\067\027\070" +
    "\036\001\002\000\004\006\330\001\002\000\052\003\uff85" +
    "\005\uff85\006\uff85\011\uff85\012\uff85\014\uff85\025\uff85\026" +
    "\331\027\uff85\030\uff85\031\uff85\032\uff85\034\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\065\uff85\067\uff85\070\uff85\001" +
    "\002\000\004\005\332\001\002\000\044\003\050\005\042" +
    "\011\047\012\051\014\040\025\045\027\053\030\057\031" +
    "\030\032\052\061\026\062\006\063\016\064\014\065\005" +
    "\067\027\070\036\001\002\000\004\006\334\001\002\000" +
    "\050\003\uff84\005\uff84\006\uff84\011\uff84\012\uff84\014\uff84" +
    "\025\uff84\027\uff84\030\uff84\031\uff84\032\uff84\034\uff84\061" +
    "\uff84\062\uff84\063\uff84\064\uff84\065\uff84\067\uff84\070\uff84" +
    "\001\002\000\010\004\uffd7\007\337\016\336\001\002\000" +
    "\004\017\375\001\002\000\032\016\344\020\070\023\075" +
    "\024\101\046\066\047\107\060\104\070\077\071\206\072" +
    "\175\073\100\074\073\001\002\000\034\004\uffd6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\001\002\000\004" +
    "\004\uffd1\001\002\000\034\004\uffd4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\001\002\000\010\004\uffd2\056" +
    "\214\057\215\001\002\000\004\020\350\001\002\000\004" +
    "\004\uffd0\001\002\000\020\004\uffd3\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\001\002\000\004\004\uffd5" +
    "\001\002\000\024\020\070\023\075\024\101\046\066\047" +
    "\107\060\104\070\077\073\100\074\073\001\002\000\004" +
    "\021\367\001\002\000\010\021\353\056\214\057\215\001" +
    "\002\000\004\036\354\001\002\000\030\020\070\023\075" +
    "\024\101\046\066\047\107\060\104\070\077\071\206\072" +
    "\175\073\100\074\073\001\002\000\036\017\uffdf\037\uffdf" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\001\002" +
    "\000\006\017\uffda\037\uffda\001\002\000\004\037\364\001" +
    "\002\000\036\017\uffdd\037\uffdd\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\001\002\000\012\017\uffdb\037\uffdb" +
    "\056\214\057\215\001\002\000\022\017\uffdc\037\uffdc\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\001\002" +
    "\000\006\017\uffde\037\uffde\001\002\000\030\020\070\023" +
    "\075\024\101\046\066\047\107\060\104\070\077\071\206" +
    "\072\175\073\100\074\073\001\002\000\004\017\366\001" +
    "\002\000\004\004\uffd9\001\002\000\004\036\370\001\002" +
    "\000\030\020\070\023\075\024\101\046\066\047\107\060" +
    "\104\070\077\071\206\072\175\073\100\074\073\001\002" +
    "\000\004\037\372\001\002\000\030\020\070\023\075\024" +
    "\101\046\066\047\107\060\104\070\077\071\206\072\175" +
    "\073\100\074\073\001\002\000\004\017\374\001\002\000" +
    "\004\004\uffd8\001\002\000\006\004\uffcf\007\376\001\002" +
    "\000\006\005\377\015\u0100\001\002\000\016\020\130\046" +
    "\066\047\107\070\077\073\u0104\074\073\001\002\000\004" +
    "\004\uffce\001\002\000\006\006\uffc6\022\uffc6\001\002\000" +
    "\022\006\uffc7\022\uffc7\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\001\002\000\004\006\u0108\001\002\000" +
    "\022\006\uffc8\022\uffc8\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\001\002\000\006\006\uffc5\022\u0106\001" +
    "\002\000\016\020\130\046\066\047\107\070\077\073\u0104" +
    "\074\073\001\002\000\004\006\uffc4\001\002\000\004\004" +
    "\uffcd\001\002\000\042\003\050\006\uff8d\012\051\014\040" +
    "\025\045\027\053\030\057\031\030\032\052\061\026\062" +
    "\006\063\016\064\014\065\005\067\027\070\036\001\002" +
    "\000\004\006\u010b\001\002\000\006\006\uff89\034\uff89\001" +
    "\002\000\004\006\uff8c\001\002\000\032\015\u0113\020\070" +
    "\023\075\024\101\046\066\047\107\060\104\070\077\071" +
    "\206\072\175\073\100\074\073\001\002\000\034\021\u011b" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\001\002" +
    "\000\004\021\u011a\001\002\000\034\021\u0119\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\001\002\000\010\021" +
    "\u0118\056\214\057\215\001\002\000\020\021\u0117\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\001\002\000" +
    "\004\021\u0116\001\002\000\004\021\u0115\001\002\000\004" +
    "\004\uff4b\001\002\000\004\004\uff49\001\002\000\004\004" +
    "\uff48\001\002\000\004\004\uff46\001\002\000\004\004\uff45" +
    "\001\002\000\004\004\uff47\001\002\000\004\004\uff4a\001" +
    "\002\000\004\002\uffff\001\002\000\016\020\130\046\066" +
    "\047\107\070\077\073\u012b\074\073\001\002\000\034\015" +
    "\u0125\016\344\020\070\023\075\024\101\046\066\047\107" +
    "\060\104\070\077\071\206\072\175\073\100\074\073\001" +
    "\002\000\034\004\uffc3\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\001\002\000\004\004\uffbd\001\002\000\034" +
    "\004\uffc0\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\001\002\000\010\004\uffbe\056\214\057\215\001\002\000" +
    "\004\004\uffbc\001\002\000\020\004\uffbf\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\001\002\000\004\004" +
    "\uffc1\001\002\000\004\004\uffc2\001\002\000\006\004\uffc9" +
    "\017\uffc9\001\002\000\022\004\uffca\017\uffca\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\001\002\000\004" +
    "\017\u012c\001\002\000\022\004\uffcb\017\uffcb\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\001\002\000\022" +
    "\004\uffcc\017\uffcc\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\001\002\000\004\007\u012d\001\002\000\016" +
    "\020\130\046\066\047\107\070\077\073\u012b\074\073\001" +
    "\002\000\004\004\uffbb\001\002\000\050\003\uff99\005\uff99" +
    "\006\uff99\011\uff99\012\uff99\014\uff99\025\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\034\uff99\061\uff99\062\uff99\063\uff99" +
    "\064\uff99\065\uff99\067\uff99\070\uff99\001\002\000\006\006" +
    "\uff8a\034\uff8a\001\002\000\050\003\uff91\005\uff91\006\uff91" +
    "\011\uff91\012\uff91\014\uff91\025\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\034\uff91\061\uff91\062\uff91\063\uff91\064\uff91" +
    "\065\uff91\067\uff91\070\uff91\001\002\000\016\061\026\062" +
    "\006\063\016\064\014\065\005\070\u0134\001\002\000\004" +
    "\004\u013d\001\002\000\004\007\u013a\001\002\000\004\070" +
    "\u0136\001\002\000\004\007\u0137\001\002\000\010\070\077" +
    "\073\100\074\073\001\002\000\004\004\uff80\001\002\000" +
    "\004\004\uff81\001\002\000\010\070\077\073\100\074\073" +
    "\001\002\000\004\004\uff7f\001\002\000\004\004\uff7e\001" +
    "\002\000\024\020\070\023\075\024\101\046\066\047\107" +
    "\060\104\070\077\073\100\074\073\001\002\000\004\004" +
    "\u013f\001\002\000\004\070\u0141\001\002\000\004\021\u0147" +
    "\001\002\000\004\007\u0142\001\002\000\016\020\130\046" +
    "\066\047\107\070\077\073\100\074\073\001\002\000\020" +
    "\021\uff7c\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\001\002\000\004\021\uff7a\001\002\000\020\021\uff7d" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\001" +
    "\002\000\020\021\uff7b\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\001\002\000\004\005\u0148\001\002\000" +
    "\044\003\050\005\042\011\047\012\051\014\040\025\045" +
    "\027\053\030\057\031\030\032\052\061\026\062\006\063" +
    "\016\064\014\065\005\067\027\070\036\001\002\000\004" +
    "\006\u014a\001\002\000\050\003\uff79\005\uff79\006\uff79\011" +
    "\uff79\012\uff79\014\uff79\025\uff79\027\uff79\030\uff79\031\uff79" +
    "\032\uff79\034\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065" +
    "\uff79\067\uff79\070\uff79\001\002\000\010\070\u014e\071\206" +
    "\072\175\001\002\000\004\021\u0150\001\002\000\004\021" +
    "\u014f\001\002\000\006\020\166\021\uffe3\001\002\000\004" +
    "\004\uffb9\001\002\000\004\004\uffba\001\002\000\004\002" +
    "\001\001\002\000\004\020\u0154\001\002\000\004\020\uff5c" +
    "\001\002\000\016\021\u0155\061\026\062\006\063\016\064" +
    "\014\065\005\001\002\000\004\005\u0160\001\002\000\006" +
    "\021\uff65\022\u015e\001\002\000\004\070\u015d\001\002\000" +
    "\004\021\u0159\001\002\000\004\005\u015a\001\002\000\044" +
    "\003\050\005\042\011\047\012\051\014\040\025\045\027" +
    "\053\030\057\031\030\032\052\061\026\062\006\063\016" +
    "\064\014\065\005\067\027\070\036\001\002\000\004\006" +
    "\u015c\001\002\000\020\003\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\064\uff5a\065\uff5a\066\uff5a\001\002\000\006\021\uff66\022" +
    "\uff66\001\002\000\014\061\026\062\006\063\016\064\014" +
    "\065\005\001\002\000\004\021\uff64\001\002\000\044\003" +
    "\050\005\042\011\047\012\051\014\040\025\045\027\053" +
    "\030\057\031\030\032\052\061\026\062\006\063\016\064" +
    "\014\065\005\067\027\070\036\001\002\000\004\006\u0162" +
    "\001\002\000\020\003\uff5b\061\uff5b\062\uff5b\063\uff5b\064" +
    "\uff5b\065\uff5b\066\uff5b\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\012\002\010\007\012\041\007\044\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\u0162\007\012\041\007\044\006\001\001\000" +
    "\004\062\u0151\001\001\000\002\001\001\000\004\063\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\007\042\024\032\026\036\030\040" +
    "\031\030\032\043\033\055\036\034\045\054\050\060\051" +
    "\031\052\045\055\057\060\033\061\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\042\024\032\026\u012f" +
    "\030\040\031\030\032\043\033\055\036\034\045\054\050" +
    "\060\051\031\052\045\055\057\060\033\061\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\042\024\u0108\027\u0109\030\040\031\030\032\043\033" +
    "\055\036\034\050\060\051\031\052\045\055\057\060\033" +
    "\061\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\066\010\303" +
    "\011\311\012\064\013\105\015\305\016\107\017\307\020" +
    "\102\021\101\022\306\023\304\050\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\066\010\070" +
    "\012\064\013\105\015\073\016\107\017\104\020\102\021" +
    "\101\022\075\023\071\025\110\050\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\066\010\070\012\064\013\105\015\073\016\107\017\146" +
    "\020\102\021\221\022\220\023\217\050\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\162\001\001\000\026\005\066\010" +
    "\070\012\141\013\144\015\073\016\107\017\104\020\102" +
    "\021\143\050\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\042\024\032\026\114\030\040\031\030\032\043\033\055" +
    "\036\034\045\054\050\060\051\031\052\045\055\057\060" +
    "\033\061\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\066\010\131\013\126\015" +
    "\132\016\130\017\125\050\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\066\010\131\013\126\015\132\016\107\017\133\050" +
    "\111\001\001\000\004\003\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\135\001" +
    "\001\000\020\005\066\010\131\013\126\015\132\016\137" +
    "\017\136\050\111\001\001\000\002\001\001\000\004\003" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\066\010\070\013\145\015\073\016\107\017\146\020" +
    "\102\021\147\050\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\066\010\070\013" +
    "\145\015\073\016\107\017\104\020\161\021\160\050\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\162\001\001\000\024" +
    "\005\066\010\070\013\145\015\073\016\107\017\104\020" +
    "\164\021\163\050\111\001\001\000\002\001\001\000\004" +
    "\004\162\001\001\000\040\005\066\010\175\011\206\012" +
    "\064\013\105\015\177\016\107\017\203\020\102\021\101" +
    "\022\200\023\176\046\201\047\202\050\111\001\001\000" +
    "\012\005\066\010\167\013\170\050\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\066\010\175\011\206\012\064" +
    "\013\105\015\177\016\107\017\203\020\102\021\101\022" +
    "\200\023\176\046\201\047\211\050\111\001\001\000\002" +
    "\001\001\000\032\005\066\010\070\012\064\013\105\015" +
    "\073\016\107\017\104\020\102\021\101\022\216\023\215" +
    "\050\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\212\001\001\000\002\001\001" +
    "\000\004\006\212\001\001\000\002\001\001\000\004\006" +
    "\223\001\001\000\032\005\066\010\070\012\064\013\105" +
    "\015\073\016\107\017\104\020\102\021\101\022\225\023" +
    "\224\050\111\001\001\000\002\001\001\000\004\006\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\007" +
    "\042\024\032\026\231\030\040\031\030\032\043\033\055" +
    "\036\034\045\054\050\060\051\031\052\045\055\057\060" +
    "\033\061\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\066\010\070\012\064\013" +
    "\105\015\073\016\107\017\104\020\102\021\101\022\075" +
    "\023\071\025\235\050\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\243\037\245\050\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\252\001\001\000\002\001\001\000\010\005\243\037\265" +
    "\050\242\001\001\000\002\001\001\000\040\007\042\024" +
    "\032\026\257\030\040\031\030\032\043\033\055\036\034" +
    "\045\054\050\060\051\031\052\045\055\057\060\033\061" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\262\001\001\000\002\001\001\000" +
    "\004\040\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\042\024\032\026\270\030\040\031\030\032" +
    "\043\033\055\036\034\045\054\050\060\051\031\052\045" +
    "\055\057\060\033\061\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\273\001\001" +
    "\000\002\001\001\000\004\040\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\066\010\070\012\064" +
    "\013\105\015\073\016\107\017\104\020\102\021\101\022" +
    "\075\023\071\025\323\050\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\007\042\024\032\026\326\030" +
    "\040\031\030\032\043\033\055\036\034\045\054\050\060" +
    "\051\031\052\045\055\057\060\033\061\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\007\042\024\032\026\332\030\040\031\030\032\043\033" +
    "\055\036\034\045\054\050\060\051\031\052\045\055\057" +
    "\060\033\061\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\066" +
    "\010\337\011\346\012\064\013\105\015\341\016\107\017" +
    "\345\020\102\021\101\022\342\023\340\050\111\054\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\066\010\070\012\064\013\105\015\073\016\107\017\104" +
    "\020\102\021\101\022\351\023\350\050\111\001\001\000" +
    "\002\001\001\000\004\006\212\001\001\000\002\001\001" +
    "\000\036\005\066\010\354\011\362\012\064\013\105\015" +
    "\357\016\107\017\361\020\102\021\101\022\360\023\355" +
    "\050\111\053\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\066\010\354\011\362\012\064\013\105\015\357\016\107" +
    "\017\361\020\102\021\101\022\360\023\355\050\111\053" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\066\010\354\011\362\012\064\013" +
    "\105\015\357\016\107\017\361\020\102\021\101\022\360" +
    "\023\355\050\111\053\370\001\001\000\002\001\001\000" +
    "\036\005\066\010\354\011\362\012\064\013\105\015\357" +
    "\016\107\017\361\020\102\021\101\022\360\023\355\050" +
    "\111\053\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\066\010" +
    "\131\013\u0101\015\132\016\107\017\u0100\050\111\056\u0104" +
    "\057\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\066\010\131\013\u0101\015\132\016" +
    "\107\017\u0100\050\111\056\u0104\057\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\007\042\024\u0108\027" +
    "\u010b\030\040\031\030\032\043\033\055\036\034\050\060" +
    "\051\031\052\045\055\057\060\033\061\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\066\010\u010d\011\u0113\012\064\013\105\015\u010f\016" +
    "\107\017\u0111\020\102\021\101\022\u0110\023\u010e\050\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\u0129\010\131\013\u0127\014\u0128\015\132\016\107" +
    "\017\u0126\050\111\001\001\000\036\005\066\010\u011e\011" +
    "\u0125\012\064\013\105\015\u0120\016\107\017\u0123\020\102" +
    "\021\101\022\u0121\023\u011f\050\111\054\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\u0129\010\131\013\u0127" +
    "\014\u012d\015\132\016\107\017\u0126\050\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\u0134\034\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\066\010\u0138\013\u0137\050\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\066\010\u013a" +
    "\013\u013b\050\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\066\010\070\012\064\013\105\015\073" +
    "\016\107\017\104\020\102\021\101\022\075\023\071\025" +
    "\u013d\050\111\001\001\000\002\001\001\000\004\035\u013f" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\066\010\u0144\013\u0142\015\u0145\016\107\017\u0143\050\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\042" +
    "\024\032\026\u0148\030\040\031\030\032\043\033\055\036" +
    "\034\045\054\050\060\051\031\052\045\055\057\060\033" +
    "\061\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\u014b\013\u014c\050\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\u0156\042\u0155\043\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\007\042\024\032\026" +
    "\u015a\030\040\031\030\032\043\033\055\036\034\045\054" +
    "\050\060\051\031\052\045\055\057\060\033\061\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\u0156\042\u0155\043\u015e\001\001\000\002\001" +
    "\001\000\040\007\042\024\032\026\u0160\030\040\031\030" +
    "\032\043\033\055\036\034\045\054\050\060\051\031\052" +
    "\045\055\057\060\033\061\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected analisis analis_semantico =  new analisis();
    protected Symbol s;
    
    public void syntax_error(Symbol s){
        archivo_ingresado.reportarError("recuperable" ,s.left+1,s.right+1,s.value);
        /*this.s = s;*/
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         archivo_ingresado.reportarError("no recuperable" ,s.left+1,s.right+1,s.value);
    }
    
    public void semantic_error(int left, int right, String mensaje){
        archivo_ingresado.reportarError_Semantico("recuperable",left+1,right+1,mensaje);
    }   

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA_UNA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ESCRIBIR ::= Print Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ESCRIBIR ::= Print Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ESCRIBIR ::= Print Parentesis_a Null Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ESCRIBIR ::= Print Parentesis_a LITERAL_NUMERICO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ESCRIBIR ::= Print Parentesis_a LITERAL_CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // LEER ::= Input Simbolo_input Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FUNCION ::= Identificador Parentesis_a PARAMETROS_FUNCION Parentesis_c 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int param_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int param_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object param_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                
                                                String flag= parser.analis_semantico.func_call_params(id_func,param_func);
                                                if(!flag.equals("")){
                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                }
                                                String res= id_func + "("+param_func.toString()+")";
                                                literal litObject =  new literal();
                                                litObject.setTipo(parser.analis_semantico.get_tipo_func(id_func.toString()));
                                                litObject.setResultado(res);
                                                litObject.setTextual(res);
                                                RESULT = litObject;  
                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                                
                                                String flag= parser.analis_semantico.func_call(id_func); 
                                                if(!flag.equals("")){
                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                }
                                                String res= id_func + "()";
                                                literal litObject =  new literal();
                                                litObject.setTipo(parser.analis_semantico.get_tipo_func(id_func.toString()));
                                                litObject.setResultado(res);
                                                litObject.setTextual(res);
                                                RESULT = litObject; 

                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX Coma PARAMETROS_FUNCION 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param1+","+param2+ ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION_AUX 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // PARAMETROS_FUNCION_AUX ::= EXP_LOGICA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PARAMETROS_FUNCION_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PARAMETROS_FUNCION_AUX ::= Null 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PARAMETROS_FUNCION_AUX ::= LITERAL_CADENA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PARAMETROS_FUNCION_AUX ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DEC_FUNCION ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DEC_FUNCION ::= error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION CALL_PROC_ID_FUNC Parentesis_a TIPOS_PARAMETRO_FUNCION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;
		int tipo_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tipo_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object tipo_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object parametros = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                                                                                                                //setea el string del tipo a la funcion
                                                                                                                parser.analis_semantico.dec_func_aux(id_func,tipo_func);
                                                                                                                //validar parametros
                                                                                                                String flag= parser.analis_semantico.dec_func_param(id_func,parametros); 
                                                                                                                if(!flag.equals("")){
                                                                                                                    parser.semantic_error(id_funcleft,id_funcright, flag);
                                                                                                                }  
                                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DEC_FUNCION ::= TIPOS_RETORNO_FUNCION CALL_PROC_ID_FUNC Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;
		int tipo_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tipo_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object tipo_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                                                                                                                //setea el string del tipo a la funcion
                                                                                                                parser.analis_semantico.dec_func_aux(id_func,tipo_func); 
                                                                                                                
                                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CALL_PROC_ID_FUNC ::= Identificador 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = id_func;
                            boolean flag= parser.analis_semantico.dec_func(id_func); 
                            if(!flag){
                                String mensaje = "El identificador '" + id_func + "' ya está definido";
                                parser.semantic_error(id_funcleft,id_funcright, mensaje);
                                parser.analis_semantico.set_id_current_block("null");
                            }else{
                                parser.analis_semantico.set_id_current_block(id_func.toString());
                            }
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_ID_FUNC",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // RETORNOS_FUNCION ::= Return EXP_LOGICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // RETORNOS_FUNCION ::= Return EXP_LOGICA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_UNA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RETORNOS_FUNCION ::= Return EXP_ARITMETICA_BIN Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // RETORNOS_FUNCION ::= Return Null Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // RETORNOS_FUNCION ::= Return LITERAL_NUMERICO Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RETORNOS_FUNCION ::= Return LITERAL_CADENA Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNOS_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX Coma TIPOS_PARAMETRO_FUNCION 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param1+","+param2+ ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPOS_PARAMETRO_FUNCION ::= TIPOS_PARAM_FUNCION_AUX 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = param; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETRO_FUNCION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPOS_PARAM_FUNCION_AUX ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo + " "+id; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAM_FUNCION_AUX",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOS_RETORNO_FUNCION ::= TIPOS_VARIABLES 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPOS_RETORNO_FUNCION ::= T_void 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RETORNO_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SWITCH ::= Switch Parentesis_a PARAM_SWITCH Parentesis_c Llave_a CASE_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASE_SWITCH ::= Default Dos_puntos Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CASE_SWITCH ::= Default Dos_puntos BLOQUE Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASE_SWITCH ::= Default Dos_puntos BLOQUE Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASE_SWITCH ::= Default Dos_puntos Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador CASE_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASE_SWITCH ::= Case PARAM_SWITCH Dos_puntos BLOQUE Break Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAM_SWITCH ::= TIPO_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAM_SWITCH ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAM_SWITCH ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAM_SWITCH ::= Character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAM_SWITCH ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAM_SWITCH ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAM_SWITCH ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_SWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FOR ::= For Parentesis_a STATEMENT1 Delimitador CONDICION Delimitador STATEMENT3 Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // STATEMENT3 ::= Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT3",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // STATEMENT3 ::= Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT3",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // STATEMENT3 ::= Identificador Asignacion LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT3",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // STATEMENT3 ::= Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT3",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // STATEMENT1 ::= Identificador Asignacion LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // STATEMENT1 ::= Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // STATEMENT1 ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_FUNID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // STATEMENT1 ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATEMENT1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DO_WHILE ::= Do Llave_a BLOQUE Llave_c While Parentesis_a CONDICION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // WHILE ::= While Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c Else Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF_ELSE ::= If Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICION ::= EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BLOQUE ::= RETORNOS_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BLOQUE ::= Llave_a BLOQUE_ANIDADO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BLOQUE ::= SENTENCIA BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_ANIDADO ::= SENTENCIA BLOQUE_ANIDADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_ANIDADO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BLOQUE_ANIDADO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_ANIDADO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= error Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= ESCRIBIR Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= LEER Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA ::= FUNCION Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= CAST_STRING_INT Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA ::= ASIG_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA ::= DEC_VARIABLE Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_logico.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_logico.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_LOGICA ::= Parentesis_a EXP_LOGICA Parentesis_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = "(" + exp.toString() + ")"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                        literal objectparam1=(literal)param1;
                                                                        if(!objectparam1.getTipo().equals("null")){
                                                                            if(objectparam1.getTipo().equals("bool") ){
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                            }
                                                                        }else{
                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                        }
                                                                        RESULT = param1.toString() + tipo_logico.toString() + param2.toString();
                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_LOGICA ::= EXP_LOGICA_UNA TIPOS_LOGICOS EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                            literal objectparam1=(literal)param1;
                                                                            literal objectparam2=(literal)param2;
                                                                            if(!objectparam1.getTipo().equals("null")){
                                                                                if(!objectparam2.getTipo().equals("null")){
                                                                                     if(objectparam1.getTipo().equals("bool")){
                                                                                        if(objectparam2.getTipo().equals("bool")){

                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operación";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                        parser.semantic_error(param1left,param1right, mensaje); 
                                                                                    }
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                    parser.semantic_error(param2left,param2right, mensaje);
                                                                                }
                                                                            }else{
                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                parser.semantic_error(param1left,param1right, mensaje);
                                                                            }
                                                                            RESULT = param1.toString() + tipo_logico.toString() + param2.toString();
                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_LOGICA_UNA ::= Negacion EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado("!" +exp.toString());
                        litObject.setTextual("!" +exp.toString());
                        RESULT = litObject; 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_LOGICA_UNA ::= EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado(exp.toString());
                        litObject.setTextual(exp.toString());
                        RESULT = litObject; 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_LOGICA_UNA ::= Negacion LITERAL_BOOLEANO 
            {
              Object RESULT =null;
		int lit_negleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lit_negright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit_neg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                            literal objectlit1=(literal)lit;
                                            String tipo= objectlit1.getTipo();
                                            if(!tipo.equals("null")){
                                                if(tipo.equals("bool")){
                                                    String temp= objectlit1.getTextual();
                                                    objectlit1.setTextual("!"+ temp);

                                                }else{
                                                    String mensaje = "'" + objectlit1.getTextual() + "' no permite la operacion '!'";
                                                    parser.semantic_error(lit_negleft,lit_negright, mensaje);
                                                }
                                            }
                                            else{
                                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                                parser.semantic_error(litleft,litright, mensaje);
                                            }
                                            RESULT = objectlit1;
                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_LOGICA_UNA ::= LITERAL_BOOLEANO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_LOGICA_UNA ::= Negacion LITERAL_FUNID 
            {
              Object RESULT =null;
		int lit_negleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lit_negright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lit_neg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                            literal objectlit1=(literal)lit;
                                            String tipo= objectlit1.getTipo();
                                            if(!tipo.equals("null")){
                                                if(tipo.equals("bool")){
                                                    String temp= objectlit1.getTextual();
                                                    objectlit1.setTextual("!"+ temp);

                                                }else{
                                                    String mensaje = "El identificador '" + objectlit1.getTextual() + "' no permite la operacion '!'";
                                                    parser.semantic_error(lit_negleft,lit_negright, mensaje);
                                                }
                                            }else{
                                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                                parser.semantic_error(litleft,litright, mensaje);
                                            }
                                            RESULT = objectlit1;
                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_LOGICA_UNA ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectlit1=(literal)lit;
                            String tipo= objectlit1.getTipo();
                            if(tipo.equals("null")){
                                String mensaje = "El identificador '" + objectlit1.getTextual() + "' no se ha declarado";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT = objectlit1;
                         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA_UNA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_rel.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_rel.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_RELACIONAL ::= Parentesis_a EXP_RELACIONAL Parentesis_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = "(" + exp.toString() + ")"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES EXP_RELACIONAL 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    literal objectparam1=(literal)param1;
                                                                                    if(!objectparam1.getTipo().equals("null")){
                                                                                        if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                        parser.semantic_error(param1left,param1right, mensaje);
                                                                                    }
                                                                                    RESULT = param1.toString() + tipo_rel.toString() + param2.toString();
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_RELACIONAL ::= PARAM_EXP_RELACIONAL TIPOS_RELACIONALES PARAM_EXP_RELACIONAL 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                         if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                                            if(objectparam2.getTipo().equals("int") || objectparam2.getTipo().equals("float")){

                                                                                                            }else{
                                                                                                                String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operación";
                                                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                                                            }
                                                                                                        }else{
                                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                                            parser.semantic_error(param1left,param1right, mensaje); 
                                                                                                        }
                                                                                                    }else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = param1.toString() + tipo_rel.toString() + param2.toString();
                                                                                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_RELACIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAM_EXP_RELACIONAL ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAM_EXP_RELACIONAL ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAM_EXP_RELACIONAL ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_arit.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = "(" + exp.toString() + ")" + tipo_arit.toString() + param2.toString() ; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_ARITMETICA_BIN ::= Parentesis_a EXP_ARITMETICA_BIN Parentesis_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = "(" + exp.toString() + ")"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                                        literal objectparam1=(literal)param1;
                                                                                        if(!objectparam1.getTipo().equals("null")){
                                                                                            if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                                parser.semantic_error(param2left,param2right, mensaje); 
                                                                                            }
                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                                        }
                                                                                        RESULT = param1.toString() + tipo_arit.toString() + param2.toString();
                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP_ARITMETICA_BIN ::= PARAM_EXP_ARITMETICA TIPOS_ARITMETICOS PARAM_EXP_ARITMETICA 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tipo_aritleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_aritright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_arit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                literal objectparam1=(literal)param1;
                                                                                literal objectparam2=(literal)param2;
                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                        if(objectparam1.getTipo().equals("int") || objectparam1.getTipo().equals("float")){
                                                                                            if(objectparam2.getTipo().equals("int") || objectparam2.getTipo().equals("float")){
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "El identificador '" + objectparam2.getTextual() + "' no permite esta operación";
                                                                                                 parser.semantic_error(param1left,param1right, mensaje); 
                                                                                            }
                                                                                        }else{
                                                                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                                                            parser.semantic_error(param2left,param2right, mensaje); 
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                    }
                                                                                }
                                                                                else{
                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                }
                                                                                RESULT = param1.toString() + tipo_arit.toString() + param2.toString();
                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_BIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAM_EXP_ARITMETICA ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAM_EXP_ARITMETICA ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAM_EXP_ARITMETICA ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_EXP_ARITMETICA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP_ARITMETICA_UNA ::= Unario_negatico Identificador 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    literal litObject =  new literal();
                                    RESULT=null;
                                    if(flag){
                                        String res= parser.analis_semantico.get_tipo_var(id_var.toString());
                                        if(res.equals("int") || res.equals("float")){
                                             if(parser.analis_semantico.var_inicializada(id_var.toString()).equals("true")){
                                                litObject.setTipo(res); //obtener tipo a traves de una funcion 
                                                litObject.setResultado("--"+id_var.toString());
                                                litObject.setTextual("--"+id_var.toString());
                                                RESULT = litObject;
                                             }
                                             else{
                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha inicializado";
                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                             }
                                              
                                        }
                                        else{
                                            String mensaje = "El identificador '" + id_var + "' no permite esta operación";
                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                        }
                                        
                                    }else{
                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                    }
                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP_ARITMETICA_UNA ::= Unario_positivo Identificador 
            {
              Object RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                    literal litObject =  new literal();
                                    RESULT=null;
                                    if(flag){
                                        String res= parser.analis_semantico.get_tipo_var(id_var.toString());
                                        if(res.equals("int") || res.equals("float")){
                                            if(parser.analis_semantico.var_inicializada(id_var.toString()).equals("true")){
                                                litObject.setTipo(res); //obtener tipo a traves de una funcion 
                                                litObject.setResultado("++"+id_var.toString());
                                                litObject.setTextual("++"+id_var.toString());
                                                RESULT = litObject;  
                                            }else{
                                                String mensaje = "El identificador '" + id_var.toString() + "' no se ha inicializado";
                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                            }
                                            
                                        }
                                        else{
                                            String mensaje = "El identificador '" + id_var + "' no permite esta operación";
                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                        }
                                        
                                    }else{
                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                    }


                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_ARITMETICA_UNA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CAST_STRING_INT ::= String_to_int Parentesis_a LITERAL_FUNID Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CAST_STRING_INT ::= String_to_int Parentesis_a LITERAL_CADENA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAST_STRING_INT",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIG_VARIABLE ::= Identificador Corchete_a POSICION_ARREGLO Corchete_c Asignacion POSICION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIG_VARIABLE ::= Identificador Asignacion OPERADOR_TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIG_VARIABLE ::= Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIG_VARIABLE ::= Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_VARIABLE ::= Identificador Asignacion Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_VARIABLE ::= Identificador Asignacion LITERAL_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG_VARIABLE ::= Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_VARIABLE",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX Coma PARAMETROS_ARREGLO 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                        literal objectparam1=(literal)param1;
                                        if(!objectparam1.getTipo().equals("null")){
                                                if(!objectparam1.getTipo().equals("int") ){
                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                                    parser.semantic_error(param1left,param1right, mensaje); 
                                                }
                                        }else{
                                            String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                            parser.semantic_error(param1left,param1right, mensaje);
                                        }
                                        RESULT = objectparam1.getTextual() + ","+ param2.toString(); 

                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS_ARREGLO ::= PARAMETROS_ARREGLO_AUX 
            {
              Object RESULT =null;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
                            literal objectparam1=(literal)param1;
                            if(!objectparam1.getTipo().equals("null")){
                                    if(!objectparam1.getTipo().equals("int") ){
                                        String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                        parser.semantic_error(param1left,param1right, mensaje); 
                                    }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(param1left,param1right, mensaje);
                            }
                            RESULT = objectparam1.getTextual(); 
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS_ARREGLO_AUX ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal litObject =  new literal();
                            litObject.setTipo("int");
                            litObject.setResultado(lit.toString());
                            litObject.setTextual(lit.toString());
                            RESULT = litObject; 
                               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS_ARREGLO_AUX ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectparam1=(literal)lit;
                            if(!objectparam1.getTipo().equals("null")){
                                if(objectparam1.getTipo().equals("int")){

                                }else{
                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                    parser.semantic_error(litleft,litright, mensaje);
                                }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT=objectparam1;
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS_ARREGLO_AUX ::= Int 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            literal litObject =  new literal();
            litObject.setTipo("int");
            litObject.setResultado(lit);
            litObject.setTextual(lit.toString());
            RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_ARREGLO_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // POSICION_ARREGLO ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // POSICION_ARREGLO ::= LITERAL_FUNID 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            literal objectparam1=(literal)lit;
                            if(!objectparam1.getTipo().equals("null")){
                                if(objectparam1.getTipo().equals("int")){

                                }else{
                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no permite esta operación";
                                    parser.semantic_error(litleft,litright, mensaje);
                                }
                            }else{
                                String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                parser.semantic_error(litleft,litright, mensaje);
                            }
                            RESULT=objectparam1;
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // POSICION_ARREGLO ::= TIPO_ARREGLO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // POSICION_ARREGLO ::= Int 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		      
                literal litObject =  new literal();
                litObject.setTipo("int");
                litObject.setResultado(lit);
                litObject.setTextual(lit.toString());
                RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSICION_ARREGLO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Corchete_c Asignacion Llave_a PARAMETROS_ARREGLO Llave_c 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir explícitamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Corchete_c Asignacion Null 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir explícitamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Corchete_a Corchete_c 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                                                                                            boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                            if(!flag){
                                                                                                if(tipo_var.toString().equals("int")){
                                                                                                    parser.analis_semantico.setVar(id_var.toString(),"array");

                                                                                                }else{
                                                                                                    String mensaje = "Imposible convertir explícitamente de '" + "int" + "' a '"+tipo_var.toString()+"'";
                                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                                }

                                                                                            }else{
                                                                                                String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                            }
                                                                                                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion OPERADOR_TERNARIO 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        literal objectlit1=(literal)exp;
                                                                                        String tipo= objectlit1.getTipo();
                                                                                        if(!tipo.equals("null")){
                                                                                            if(tipo_var.toString().equals(tipo)){
                                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                            }else{
                                                                                                String mensaje = "Imposible convertir explícitamente de '" + tipo + "' a '"+tipo_var.toString()+"'";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }

                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(tipo_var.toString().equals("bool")){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "Imposible convertir explícitamente a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    } 
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                        boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                        if(!flag){
                                                                            literal objectlit1=(literal)exp;
                                                                            String tipo= objectlit1.getTipo();
                                                                            if(tipo_var.toString().equals(tipo) ){
                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                            }
                                                                            else{
                                                                                String mensaje = "Imposible convertir explícitamente de '" + tipo + "' a '"+tipo_var.toString()+"'";
                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                            }
                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                            parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                        }
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(tipo_var.toString().equals("int") || tipo_var.toString().equals("int")){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }else{
                                                                                            String mensaje = "Imposible convertir explícitamente a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exp_unaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exp_unaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object exp_una = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        if(exp_una!=null){
                                                                                            literal litObject=(literal)exp_una;
                                                                                            if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                                parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                            }
                                                                                            else{
                                                                                                String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                                parser.semantic_error(id_varleft,id_varright, mensaje);    
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }
                                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_CADENA 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                                                boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                if(!flag){
                                                                                    literal litObject=(literal)lit;
                                                                                    if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                        parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                    }
                                                                                    else{
                                                                                        String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                    }
                                                                                }else{
                                                                                    String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                    parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                } 
                                                                                 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador Asignacion LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                                                    if(!flag){
                                                                                        literal litObject=(literal)lit;
                                                                                        if(tipo_var.toString().equals(litObject.getTipo())){
                                                                                            parser.analis_semantico.setVar(id_var.toString(),tipo_var.toString());
                                                                                        }
                                                                                        else{
                                                                                            String mensaje = "Imposible convertir explícitamente de '" + litObject.getTipo() + "' a '"+tipo_var.toString()+"'";
                                                                                            parser.semantic_error(id_varleft,id_varright, mensaje);
                                                                                        }
                                                                                    }else{
                                                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                                                    }   
                                                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEC_VARIABLE ::= TIPOS_VARIABLES Identificador 
            {
              Object RESULT =null;
		int tipo_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipo_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_var = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                                                    boolean flag= parser.analis_semantico.existeVariable(id_var.toString());
                                                    if(!flag){
                                                        parser.analis_semantico.setVar_Aux(id_var.toString(),tipo_var.toString());
                                                    }else{
                                                        String mensaje = "El identificador '" + id_var + "' ya está definido";
                                                        parser.semantic_error(id_varleft,id_varright, mensaje); 
                                                    }
                                                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_VARIABLE",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADOR_TERNARIO ::= Corchete_a Parentesis_a EXP_LOGICA Parentesis_c Sig_pregunta PARAM_OPERADOR_TERNARIO Dos_puntos PARAM_OPERADOR_TERNARIO Corchete_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                literal litObject =  new literal();
                                                                                                litObject.setTipo("null");
                                                                                                litObject.setResultado("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                litObject.setTextual("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                        if(objectparam1.getTipo().equals(objectparam2.getTipo())){
                                                                                                                litObject.setTipo(objectparam1.getTipo());    
                                                                                                        }
                                                                                                        else{
                                                                                                            String mensaje = "Los tipos de retorno del 'IF ternario' no coinciden";
                                                                                                            parser.semantic_error(param1left,param1right, mensaje);
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(param2left,param2right, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = litObject;     
                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_TERNARIO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_TERNARIO ::= Corchete_a Parentesis_a EXP_LOGICA_UNA Parentesis_c Sig_pregunta PARAM_OPERADOR_TERNARIO Dos_puntos PARAM_OPERADOR_TERNARIO Corchete_c 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int param1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int param1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object param1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int param2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int param2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object param2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                                                                                                literal objectparam1=(literal)param1;
                                                                                                literal objectparam2=(literal)param2;
                                                                                                literal objectexp=(literal)exp;
                                                                                                literal litObject =  new literal();
                                                                                                litObject.setTipo("null");
                                                                                                litObject.setResultado("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                litObject.setTextual("("+exp.toString()+")? " + param1.toString()+":" + param2.toString());
                                                                                                if(!objectparam1.getTipo().equals("null")){
                                                                                                    if(!objectparam2.getTipo().equals("null")){
                                                                                                        if(objectexp.getTipo().equals("bool")){
                                                                                                            if(objectparam1.getTipo().equals(objectparam2.getTipo())){
                                                                                                                    litObject.setTipo(objectparam1.getTipo());
                                                                                                                    
                                                                                                            }
                                                                                                            else{
                                                                                                                String mensaje = "Los tipos de retorno del 'IF ternario' no coinciden";
                                                                                                                parser.semantic_error(param1left,param1right, mensaje);
                                                                                                            } 
                                                                                                        }else{
                                                                                                            String mensaje = "El identificador '" + objectexp.getTextual() + "' no permite esta operación";
                                                                                                            parser.semantic_error(expleft,expright, mensaje); 
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        String mensaje = "El identificador '" + objectparam2.getTextual() + "' no se ha definido";
                                                                                                        parser.semantic_error(expleft,expright, mensaje);
                                                                                                    }
                                                                                                }else{
                                                                                                    String mensaje = "El identificador '" + objectparam1.getTextual() + "' no se ha definido";
                                                                                                    parser.semantic_error(param1left,param1right, mensaje);
                                                                                                }
                                                                                                RESULT = litObject;     
                                                                                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_TERNARIO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAM_OPERADOR_TERNARIO ::= EXP_LOGICA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        literal litObject =  new literal();
                        litObject.setTipo("bool");
                        litObject.setResultado(lit.toString());
                        litObject.setTextual(lit.toString());
                        RESULT = litObject; 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAM_OPERADOR_TERNARIO ::= EXP_LOGICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = lit; 
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAM_OPERADOR_TERNARIO ::= EXP_ARITMETICA_BIN 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                literal litObject =  new literal();
                                litObject.setTipo("int");
                                litObject.setResultado(lit.toString());
                                litObject.setTextual(lit.toString());
                                RESULT = litObject; 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAM_OPERADOR_TERNARIO ::= EXP_ARITMETICA_UNA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM_OPERADOR_TERNARIO ::= LITERAL_CADENA 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAM_OPERADOR_TERNARIO ::= LITERAL_NUMERICO 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = lit; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_OPERADOR_TERNARIO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_ARREGLO ::= Identificador Corchete_a LITERAL_FUNID Corchete_c 
            {
              Object RESULT =null;
		int id_arregloleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id_arregloright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id_arreglo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                                                        String res= parser.analis_semantico.get_tipo_var(id_arreglo.toString());
                                                                        literal litObject2 =  new literal();
                                                                        litObject2.setTipo("null");
                                                                        if(res!="null"){
                                                                            if(res=="array"){
                                                                                literal litObject3=(literal)id;
                                                                                if(litObject3.getTipo().equals("int")){

                                                                                    literal litObject4 =  new literal();
                                                                                    litObject4.setTipo("int"); //obtener tipo a traves de una funcion 
                                                                                    litObject4.setResultado(id_arreglo+ "["+litObject4.getTextual()+"]");
                                                                                    litObject4.setTextual(id_arreglo+ "["+litObject4.getTextual()+"]");
                                                                                

                                                                                }
                                                                                else{
                                                                                    String mensaje = "Imposible convertir explícitamente a int'" + litObject3.getTextual()+"'" ;
                                                                                    parser.semantic_error(idleft,idright, mensaje);
                                                                                }
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + id_arreglo + "' no es un array";
                                                                                parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                            }

                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_arreglo + "' no se ha declarado";
                                                                            parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                        }
                                                                        RESULT = litObject2;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_ARREGLO ::= Identificador Corchete_a LITERAL_NUMERICO Corchete_c 
            {
              Object RESULT =null;
		int id_arregloleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int id_arregloright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id_arreglo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                                                                        String res= parser.analis_semantico.get_tipo_var(id_arreglo.toString());
                                                                        literal litObject2 =  new literal();
                                                                        litObject2.setTipo("null");
                                                                        if(res!="null"){
                                                                            if(res=="array"){
                                                                                literal litObject1=(literal)num;
                                                                                litObject2.setTipo("int"); 
                                                                                litObject2.setResultado(id_arreglo+ "["+litObject1.getTextual()+"]");
                                                                                litObject2.setTextual(id_arreglo+ "["+litObject1.getTextual()+"]");
                                                                               
                                                                            }
                                                                            else{
                                                                                String mensaje = "El identificador '" + id_arreglo + "' no es un array";
                                                                                parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                            }

                                                                        }
                                                                        else{
                                                                            String mensaje = "El identificador '" + id_arreglo + "' no se ha declarado";
                                                                            parser.semantic_error(id_arregloleft,id_arregloright, mensaje);
                                                                        }
                                                                         RESULT = litObject2;

                                                                        
                                                                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ARREGLO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LITERAL_FUNID ::= FUNCION 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo(parser.analis_semantico.get_tipo_func(lit.toString())); //obtener tipo a traves de una funcion 
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = lit;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_FUNID",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LITERAL_FUNID ::= Identificador 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo(parser.analis_semantico.get_tipo_var(lit.toString())); //obtener tipo a traves de una funcion 
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    if(litObject.getTipo()!="null"){
                        if(parser.analis_semantico.var_inicializada(lit.toString()).equals("false")){
                            String mensaje = "El identificador '" + lit.toString() + "' no se ha inicializado";
                            parser.semantic_error(litleft,litright, mensaje);
                        }
                    }
                    RESULT = litObject;  
                     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_FUNID",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LITERAL_BOOLEANO ::= False 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("bool");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LITERAL_BOOLEANO ::= True 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("bool");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_BOOLEANO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LITERAL_CADENA ::= Character 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("char");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject;  
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_CADENA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LITERAL_CADENA ::= String 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    literal litObject =  new literal();
                    litObject.setTipo("string");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_CADENA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LITERAL_NUMERICO ::= TIPO_ARREGLO 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = literal; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LITERAL_NUMERICO ::= Float 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    literal litObject =  new literal();
                    litObject.setTipo("float");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LITERAL_NUMERICO ::= Int 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  
                    literal litObject =  new literal();
                    litObject.setTipo("int");
                    litObject.setResultado(lit);
                    litObject.setTextual(lit.toString());
                    RESULT = litObject; 
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL_NUMERICO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_VARIABLES ::= T_string 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_VARIABLES ::= T_char 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_VARIABLES ::= T_bool 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= T_float 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= T_int 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_LOGICOS ::= Disyuncion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_LOGICOS ::= Conjuncion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_LOGICOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_RELACIONALES ::= Mayor_igual 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_RELACIONALES ::= Menor_igual 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_RELACIONALES ::= Igual 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_RELACIONALES ::= Mayor 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS_RELACIONALES ::= Menor 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_RELACIONALES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS_ARITMETICOS ::= Potencia 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPOS_ARITMETICOS ::= Division 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPOS_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPOS_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipo; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_ARITMETICOS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DEC_FUNCION INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= T_int CALL_PROC_MAIN Parentesis_a Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;
		 parser.analis_semantico.dec_main(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CALL_PROC_MAIN ::= Main 
            {
              Object RESULT =null;
		int id_funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int id_funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id_func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    RESULT = id_func;
                    boolean flag= parser.analis_semantico.dec_func(id_func); 
                    if(!flag){
                        String mensaje = "La variable '" + id_func + "' ya está definida";
                        parser.semantic_error(id_funcleft,id_funcright, mensaje);
                        parser.analis_semantico.set_id_current_block("null");
                    }else{
                        parser.analis_semantico.set_id_current_block(id_func.toString());
                    }
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_PROC_MAIN",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

